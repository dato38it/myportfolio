Skills:
# Верстка Html-страниц.
# Виртуализация.
# Администрирование локальных, виртуальных и облачных серверов.
# Администрирование веб-сервера LAMP.
# Администрирование баз данных.
# Миграция базы данных.
# Администрирование веб-сервера Django.
# Разработка сайта на Django.
# Администрирование веб-сервера React.js.
# Frontend-разработка Веб-сайта React.js.
# English
# Написание Sql запросов.
# Разработка Хранилище паролей.
# Разработка Calendar.
# Разработка Високосный год.
# Разработка Погода.
# Разработка Paint.
# Разработка текстового редактора.
# Разработка Парсинг ПДФ файлов.
# Разработка A Machine Learning Web App.
# Разработка Режим засыпания.
# Разработка Обработка логов.
# Разработка viewing images.
# Разработка Кодировка с помощью азбуки Морзе.
# Разработка Когда День рождение.
# Разработка Конвертер валют.
# Разработка калькулятор.
# Разработка Планировщик задач.
# Разработка местоположение по IP.
# Разработка медицинская клиника.
# Разработка Code Review.
# Разработка Color Mixer.
# Разработка Pin Ball.
# Разработка Snake.
# Разработка Тетрис.
# Разработка шахматы.
# Разработка Data Conversion.
# Разработка курсы доллара.
# Разработка Генерация.
# Разработка собстенного модуля.
# Разработка макросов в VBA.
# Астрофизика.
# Волновая оптика.
# Квантовая Механика И Строение Вещества.
# Методы Обработки Сигналов И Данных.
# Термодинамика И Статистическая Физика.
Task:
Создание HTML-списков.
# Верстка Html-страниц.
Decision:
<ul>
<li>Linux Server Administration</li>
<li>Working with websites</li>
</ul>
Source:
# https://html5book.ru/html-lists/?ysclid=lis7im73ng615064864 - Создание HTML-списков.
Task:
Adding the Ubuntu using wsl
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
PS C:\Windows\system32> Start-Process powershell -Verb runAs
PS C:\Windows\system32> wsl --list --online
PS C:\Windows\system32> wsl --install -d Ubuntu-20.04
PS C:\Windows\system32> Restart-Computer
Task:
Установка qemu-kvm.
# Виртуализация.
Decision:
root@aw:/# egrep -c '(vmx|svm)' /proc/cpuinfo
root@aw:/# sudo apt install qemu-kvm libvirt-daemon-system virtinst libvirt-clients bridge-utils virt-manager
root@aw:/# systemctl start libvirtd
root@aw:/# systemctl enable libvirtd
root@aw:/# kvm-ok
root@aw:/# sudo usermod -aG kvm Tuser
root@aw:/# sudo usermod -aG libvirt Tuser
root@aw:/# ip link | grep virb
Source:
# https://winitpro.ru/index.php/2020/02/04/ustanovka-zapusk-kvm-v-linux-centos/
Task:
Установка виртуальной машины Ubuntu.
# Виртуализация.
Decision:
root@aw:/# virt-install \
--name Ubuntu22 \
--ram 2048 \
--vcpus 2 \
--disk path=/var/lib/libvirt/images/Ubuntu22.qcow2,size=50 \
--os-variant ubuntu22.04 \
--network default \
--cdrom /var/lib/libvirt/images/ubuntu-22.04.3-desktop-amd64.iso
root@aw:/# virsh list --all
Id Name     State
-----------------------------
-  Ubuntu22 shut off
root@aw:/# virsh start Ubuntu22
root@aw:/# virt-viewer --connect qemu:///system --wait Ubuntu22
Task:
Импорт готовой виртуальной машины в Qemu-Kvm.
# Виртуализация.
Decision:
root@aw:/# virt-install \
--name Ubuntu2204 \
--ram 2048 \
--vcpus 2 \
--disk /mnt/s/images/Ubuntu22.qcow2,bus=sata \
--import \
--os-variant ubuntu22.04 \
--network default
Task:
How to create snapshots of QEMU/KVM guests.
# Виртуализация.
Decision:
root@aw:/# virsh snapshot-create-as Ubuntu22 snapshot0 --description "update+ssh"
root@aw:/# virsh snapshot-list Ubuntu22
Name    Creation Time       State
--------------------------------------------------
snapshot0 2024-03-09 09:46:33 +0800 running
root@aw:/# virt-manager
Source:
# https://linuxconfig.org/how-to-create-snapshots-of-qemu-kvm-guests - Creating snapshots with virsh.
Task:
Запуск виртуальных машин.
# Виртуализация. 
Decision:
root@aw:/# virsh list --all
ID   Имя           Состояние
-------------------------------
2    Centos9       работает
-    Alt           выключен
-    Centos        выключен
-    Kali          выключен
-    ubuntu22.04   выключен
-    Windows       выключен
root@aw:/# virsh start Windows10
root@aw:/# virt-viewer --connect qemu:///system --wait Windows10 &
Source:
# https://winitpro.ru/index.php/2020/02/10/virsh-upravlenie-virtualnymi-mashinami-kvm/
# https://www.server-world.info/en/note?os=CentOS_Stream_9&p=kvm&f=1
# https://www.server-world.info/en/note?os=CentOS_Stream_9&p=initial_conf&f=3
# https://www.server-world.info/en/note?os=CentOS_Stream_9&p=kvm&f=2
Task:
Настройка SSH сервера.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@aw:/# cat /root/.ssh/known_hosts
root@aw:/# cd keys 
root@aw:/# ssh-keygen
root@aw:/# ls
wslkvmubuntu wslkvmubuntu.pub
root@aw:/# ssh-copy-id -i wslkvmubuntu.pub tuser@tipubuntu
root@aw:/# cat /root/.ssh/known_hosts
root@aw:/# ssh tuser@tipubuntu
Source:
# https://timeweb.cloud/docs/unix-guides/ssh-key-authentication - Авторизация по SSH-ключу.
Task:
Создание пользователя.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
tuser@kvmubuntu:~$ sudo passwd root
tuser@kvmubuntu:~$ su -
root@kvmubuntu:~# useradd -m -d /home/tuser -u 1001 -s /bin/bash tuser
root@kvmubuntu:~# passwd tuser
root@kvmubuntu:~# cat /etc/passwd | grep tuser
tuser:x:1001:1001::/home/tuser:/bin/bash
root@kvmubuntu:~# id tuser
uid=1001(tuser) gid=1001(tuser) groups=1001(tuser)
root@kvmubuntu:~# usermod -aG sudo tuser
Source:
# https://www.inp.nsk.su/~bolkhov/teach/inpunix/setup_users.ru.html - Манипуляции с пользователями.
# https://losst.pro/kak-sozdat-polzovatelya-linux - Команда useradd.
Task:
Переименовать имя хоста.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# hostname
UBUNTU.twc1.net
root@kvmubuntu:~# hostname kvmubuntu.twc1.net
root@kvmubuntu:~# cat /etc/hosts
127.0.0.1 UBUNTU.twc1.net
root@kvmubuntu:~# vim /etc/hosts
root@kvmubuntu:~# cat /etc/hosts
127.0.0.1 kvmubuntu.twc1.net
root@kvmubuntu:~# cat /etc/hostname
UBUNTU.twc1.net
root@kvmubuntu:~# vim /etc/hostname
root@kvmubuntu:~# cat /etc/hostname
kvmubuntu.twc1.net
root@kvmubuntu:~# reboot
Task:
Удаление пользователя из группы Linux.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# groups tuser
tuser : tuser adm cdrom sudo dip plugdev lpadmin lxd sambashare
root@kvmubuntu:~# deluser tuser adm
Removing user `tuser' from group `adm' ...
Done.
root@kvmubuntu:~# deluser tuser cdrom
Removing user `tuser' from group `cdrom' ...
Done.
root@kvmubuntu:~# deluser tuser dip
Removing user `tuser' from group `dip' ...
Done.
root@kvmubuntu:~# deluser tuser plugdev
Removing user `tuser' from group `plugdev' ...
Done.
root@kvmubuntu:~# deluser tuser lpadmin
Removing user `tuser' from group `lpadmin' ...
Done.
root@kvmubuntu:~# deluser tuser lxd
Removing user `tuser' from group `lxd' ...
Done.
root@kvmubuntu:~# deluser tuser sambashare
Removing user `tuser' from group `sambashare' ...
Done.
root@kvmubuntu:~# deluser tuser sudo
Removing user `tuser' from group `sudo' ...
Done.
root@kvmubuntu:~# groups tuser
tuser : tuser
tuser@kvmubuntu:~$ sudo apt update
tuser is not in the sudoers file. This incident will be reported.
Source:
# https://losst.pro/udalit-polzovatelya-iz-gruppy-linux?ysclid=lxbdgff7yz225601747 - Удаление пользователя из группы Linux.
Task:
Отключение входа для суперпользователя.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config
root@kvmubuntu:~# sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
root@kvmubuntu:~# sed -i 's/UsePAM yes/UsePAM no/' /etc/ssh/sshd_config
root@kvmubuntu:~# vim /etc/ssh/sshd_config
root@kvmubuntu:~# cat /etc/ssh/sshd_config | grep PermitRootLogin
#PermitRootLogin yes
PermitRootLogin no
# the setting of "PermitRootLogin without-password".
root@kvmubuntu:~# cat /etc/ssh/sshd_config | grep PasswordAuthentication
#PasswordAuthentication yes
PasswordAuthentication no
# PasswordAuthentication. Depending on your PAM configuration,
# PAM authentication, then enable this but set PasswordAuthentication
  PasswordAuthentication yes
root@kvmubuntu:~# vim /etc/ssh/sshd_config
root@kvmubuntu:~# cat /etc/ssh/sshd_config | grep UsePAM
#UsePAM yes
UsePAM no
root@kvmubuntu:~# cat /etc/ssh/sshd_config | grep ChallengeResponseAuthentication
ChallengeResponseAuthentication no
root@kvmubuntu:~# systemctl restart ssh
Source:
# https://linuxconfig.org/allow-ssh-root-login-on-ubuntu-22-04-jammy-jellyfish-linux?ysclid=lxbo86izx4139346766 - Allowing SSH root login on Ubuntu 22.04 step by step instructions. 
# https://losst.pro/bezopasnost-servera-linux#toc-13-programmy-s-suid-i-sgid-bitami - Настройка SSH сервера.
Task:
Регулярная смена пароля.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# chage -M 7 -m 6 -W 5 tuser
Source:
# https://manpages.ubuntu.com/manpages/trusty/ru/man1/chage.1.html - ПАРАМЕТРЫ.
Task:
Установка браузера chrome для тестирования Веб-приложений.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
root@kvmubuntu:~# dpkg -i --force-depends google-chrome-stable_current_amd64.deb
tuser@kvmubuntu:~$ google-chrome
Source:
# https://askubuntu.com/questions/510056/how-to-install-google-chrome - How to install Google Chrome.
Task:
Настройка SELinux.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# apt install policycoreutils selinux-utils selinux-basics
root@kvmubuntu:~# sestatus
SELinux status: disabled
root@kvmubuntu:~# selinux-activate
root@kvmubuntu:~# cat /etc/selinux/config 
...
SELINUX=permissive
SELINUXTYPE=default
SETLOCALDEFS=0
root@kvmubuntu:~# reboot
root@kvmubuntu:~# sestatus
...
SELinux status: enabled
Current mode: permissive
Mode from config file: permissive
root@kvmubuntu:~# setenforce 1
root@kvmubuntu:~# getenforce
Enforcing
root@kvmubuntu:~# touch /.autolabel
root@kvmubuntu:~# reboot
Source:
# https://ruvds.com/ru/helpcenter/vvedenie-v-selinux-pod-ubuntu-20-04/ - Инсталляция SELinux.
# https://losst.pro/nastrojka-selinux - Настройка SELinux.
# https://www.dmosk.ru/miniinstruktions.php?mini=selinux-setting&ysclid=lvn75pdsk3201545540#settings-policies - Диагностика проблем.
Task:
Change SSH Port on CentOS or RHEL or Fedora With SELinux.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# semanage port -l | grep ssh
ssh_port_t tcp 22
root@kvmubuntu:~# vim /etc/ssh/sshd_config
root@kvmubuntu:~# cat /etc/ssh/sshd_config
...
#Port 22
Port 2233
root@kvmubuntu:~# semanage port -a -t ssh_port_t -p tcp 2233
root@kvmubuntu:~# semanage port -l | grep ssh
ssh_port_t tcp 2233, 22
root@kvmubuntu:~# ufw allow 2233
root@kvmubuntu:~# systemctl restart sshd
root@kvmubuntu:~# netstat -tunl | grep 2233
tcp 0 0 0.0.0.0:2233 0.0.0.0:* LISTEN 
tcp6 0 0 :::2233 :::* LISTEN
root@kvmubuntu:~# exit 
root@aw:/# ssh -X tuser@tipubuntu
ssh: connect to host tipubuntu port 22: Connection refused
root@aw:/# ssh -Xp 2233 tuser@tipubuntu
Source:
# https://computingforgeeks.com/change-ssh-port-centos-rhel-fedora-with-selinux/ - Change SSH Port on CentOS or RHEL or Fedora With SELinux.
Task:
Sftp сервер.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# groupadd sftpgroup
root@kvmubuntu:~# useradd --no-create-home --gid sftpgroup sftptuser
root@kvmubuntu:~# passwd sftptuser
root@kvmubuntu:~# mkdir /srv/sftp
root@kvmubuntu:~# chown root:root /srv/sftp
root@kvmubuntu:~# chmod 755 /srv/sftp
root@kvmubuntu:~# mkdir /srv/sftp/sftptuser
root@kvmubuntu:~# chown sftptuser:sftpgroup /srv/sftp/sftptuser
root@kvmubuntu:~# vim /etc/ssh/sshd_config
root@kvmubuntu:~# cat /etc/ssh/sshd_config
...
#Subsystem sftp /usr/lib/openssh/sftp-server
# использовать встроенный sftp-сервер
Subsystem sftp internal-sftp
...
# только для пользователей группы sftpgroup
Match Group sftpgroup
# только работа с файлами, запрет shell
ForceCommand internal-sftp
# разрешить аутентификацию по паролю
PasswordAuthentication yes
# разрешить доступ только к /srv/sftp
ChrootDirectory /srv/sftp
# запретить все, что не нужно для работы
PermitTunnel no
AllowAgentForwarding no
AllowTcpForwarding no
X11Forwarding no
root@kvmubuntu:~# systemctl restart sshd.service
root@kvmubuntu:~# touch /srv/sftp/sftptuser/test.txt
root@kvmubuntu:~# exit
root@aw:/# sftp -P 2233 sftptuser@tipubuntu
sftp> ls
sftptuser 
sftp> lls mnt/
requirements.txt dato138it
sftp> cd sftptuser/
sftp> get test.txt
sftp> put -r mnt/dato138it
sftp> exit
root@aw:/# ls test.txt
test.txt
sftp> exit
Source:
# https://tokmakov.msk.ru/blog/item/484?ysclid=lvlnz4iz7m313316662 - Настройка SFTP-сервера.
Task:
Install and Use Rkhunter for Security.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# apt install rkhunter
root@kvmubuntu:~# vim /etc/rkhunter.conf
root@kvmubuntu:~# cat /etc/rkhunter.conf
...
#WEB_CMD="/bin/false"
UPDATE_MIRRORS=1
MIRRORS_MODE=0
root@kvmubuntu:~# rkhunter -C
root@kvmubuntu:~# rkhunter --update
[ Rootkit Hunter version 1.4.6 ]
Checking rkhunter data files...
Checking file mirrors.dat [ No update ]
Checking file programs_bad.dat [ No update ]
Checking file backdoorports.dat [ No update ]
Checking file suspscan.dat [ No update ]
Checking file i18n/cn [ Skipped ]
Checking file i18n/de [ Skipped ]
Checking file i18n/en [ No update ]
Checking file i18n/tr [ Skipped ]
Checking file i18n/tr.utf8 [ Skipped ]
Checking file i18n/zh [ Skipped ]
Checking file i18n/zh.utf8 [ Skipped ]
Checking file i18n/ja [ Skipped ]
root@kvmubuntu:~# rkhunter --propupd
root@kvmubuntu:~# vim /etc/cron.daily/rkhunter.sh
root@kvmubuntu:~# cat /etc/cron.daily/rkhunter.sh
#!/bin/sh
(
/usr/local/bin/rkhunter --versioncheck
/usr/local/bin/rkhunter --update
/usr/local/bin/rkhunter --cronjob --report-warnings-only
) | /bin/mail -s 'rkhunter Daily Run (tipubuntu)' tmail38@mail.ru
root@kvmubuntu:~# chmod 755 /etc/cron.daily/rkhunter.sh
root@kvmubuntu:~# rkhunter --list rootkits
root@kvmubuntu:~# rkhunter --check
root@kvmubuntu:~# cat /var/log/rkhunter.log | grep hidden
root@kvmubuntu:~# cat /var/log/rkhunter.log | grep -A5 "\[ Warning \]"
Source:
# https://losst.pro/proverka-linux-na-virusy?ysclid=lv2diq667c645946178#poisk-virusov-s-pomoshchyu-rkhunter - Поиск вирусов с помощью RkHunter
# https://vegastack.com/tutorials/how-to-install-and-use-rkhunter-for-security-on-ubuntu-22-04/ - Install and Use Rkhunter for Security
# https://linux-notes.org/poisk-rutkitov-v-debian-ubuntu-linux-mint-i-red-hat-centos-fedora/?ysclid=lob3rn9gk6547904603
# https://winitpro.ru/index.php/2020/04/21/planirovshhik-zadach-cron-v-linux/
Task:
Установка IDS.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# apt install tripwire
root@kvmubuntu:~# tripwire --init
...
### Warning: File system error.
### Filename: /proc/pci
### Нет такого файла или каталога
### Continuing...
...
root@kvmubuntu:~# vim /etc/tripwire/twpol.txt
root@kvmubuntu:~# cat /etc/tripwire/twpol.txt
...
{
  #/var/lock   -> $(SEC_CONFIG) ;
  #/var/run   -> $(SEC_CONFIG) ; # daemon PIDs
  /var/log    -> $(SEC_CONFIG) ;
}
...
{
  /root       -> $(SEC_CRIT) ; # Catch all additions to /root
  #/root/mail     -> $(SEC_CONFIG) ;
  #/root/Mail     -> $(SEC_CONFIG) ;
  #/root/.xsession-errors   -> $(SEC_CONFIG) ;
  #/root/.xauth     -> $(SEC_CONFIG) ;
  #/root/.tcshrc     -> $(SEC_CONFIG) ;
  #/root/.sawfish     -> $(SEC_CONFIG) ;
  #/root/.pinerc     -> $(SEC_CONFIG) ;
  #/root/.mc     -> $(SEC_CONFIG) ;
  #/root/.gnome_private   -> $(SEC_CONFIG) ;
  #/root/.gnome-desktop   -> $(SEC_CONFIG) ;
  #/root/.gnome     -> $(SEC_CONFIG) ;
  #/root/.esd_auth      -> $(SEC_CONFIG) ;
  #/root/.elm     -> $(SEC_CONFIG) ;
  #/root/.cshrc     -> $(SEC_CONFIG) ;
  /root/.bashrc     -> $(SEC_CONFIG) ;
  #/root/.bash_profile   -> $(SEC_CONFIG) ;
  #/root/.bash_logout   -> $(SEC_CONFIG) ;
  /root/.bash_history   -> $(SEC_CONFIG) ;
  #/root/.amandahosts   -> $(SEC_CONFIG) ;
  #/root/.addressbook.lu   -> $(SEC_CONFIG) ;
  #/root/.addressbook   -> $(SEC_CONFIG) ;
  #/root/.Xresources   -> $(SEC_CONFIG) ;
  #/root/.Xauthority   -> $(SEC_CONFIG) -i ; # Changes Inode number on login
  #/root/.ICEauthority    -> $(SEC_CONFIG) ;
}
...
{
  /dev   -> $(Device) ;
  /dev/pts  -> $(Device) ;
  #/proc   -> $(Device) ;
  /proc/devices -> $(Device) ;
  /proc/net -> $(Device) ;
  /proc/tty -> $(Device) ;
  /proc/sys -> $(Device) ;
  /proc/cpuinfo -> $(Device) ;
  /proc/modules -> $(Device) ;
  /proc/mounts -> $(Device) ;
  /proc/dma -> $(Device) ;
  /proc/filesystems -> $(Device) ;
  /proc/interrupts  -> $(Device) ;
  /proc/ioports -> $(Device) ;
  /proc/scsi -> $(Device) ;
  /proc/kcore -> $(Device) ;
  /proc/self -> $(Device) ;
  /proc/kmsg -> $(Device) ;
  /proc/stat -> $(Device) ;
  /proc/loadavg -> $(Device) ;
  /proc/uptime -> $(Device) ;
  /proc/locks -> $(Device) ;
  /proc/meminfo -> $(Device) ;
  /proc/misc -> $(Device) ;
}
...
root@kvmubuntu:~# twadmin -m P /etc/tripwire/twpol.txt
root@kvmubuntu:~# tripwire --init
root@kvmubuntu:~# tripwire --check
...
Wrote report file: /var/lib/tripwire/report/kvmubuntu-20240817-222433.twr
...
Report generated by:   root
Report created on:   Sat 17 Aug 2024 10:24:33 PM EDT
Database last updated on: Never
===============================================================================
Report Summary:
===============================================================================
Host name:     kvmubuntu
Host IP address:   127.0.1.1
Host ID:     None
Policy file used:   /etc/tripwire/tw.pol
Configuration file used: /etc/tripwire/tw.cfg
Database file used:   /var/lib/tripwire/kvmubuntu.twd
Command line used:   tripwire --check
===============================================================================
Rule Summary:
===============================================================================
...
Rule Name     Severity Level Added Removed Modified
---------     -------------- ----- ------- --------
Other binaries     66    0  0  0
Tripwire Binaries   100   0  0  0
Other libraries     66    0  0  0
Root file-system executables 100   0  0  0
Tripwire Data Files   100   0  0  0
System boot changes   100   0  0  0
(/var/log)
Root file-system libraries 100   0  0  0
(/lib)
Critical system boot files 100   0  0  0
Other configuration files 66    0  0  0
(/etc)
Boot Scripts     100   0  0  0
Security Control    66    0  0  0
Root config files   100   0  0  0
Devices & Kernel information 100   0  0  0
Invariant Directories   66    0  0  0
...
===============================================================================
Object Summary:
===============================================================================
...
No violations.
===============================================================================
Error Report:
===============================================================================
No Errors
...
root@kvmubuntu:~# apt install mailutils
root@kvmubuntu:~# dpkg-reconfigure postfix
...
1. No configuration 2. Internet Site 3. Internet with smarthost 4. Satellite system 5. Local only
General mail configuration type: 2
...
System mail name: tmail38@mail.ru
...
Recipient for root and postmaster mail: tuser
...
Other destinations to accept mail for (blank for none): mail.ru
...
Force synchronous updates on mail queue? [yes/no] yes
...
Local networks: tipubuntu
...
Mailbox size limit (bytes): 
...
Local address extension character: 
all : use both IPv4 and IPv6 addresses;
ipv6: listen only on IPv6 addresses;
ipv4: listen only on IPv4 addresses.
1. all 2. ipv6 3. ipv4
...
Internet protocols to use: 1
root@kvmubuntu:~# systemctl reload postfix
root@kvmubuntu:~# tripwire --check | mail -s "Tripwire report for `uname -n`" tmail38@mail.ru
Source:
# https://stackoverflow.com/questions/12867573/searching-from-end-of-file-using-vim - Базовый поиск.
# https://www.8host.com/blog/ispolzovanie-tripwire-dlya-obnaruzheniya-vtorzhenij-na-server-ubuntu/ - ИСПОЛЬЗОВАНИЕ TRIPWIRE ДЛЯ ОБНАРУЖЕНИЯ ВТОРЖЕНИЙ НА СЕРВЕР UBUNTU.
# https://computingforgeeks.com/install-and-configure-tripwire-on-ubuntu/ - Install and Configure Tripwire on Ubuntu 22.04|20.04|18.04.
Task:
Использование fail2ban.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# apt install fail2ban
root@kvmubuntu:~# systemctl enable fail2ban --now
root@kvmubuntu:~# faillog -a | grep tuser
tuser   0  0 12/31/69 19:00:00 -0500
sftptuser 0  0 12/31/69 19:00:00 -0500
Task:
Настройка ядра.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# vim /etc/sysctl.conf
root@kvmubuntu:~# cat /etc/sysctl.conf
...
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.all.log_martians = 1
kernel.randomize_va_space=1
net.ipv4.icmp_echo_ignore_broadcasts=1
net.ipv4.conf.all.log_martians = 1
root@kvmubuntu:~# sysctl -p /etc/sysctl.conf
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.all.log_martians = 1
kernel.randomize_va_space = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.conf.all.log_martians = 1
Task: 
Программы с SUID и SGID битами.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# find / \( -perm -4000 -o -perm -2000 \) -print
Source:
# https://unix.stackexchange.com/questions/180867/how-to-search-for-all-suid-sgid-files - How to search for all SUID/SGID files?
Task:
Общедоступные файлы.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# find / -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print
root@kvmubuntu:~# find / -xdev \( -nouser -o -nogroup \) -print
Task:
Логирование и аудит.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# apt install logwatch
General mail configuration type: 1
root@kvmubuntu:~# cp /usr/share/logwatch/default.conf/logwatch.conf /etc/logwatch/conf/
root@kvmubuntu:~# vim /etc/logwatch/conf/logwatch.conf
root@kvmubuntu:~# cat /etc/logwatch/conf/logwatch.conf | grep Output
...
#Output = stdout
Output = mail
root@kvmubuntu:~# cat /etc/logwatch/conf/logwatch.conf | grep MailTo
#MailTo = root
MailTo = tmail38@mail.ru
root@kvmubuntu:~# cat /etc/logwatch/conf/logwatch.conf | grep LogDir
LogDir = /var/log
root@kvmubuntu:~# apt install postfix
root@kvmubuntu:~# logwatch --detail Low --range today
root@kvmubuntu:~# vim /etc/cron.daily/00logwatch
root@kvmubuntu:~# cat /etc/cron.daily/00logwatch | grep /usr/sbin/logwatch
#/usr/sbin/logwatch --output mail
/usr/sbin/logwatch --output mail --mailto tmail38@mail.ru --detail high
Source:
# https://ubuntu.com/server/docs/how-to-install-and-configure-logwatch - Настроить logwatch.
# https://habr.com/ru/companies/rootwelt/articles/303462/ - Logwatch.
Decision:
root@kvmubuntu:~# apt install logcheck
root@kvmubuntu:~# vim /etc/aliases
root@kvmubuntu:~# cat /etc/aliases
postmaster: tmail38@mail.ru
logcheck: tuser
root@kvmubuntu:~# vim /etc/logcheck/logcheck.conf
root@kvmubuntu:~# cat /etc/logcheck/logcheck.conf
...
INTRO=1
REPORTLEVEL="kvmubuntu"
SENDMAILTO="tmail38@mail.ru"
ADDTAG="yes"
root@kvmubuntu:~# ls /etc/logcheck/
cracking.d ignore.d.paranoid logcheck.conf violations.d
cracking.ignore.d ignore.d.server logcheck.logfiles violations.ignore.d
header.txt ignore.d.workstation logcheck.logfiles.d
root@kvmubuntu:~# vim /etc/logcheck/ignore.d.server/local-rules
root@kvmubuntu:~# cat /etc/logcheck/ignore.d.server/local-rules
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ sshd\[[[:digit:]]+\]: Disconnected from (user [^[:space:]]+ )?[[:xdigit:]:.]+ port [[:digit:]]+?( \[preauth\])?$
^\w{3} [ :[:digit:]]{11} [._[:alnum:]-]+ sshd\[[[:digit:]]+\]: user cronuser login class \[preauth\]$
root@kvmubuntu:~# egrep -f /etc/logcheck/ignore.d.server/local-rules /var/log/syslog
root@kvmubuntu:~# su -s /bin/bash -c "/usr/sbin/logcheck" logcheck
Source:
# http://snakeproject.ru/rubric/article.php?art=logcheck_15.04.2019 - Настроить logcheck.
Task:
Сравнить образ раздела или файла перед взломом с образом из взломанной системы.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# dd if=/bin/ls of=ls.dd | md5sum ls.dd > sum.txt
274+1 записей получено
274+1 записей отправлено
140760 байт (141 kB, 137 KiB) скопирован, 0,00362538 s, 38,8 MB/s
root@kvmubuntu:~# cat sum.txt
0ad8006df0caff12335f45fdf6c7c0f7 ls.dd
root@kvmubuntu:~# file /bin/ls
/bin/ls: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=bdfe7bf382f12e8361d590aa148cb3e591f83d30, for GNU/Linux 3.2.0, stripped
root@kvmubuntu:~# stat /bin/ls
Файл: /bin/ls
Размер: 140760 Блоков: 280 Блок В/В: 4096 обычный файл
Устройство: fd00h/64768d Инода: 33894006 Ссылки: 1
Доступ: (0755/-rwxr-xr-x) Uid: ( 0/ root) Gid: ( 0/ root)
Контекст: system_u:object_r:bin_t:s0
Доступ: 2023-10-29 10:10:37.199000000 +0800
Модифицирован: 2023-01-06 19:42:38.000000000 +0800
Изменён: 2023-09-28 12:38:12.337575533 +0800
Создан: 2023-09-28 12:38:12.333575533 +0800
Task:
Cоздать список контрольных сумм для популярных файлов, которые обычно могут изменяться при взломе системы.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# md5sum /bin/ls >> sums.txt
root@kvmubuntu:~# cat sums.txt
07c62424e4c26afc0d7e393bab60546c /bin/ls
Source:
# https://www.youtube.com/playlist?list=PLtSGboPf3g50Aejrp6KjQsqqjxvAO4aKw
# https://tokmakov.msk.ru/blog/item/477
# https://linux-notes.org/fil-tratsiya-mac-ispol-zuya-iptables-v-linux/?ysclid=lo0z3u2sro842609893
# https://ru.linux-console.net/?p=1297&ysclid=lo0tx5owhk496498608
# https://itsecforu.ru/2022/01/14/%F0%9F%90%89-%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-http-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B0-kali-linux/?ysclid=lo4exvw84m943299837
# https://hackware.ru/?p=15739
# https://uzverss.livejournal.com/109496.html?ysclid=lo9hqkxw2s612202120
# https://habr.com/ru/companies/alexhost/articles/531170/
# https://drive.google.com/drive/folders/1SUpqELdGy0O2zEDbmfnx35zViexy5xZL 
# https://habr.com/sandbox/29825/
# https://kamaok.org.ua/?p=813
# https://habr.com/company/first/blog/243487/
# https://habr.com/sandbox/29825/
Task:
Настройка брандмауэра.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# vim /etc/ufw/sysctl.conf
root@kvmubuntu:~# cat /etc/ufw/sysctl.conf | grep ip_forward=1
...
#net/ipv4/ip_forward=1
net/ipv4/ip_forward=1
root@kvmubuntu:~# vim /etc/ufw/before.rules
root@kvmubuntu:~# cat /etc/ufw/before.rules
...
*nat
:PREROUTING ACCEPT [0:0]
-A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8033
COMMIT
root@kvmubuntu:~# ufw enable
root@kvmubuntu:~# ufw allow 8033/tcp
Rule added
Rule added (v6)
root@kvmubuntu:~# systemctl restart ufw
root@kvmubuntu:~# ufw status numbered
...
[ 1] 8033 ALLOW IN Anywhere
[ 2] 2233/tcp ALLOW IN tipubuntu.1
[ 3] 2233/tcp ALLOW IN tipubuntu
[ 4] 2233 ALLOW IN Anywhere
[ 5] 2233 (v6) ALLOW IN Anywhere (v6)
root@kvmubuntu:~# ufw delete 3
root@kvmubuntu:~# ufw delete 2
root@kvmubuntu:~# systemctl restart ufw
root@kvmubuntu:~# vim firewall.sh
root@kvmubuntu:~# cat firewall.sh
#!/bin/bash
IPT="/sbin/iptables"
# Очищаем правила и удаляем цепочки.
$IPT -F
$IPT -X
# По умолчанию доступ запрещен.
$IPT -P INPUT DROP
$IPT -P FORWARD DROP
$IPT -P OUTPUT DROP
# Список разрешенных TCP и UDP портов.
TCP_PORTS="2233,8033"
# Разрешаем пакеты для интерфейса обратной петли.
$IPT -A INPUT -i lo -j ACCEPT
$IPT -A OUTPUT -o lo -j ACCEPT
# Разрешаем пакеты для установленных соединений.
$IPT -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
# Разрешаем исходящие соединения.
$IPT -A OUTPUT -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
# Разрешаем доступ к портам, описанным в переменных TCP_PORTS.
$IPT -A INPUT -p tcp -m multiport --dport $TCP_PORTS -j ACCEPT
# Разрешаем исходящий ping.
$IPT -A INPUT -p icmp -m icmp --icmp-type echo-reply -j ACCEPT
root@kvmubuntu:~# ./firewall.sh
root@kvmubuntu:~# iptables -L
Chain INPUT (policy DROP)
target prot opt source destination
ACCEPT all -- anywhere anywhere
ACCEPT all -- anywhere anywhere state RELATED,ESTABLISHED
ACCEPT tcp -- anywhere anywhere multiport dports 2233,8033
ACCEPT icmp -- anywhere anywhere icmp echo-reply
Chain FORWARD (policy DROP)
target prot opt source destination
Chain OUTPUT (policy DROP)
target prot opt source destination
ACCEPT all -- anywhere anywhere
ACCEPT all -- anywhere anywhere state NEW,RELATED,ESTABLISHED
root@kvmubuntu:~# /sbin/iptables -A INPUT -p tcp --dport 5432 -j ACCEPT
root@kvmubuntu:~# iptables -t nat -A PREROUTING -i enp1s0 -p tcp --dport 80 -m conntrack --ctstate NEW -j DNAT --to tipubuntu:8033
root@kvmubuntu:~# iptables -t nat -A PREROUTING -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
root@kvmubuntu:~# iptables -A POSTROUTING -t nat -j MASQUERADE -o enp1s0
root@kvmubuntu:~# iptables-save > /etc/iptables.rules
root@kvmubuntu:~# /sbin/iptables-save
root@kvmubuntu:~# reboot
root@kvmubuntu:~# iptables-restore < /etc/iptables.rules
root@kvmubuntu:~# apt install iptables-persistent
root@kvmubuntu:~# netfilter-persistent save
Source:
# https://serverspace.ru/support/help/osnovnye-komandy-ufw/?utm_source=yandex.ru&utm_medium=organic&utm_campaign=yandex.ru&utm_referrer=yandex.ru - Удалить правило брандмауэра.
# https://serverfault.com/questions/411538/configure-ufw-to-redirect-http-traffic-to-another-ip - Configure ufw to redirect http traffic to another IP.
# https://habr.com/ru/articles/747186/ - Вывод хоста в интернет.
# https://www.dmosk.ru/instruktions.php?object=iptables-settings - Сохранение правил (permanent).
Task:
Установить vscode.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# wget https://vscode.download.prss.microsoft.com/dbazure/download/stable/903b1e9d8990623e3d7da1df3d33db3e42d80eda/code_1.86.2-1707854558_amd64.deb
root@kvmubuntu:~# apt install ./code_1.86.2-1707854558_amd64.deb
Source:
# https://code.visualstudio.com/docs/setup/linux - Debian and Ubuntu based distributions.
Task:
Бэкап базы.
# Миграция базы данных.
Decision:
tuser@kvmubuntu:~$ mysql -V
mysql Ver 8.0.39-0ubuntu0.22.04.1 for Linux on x86_64 ((Ubuntu))
tuser@kvmubuntu:~$ mysql -u tuser -p
mysql> SELECT User, Host FROM mysql.user;
+------------------+-----------+
| User | Host |
+------------------+-----------+
| root | localhost |
| tuser | localhost |
+------------------+-----------+
6 rows in set (0.43 sec)
mysql> SHOW DATABASES;
+--------------------+
| Database |
+--------------------+
| tbase |
+--------------------+
6 rows in set (0.80 sec)
mysql> exit
root@kvmubuntu:~# mysqldump -u tuser -p --opt tbase > datamysql.sql
root@kvmubuntu:~# ls datamysql.sql
datamysql.sql
Task:
Перенос базы.
# Миграция базы данных.
Decision:
root@aw:/# scp -r datamysql.sql tuser@tipubuntu:/var/www/dato138it/
Task:
Восстановление базы.
# Миграция базы данных.
Decision:
tuser@kvmubuntu:~$ mysql -V
mysql Ver 8.0.34-0ubuntu0.22.04.1 for Linux on x86_64 ((Ubuntu))
tuser@kvmubuntu:~$ mysql -u tuser -p
tuser@kvmubuntu:~$ mysql -u tuser -p tbase < datamysql.sql
tuser@kvmubuntu:~$ mysql -u tuser -p
mysql> show databases;
+--------------------+
| Database |
+--------------------+
| tbase |
| information_schema |
| performance_schema |
+--------------------+
mysql> USE tbase;
Source:
# https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-22-04
# https://losst.pro/ustanovka-chrome-v-ubuntu-18-04?ysclid=lmdflkvc3v463974954
# https://qna.habr.com/q/439469?ysclid=lmdgkb49q827401606
# https://steptuser.org/course/63054/syllabus
# https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-phpmyadmin-on-ubuntu-20-04
# https://www.tutsmake.com/how-to-install-lamp-apache-mysql-php-in-ubuntu-22-04/
# https://www.php.net/manual/ru/faq.html.php
# https://www.8host.com/blog/kak-rabotayut-stroki-v-php/
# https://www.youtube.com/watch?v=FxwPQkP3OGY&t=611s
# https://timeweb.com/ru/community/articles/kak-ustanovit-stek-lamp-na-ubuntu-20-04
# https://wiki.merionet.ru/articles/perenos-bazy-dannyx-mysql-so-starogo-na-novyj-server
Task:
Изменить пароль в базе.
# Администрирование баз данных.
Decision:
tuser@kvmubuntu:~$ mysql -u root -p
mysql> SELECT user,authentication_string,plugin,host FROM mysql.user;
mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'tP@ssw0rd';
mysql> \q
Task:
Изменить порт Apache.
# Администрирование веб-сервера LAMP.
Decision:
root@kvmubuntu:~# semanage port -l | grep -w http_port_t
http_port_t tcp 80, 443, 488, 8008, 8009, 8443, 8448
root@kvmubuntu:~# vim /etc/apache2/sites-enabled/dato138it.conf
root@kvmubuntu:~# cat /etc/apache2/sites-enabled/dato138it.conf
<VirtualHost *:8033>
...
root@kvmubuntu:~# vim /etc/apache2/ports.conf 
root@kvmubuntu:~# cat /etc/apache2/ports.conf 
...
Listen 8033
root@kvmubuntu:~# systemctl restart apache2
root@kvmubuntu:~# netstat -tlpn | grep apache
tcp6 0 0 :::8033 :::* LISTEN 2452/apache2 
root@kvmubuntu:~# semanage port -a -t http_port_t -p tcp 8033
root@kvmubuntu:~# semanage port -l | grep -w http_port_t
http_port_t tcp 8033, 80, 443, 488, 8008, 8009, 8443, 8448
root@kvmubuntu:~# ufw allow 8033
root@kvmubuntu:~# systemctl restart apache2
root@kvmubuntu:~# google-chrome http://tipubuntu:8033/
root@kvmubuntu:~# a2enconf phpmyadmin.conf
root@kvmubuntu:~# systemctl reload apache2
root@kvmubuntu:~# apt-get install php8.1-mbstring
root@kvmubuntu:~# cat /etc/php/8.1/apache2/php.ini | grep extension=
...
;extension=curl
;extension=ffi
...
root@kvmubuntu:~# vim /etc/php/8.1/apache2/php.ini
...
;extension=curl
extension=ctype
;extension=ffi
...
root@kvmubuntu:~# cat /etc/php/8.1/apache2/php.ini | grep extension=
root@kvmubuntu:~# service apache2 restart
root@kvmubuntu:~# google-chrome http://tipubuntu:8033/phpmyadmin/
Source:
# https://losst.pro/kak-izmenit-port-apache?ysclid=lwgcvc9brc641723993 - Как изменить порт Apache.
# https://linux-notes.org/nastrojka-selinux-dlya-apache-nginx-v-unix-linux/?ysclid=lwgc6svixb429450995 - Настройка SELinux для Apache/Nginx в Unix/Linux.
Task:
How to Install SELinux to Harden Apache Webserver.
# Администрирование веб-сервера LAMP.
Decision:
root@kvmubuntu:~# mkdir /var/www/dato138it/cache
root@kvmubuntu:~# mkdir /var/www/dato138it/logs
root@kvmubuntu:~# tree /var/www/dato138it/
/var/www/dato138it/
├── cache
├── css
│ └── style.css
├── index.php
├── js
│ ├── jquery.js
│ └── main.js
└── logs
root@kvmubuntu:~# cd /var/www/
root@kvmubuntu:~# setenforce 0
root@kvmubuntu:~# semanage fcontext -a -t httpd_sys_content_t "/var/www/dato138it(/.*)?"
root@kvmubuntu:~# semanage fcontext -a -t httpd_log_t "/var/www/dato138it/logs(/.*)?"
root@kvmubuntu:~# semanage fcontext -a -t httpd_cache_t "/var/www/dato138it/cache(/.*)?"
root@kvmubuntu:~# semanage fcontext -a -t httpd_sys_rw_content_t "/var/www/dato138it/index.php"
root@kvmubuntu:~# restorecon -Rv /var/www/dato138it
Relabeled /var/www/dato138it/index.php from system_u:object_r:httpd_sys_content_t:s0 to system_u:object_r:httpd_sys_rw_content_t:s0
Relabeled /var/www/dato138it/cache from unconfined_u:object_r:httpd_sys_content_t:s0 to unconfined_u:object_r:httpd_cache_t:s0
Relabeled /var/www/dato138it/logs from unconfined_u:object_r:httpd_sys_content_t:s0 to unconfined_u:object_r:httpd_log_t:s0
root@kvmubuntu:~# ls -lZ /var/www/dato138it
total 24
drwxr-xr-x. 2 root root unconfined_u:object_r:httpd_cache_t:s0 4096 may 21 07:33 cache
drwxrwxr-x. 2 tuser tuser system_u:object_r:httpd_sys_content_t:s0 4096 mar 9 07:10 css
-rw-rw-r--. 1 tuser tuser system_u:object_r:httpd_sys_rw_content_t:s0 4180 abr 9 14:44 index.php
drwxrwxr-x. 2 tuser tuser system_u:object_r:httpd_sys_content_t:s0 4096 mar 9 07:10 js
drwxr-xr-x. 2 root root unconfined_u:object_r:httpd_log_t:s0 4096 may 21 07:33 logs
root@kvmubuntu:~# semanage fcontext -l | grep '/var/www/dato138it'
/var/www/dato138it(/.*)? all files system_u:object_r:httpd_sys_content_t:s0 
/var/www/dato138it/cache(/.*)? all files system_u:object_r:httpd_cache_t:s0 
/var/www/dato138it/index.php all files system_u:object_r:httpd_sys_rw_content_t:s0 
/var/www/dato138it/logs(/.*)? all files system_u:object_r:httpd_log_t:s0
Source:
# https://www.ubuntumint.com/selinux-harden-apache-webserver/ - How to Install SELinux to Harden Apache Webserver.
Task:
Установка Python 3.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# python3 --version
  Python 3.8.10
root@kvmubuntu:~# apt update
root@kvmubuntu:~# apt -y upgrade
root@kvmubuntu:~# apt install software-properties-common -y
root@kvmubuntu:~# add-apt-repository ppa:deadsnakes/ppa
root@kvmubuntu:~# apt install python3.10 -y
root@kvmubuntu:~# apt install python3-pip -y
root@kvmubuntu:~# python3.10 -V
  Python 3.10.2
root@kvmubuntu:~# python3 -V
  Python 3.8.10
root@kvmubuntu:~# update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1
  update-alternatives: используется /usr/bin/python3.8 для предоставления /usr/bin/python3 (python3) в автоматическом режиме
root@kvmubuntu:~# update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 2
root@kvmubuntu:~# update-alternatives --list python3
  /usr/bin/python3.10
  /usr/bin/python3.8
root@kvmubuntu:~# update-alternatives --config python3
  Есть 2 варианта для альтернативы python3 (предоставляет /usr/bin/python3).
   Выбор Путь       Приор Состояние
  ------------------------------------------------------------
  * 0      /usr/bin/python3.8  10    автоматический режим
   1      /usr/bin/python3.10 2     ручной режим
   2      /usr/bin/python3.8  10    ручной режим
Press <enter> to keep the current choice[*], or type selection number: 1
  update-alternatives: используется /usr/bin/python3.10 для предоставления /usr/bin/python3 (python3) в ручном режиме
root@kvmubuntu:~# python3 -V
  Python 3.10.2
root@kvmubuntu:~# apt-get install idle3 -y
root@kvmubuntu:~# vim test0.py
root@kvmubuntu:~# cat test0.py
print('Мы изучаем язык Python')
root@kvmubuntu:~# python3 test0.py
  Мы изучаем язык Python
root@kvmubuntu:~# idle
Decision:
- https://www.python.org/ftp/python/3.10.2/python-3.10.2-amd64.exe - Downloads - Add Python 3.x to PATH - install now
Task:
Установка Pip в CentOS 8.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# dnf install python3-paramiko -y
[root@kvmcentos ~]# pip3 --version
[root@kvmcentos ~]# python3 --version
[root@kvmcentos ~]# yum install python3-devel -y
[root@kvmcentos ~]# yum groupinstall 'development tools'
Task:
Установить dbeaver.
# Администрирование баз данных.
Decision:
root@kvmubuntu:~# wget https://dbeaver.io/files/dbeaver-ce_latest_amd64.deb
root@kvmubuntu:~# apt install ./dbeaver-ce_latest_amd64.deb
Task:
Запустить Sqlite3.
# Администрирование баз данных.
Decision:
root@kvmubuntu:~# apt install sqlite3
root@kvmubuntu:~# sqlite3 db.sqlite3
sqlite> .tables
auth_group django_content_type 
auth_group_permissions django_migrations 
auth_permission django_session 
auth_user portfolio_category 
auth_user_groups portfolio_place 
auth_user_user_permissions portfolio_portfolio 
django_admin_log 
sqlite> select * from portfolio_place;
...
sqlite> .q
Source:
# https://www.guru99.com/ru/sqlite-database.html - SQLite СОЗДАТЬ базу данных.
Task:
Установка и настройка базы данных в PostgreSQL.
# Администрирование баз данных.
Decision:
root@hvalt:~# apt-get update
root@hvalt:~# apt-get install postgresql12-server
root@hvalt:~# /etc/init.d/postgresql initdb
root@hvalt:~# systemctl start postgresql
root@hvalt:~# systemctl enable postgresql
root@hvalt:~# pg_isready
root@hvalt:~# psql -U postgres
postgres=# CREATE USER tuser WITH PASSWORD 'tpassword';
postgres=# CREATE DATABASE tbase;
postgres=# GRANT ALL PRIVILEGES ON DATABASE tbase to tuser;
postgres=# psql -U postgres -c "\l+"
                                                                         Список баз данных
     Имя     | Владелец | Кодировка | LC_COLLATE  |  LC_CTYPE   |     Права доступа     | Размер  | Табл. пространство |                  Опис
ание                  
-------------+----------+-----------+-------------+-------------+-----------------------+---------+--------------------+----------------------
----------------------
 tbase | postgres | UTF8      | ru_RU.UTF-8 | ru_RU.UTF-8 | =Tc/postgres         +| 8041 kB | pg_default         |
             |          |           |             |             | postgres=CTc/postgres+|         |                    |
             |          |           |             |             | tuser=CTc/postgres    |         |                    |
 postgres    | postgres | UTF8      | ru_RU.UTF-8 | ru_RU.UTF-8 |                       | 8185 kB | pg_default         | default administrativ
e connection database
...
postgres=# \c tbase
tbase=# GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO "tuser";
tbase=# ALTER DATABASE tbase OWNER TO tuser;
tbase=# \q
root@kvmubuntu:~# apt install postgresql postgresql-contrib
root@kvmubuntu:~# usermod -aG postgres tuser
root@kvmubuntu:~# sudo -i -u postgres
postgres@kvmubuntu:~$ psql
postgres=# \q
postgres@kvmubuntu:~$ createuser --interactive
Enter name of role to add: tuser
Shall the new role be a superuser? (y/n) y
postgres@kvmubuntu:~$ createdb tbase
postgres@kvmubuntu:~$ exit
root@kvmubuntu:~# psql -U tuser -d tbase
tbase=# \password
tbase=# GRANT ALL PRIVILEGES ON DATABASE tbase to tuser;
tbase=# GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO "tuser";
tbase=# ALTER DATABASE tbase OWNER TO tuser;
tbase=# GRANT pg_read_all_settings TO tuser;
tbase=# \conninfo
You are connected to database "tbase" as user "tuser" via socket in "/var/run/postgresql" at port "5432".
tbase=# \l+
         List of databases
Name | Owner | Encoding | Collate | Ctype | Access privileges | Size | Tablespace |  Description
-----------+----------+----------+-------------+-------------+-----------------------+---------+------------+--------------------------------------------
tbase | tuser | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =Tc/tuser +| 8561 kB | pg_default |
| | | | | tuser=CTc/tuser | | |
...
tbase=# SHOW config_file;
...
/etc/postgresql/14/main/postgresql.conf
tbase=# \q
root@kvmubuntu:~# vim /etc/postgresql/14/main/postgresql.conf
root@kvmubuntu:~# cat /etc/postgresql/14/main/postgresql.conf | grep listen_addresses
listen_addresses = 'tipubuntu' # what IP address(es) to listen on;
root@kvmubuntu:~# vim /etc/postgresql/14/main/pg_hba.conf
root@kvmubuntu:~# cat /etc/postgresql/14/main/pg_hba.conf
...
# "local" is for Unix domain socket connections only
host tbase tuser tipubuntu/32 md5
local all all     peer
root@kvmubuntu:~# systemctl restart postgresql
tuser@kvmubuntu:~$ psql -U tuser -d tbase -h tipubuntu
tbase=# \d
Did not find any relations.
tbase=# \q
Source:
# https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-22-04-quickstart - How To Install PostgreSQL on Ubuntu 22.04 [Quickstart].
# https://uchet-jkh.ru/i/kak-izmenit-parol-k-baze-dannyx-postgresql/ - Измените пароль для выбранного пользователя.
# https://asvignesh.in/how-to-get-the-postgresql-conf-file-location/ - Grant Role to the non-default user.
# https://postgrespro.ru/docs/postgresql/9.5/manage-ag-createdb - Создание базы данных.
Task:
Сделаем так, чтобы с клиентской машины Redos мы могли подключаться к серверу AltLinux удаленно.
# Администрирование базы данных.
Decision:
root@hvalt:~# su - postgres -c "psql -c 'SHOW config_file;'"
             config_file             
-------------------------------------
 /var/lib/pgsql/data/postgresql.conf
(1 строка)
# echo "listen_addresses = 'IpAddr3, IpAddr2, hvalt'" >> /var/lib/pgsql/data/postgresql.conf
[root@hvredos ~]# cat /var/lib/pgsql/data/pg_hba.conf
...
# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
...
[root@hvredos ~]# vim /var/lib/pgsql/data/pg_hba.conf
[root@hvredos ~]# cat /var/lib/pgsql/data/pg_hba.conf | grep '10.38.'
# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    tbase            tuser             IpAddr2/21                  md5
host    all             all             127.0.0.1/32            trust
root@hvalt:~# systemctl restart postgresql
root@hvalt:~# systemctl status postgresql
[root@hvredos ~]# psql -d tbase -U tuser -h hvalt
Task:
Для работы с базой в графическом интерфейсе установим Pgadmin.
# Администрирование базы данных.
Decision:
root@hvalt:~# apt-get install pgadmin3
root@hvalt:~# pgadmin3 &
- add server - name - tuser - host - hvalt- password - tpassword - ok
[root@hvredos ~]# dnf install postgresql-server
root@hvalt:~# postgresql-setup initdb
root@hvalt:~# systemctl enable postgresql
root@hvalt:~# systemctl start postgresql
root@hvalt:~# pg_isready
[root@hvredos ~]# psql -d tbase -U tuser -h hvalt
tbase=> \du
                                          Список ролей
 Имя роли |                                Атрибуты                                 | Член ролей
----------+-------------------------------------------------------------------------+------------
 tuser   |                                                                         | {}
 postgres | Суперпользователь, Создаёт роли, Создаёт БД, Репликация, Пропускать RLS | {}
[root@hvredos ~]# dnf install pgadmin4 pgadmin4-qt
[root@hvredos ~]# pgadmin4-qt &
- root's password - add server - name - tuser - host - hvalt- password - tpassword - ok
Task:
Создание и подключение к БД.
# Разработка базы данных.
Decision:
postgres-# \! chcp 1251
postgres-# \l
postgres-# CREATE DATABASE starter;
postgres-# DROP DATABASE starter;
postgres-# CREATE DATABASE starter;
postgres-# \c starter
Task:
Создание и удаление таблиц.
# Разработка базы данных.
Decision:
starter-# CREATE TABLE student_auto (
id INT,
name VARCHAR(50),
surname VARCHAR(50),
gender VARCHAR(50),
mobile VARCHAR(50),
birthday DATE
);
starter-# DROP TABLE student_auto;
starter-# CREATE TABLE student_auto (
id INT,
name VARCHAR(50),
surname VARCHAR(50),
gender VARCHAR(50),
mobile VARCHAR(50),
birthday DATE
);
starter-# \d student_auto;
Task:
Наполнение данными.
# Разработка базы данных.
Decision:
starter=# SELECT * FROM student;
starter=# INSERT INTO student(name, surname) VALUES ('Michael', 'Scott');
starter=# SELECT * FROM student;
Task:
Установить и настроить node.js сервер.
# Администрирование веб-сервера React.js.
Decision:
root@kvmubuntu:~# apt install npm
root@kvmubuntu:~# npm cache clean -f 
root@kvmubuntu:~# npm install -g n
root@kvmubuntu:~# n latest
root@kvmubuntu:~# reboot
Task:
Добавить проект в node.js.
# Администрирование веб-сервера React.js.
Decision:
root@kvmubuntu:~# npx create-react-app frontend
root@kvmubuntu:~# cd frontend
root@kvmubuntu:~# npm install -D tailwindcss postcss autoprefixer
root@kvmubuntu:~# npx tailwindcss init -p
Task:
Запуск Веб-сайта.
# Администрирование веб-сервера React.js.
Decision:
root@kvmubuntu:~# cd frontend
root@kvmubuntu:~# python frontend/manage.py runserver tipubuntu:8000 &
root@kvmubuntu:~# google-chrome http://tipubuntu:8000/ &
root@kvmubuntu:~# cd frontend
root@kvmubuntu:~# npm run start &
Source:
# https://www.youtube.com/playlist?list=PLPSM8rIid1a06M7kDOE6WMTXc9CpBskBg - DRF & React Portfolio Website.
Task:
После редактирования блока в посте, блок стал смещаться за границы следующего блока.
# Frontend-разработка Веб-сайта React.js.
Decision:
root@kvmubuntu:~# cat frontend/App.js
...
<div className='md:h-screen pt-10' ref={homeRef}>
...
</div>
<div className='md:h-screen pt-16' ref={placeRef}>
...
</div>
...
root@kvmubuntu:~# vim frontend/App.js
root@kvmubuntu:~# cat frontend/App.js
...
<div className='md:h-full pt-10' ref={homeRef}>
...
</div>
<div className='md:h-full pt-16' ref={placeRef}>
...
</div>
...
Source:
# https://tailwindcss.com/docs/height - Height.
Task:
Selinux + django.
# Администрирование веб-сервера Django.
Decision:
root@kvmubuntu:~# setenforce 0
root@kvmubuntu:~# semanage fcontext -a -t httpd_sys_script_exec_t /var/www/dato138it/djangoenv/lib/python3.10/site-packages/psycopg2/_psycopg.cpython-310-x86_64-linux-gnu.so
root@kvmubuntu:~# restorecon -vv /var/www/dato138it/djangoenv/lib/python3.10/site-packages/psycopg2/_psycopg.cpython-310-x86_64-linux-gnu.so
root@kvmubuntu:~# setsebool -P httpd_can_network_connect_db on
root@kvmubuntu:~# semanage fcontext -a -t httpd_sys_content_t /var/www/dato138it
root@kvmubuntu:~# restorecon -v -R /var/www/dato138it
root@kvmubuntu:~# ls -lZ /var/www/dato138it
total 108
drwxr-xr-x. 7 tuser tuser system_u:object_r:httpd_sys_content_t:s0 4096 abr 7 06:11 backend
-rw-rw-r--. 1 tuser tuser system_u:object_r:user_home_t:s0 46322 mar 9 07:27 datadump.json
-rw-rw-r--. 1 tuser tuser system_u:object_r:user_home_t:s0 45572 mar 10 04:15 datapsql.dump
drwxrwxr-x. 6 tuser tuser system_u:object_r:user_home_t:s0 4096 abr 2 13:42 frontend
-rw-rw-r--. 1 tuser tuser system_u:object_r:user_home_t:s0 129 abr 7 08:08 requirements.txt
root@kvmubuntu:~# semanage fcontext -l | grep '/var/www/dato138it'
/var/www/dato138it     all files system_u:object_r:httpd_sys_content_t:s0
/var/www/dato138it/djangoenv/lib/python3.10/site-packages/psycopg2/_psycopg.cpython-310-x86_64-linux-gnu.so all files system_u:object_r:httpd_sys_script_exec_t:s0
Source:
# https://czep.net/16/django-stuff.html - Deploying Django projects.
Task:
Сменить пароль.
# Администрирование веб-сервера Django.
Decision:
root@kvmubuntu:~# python manage.py createsuperuser.
Task:
Переименовать пользователя для корректного подключения с базой.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# usermod -l Tuser tuser
root@kvmubuntu:~# groupmod -n Tuser tuser
Source:
# https://itsecforu.ru/2020/04/29/%F0%9F%90%A7-%D0%BA%D0%B0%D0%BA-%D0%BF%D0%B5%D1%80%D0%B5%D0%B8%D0%BC%D0%B5%D0%BD%D0%BE%D0%B2%D0%B0%D1%82%D1%8C-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F-%D0%B2-linux/ - Изменить имя пользователя на Linux.
Task:
запустить программу в фоне.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# packettracer &
[1] 3270
root@kvmubuntu:~# ps aux | grep packettracer
u   3270 0.0 0.1 18132 3192 pts/1  S  20:27 0:00 /bin/bash /usr/local/bin/packettracer
u   3361 0.0 0.1 17700 2796 pts/1  S+ 20:28 0:00 grep --color=auto packettracer
root@kvmubuntu:~# kill %1
root@kvmubuntu:~# ps aux | grep packettracer
u   3364 0.0 0.0 17700 660 pts/1  S+ 20:28 0:00 grep --color=auto packettracer
[1]+ Завершено   packettracer 
Task:
Предположим вы запустили программы firefox, filezilla и gedit в фоновом режиме. 
После этого вы выполнили следующие действия: fg %1, Ctrl+С, fg %2, Ctrl+Z, jobs. 
Информация о каких программах будет показана при выполнении команды jobs?
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# firefox &
[1] 8962
root@kvmubuntu:~# filezilla &
[2] 9141
root@kvmubuntu:~# gedit &
[3] 9184
root@kvmubuntu:~# jobs
[1] Running         firefox &
[2]- Running         filezilla &
[3]+ Running         gedit &
root@kvmubuntu:~# fg %1
firefox
^C[GFX1-]: Receive IPC close with reason=AbnormalShutdown
Exiting due to channel error.
[GFX1-]: Receive IPC close with reason=AbnormalShutdown
Exiting due to channel error.
[GFX1-]: Receive IPC close with reason=AbnormalShutdown
Exiting due to channel error.
root@kvmubuntu:~# fg %2
filezilla
^Z
[2]+ Stopped         filezilla
root@kvmubuntu:~# jobs
[2]+ Stopped         filezilla
[3]- Running         gedit &
Source:
# https://basis.gnulinux.pro/
# https://stepik.org/course/73/syllabus
Task:
Заменить все вхождения “old” на “new” в редакторе Vim.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
:%s/OldWords/NewWords/g
Task:
Создать директорию или файл с пробелом в названии.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# mkdir /mnt/Program\ Files
Task:
Скопировать файлы с теми же правами.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# cp -pr /var/lib/postgresql/14.backup /var/lib/postgresql/14/
Source:
# https://www.linux.org.ru/forum/general/8186570 - Копирование файлов с правами и пользователямию
Task:
Общие папки Linux.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# mkdir /var/share
root@kvmubuntu:~# chmod ugo+rw -R /var/share
Source:
# https://losst.pro/obshhie-papki-linux - Общие папки в Linux.
Task:
Создать ссылку на директорию tdir1.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# mkdir tdir1
root@kvmubuntu:~# mkdir tdir2
root@kvmubuntu:~# touch tdir1/tfile1
root@kvmubuntu:~# ln -s /home/tuser/tdir1 /home/tuser/tdir2
Task:
узнать дистрибутив.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# cat /etc/*-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=20.04
DISTRIB_CODENAME=focal
DISTRIB_DESCRIPTION="Ubuntu 20.04.5 LTS"
NAME="Ubuntu"
VERSION="20.04.5 LTS (Focal Fossa)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 20.04.5 LTS"
VERSION_ID="20.04"
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal
Source:
# https://losst.pro/kak-uznat-versiyu-linux - Как узнать версию Linux?
Skills:
# Администрирование локальных, виртуальных и облачных серверов.
# Виртуализация.
# Разработка программы на C++.
Task:
Adding the Ubuntu using wsl.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
PS C:\Windows\system32> Start-Process powershell -Verb runAs
PS C:\Windows\system32> wsl --list --online
PS C:\Windows\system32> wsl --install -d Ubuntu-22.04
PS C:\Windows\system32> Restart-Computer 
Task:
Установка виртуальной машины.
# Виртуализация. 
Decision:
root@kvmubuntu:~# dnf config-manager --add-repo=https://download.virtualbox.org/virtualbox/rpm/el/virtualbox.repo
root@kvmubuntu:~# rpm --import https://www.virtualbox.org/download/oracle_vbox.asc
root@kvmubuntu:~# dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
root@kvmubuntu:~# dnf install binutils kernel-devel kernel-headers libgomp make patch gcc glibc-headers glibc-devel dkm
root@kvmubuntu:~# dnf search virtualbox
root@kvmubuntu:~# dnf install VirtualBox-7.0
root@kvmubuntu:~# usermod -aG vboxusers $USER
root@kvmubuntu:~# newgrp vboxusers
root@kvmubuntu:~# wget https://download.virtualbox.org/virtualbox/7.0.10/Oracle_VM_VirtualBox_Extension_Pack-7.0.10-158379.vbox-extpack
root@kvmubuntu:~# VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-7.0.10-158379.vbox-extpack
Task:
Установка виртуальной машины Windows в Virtualbox.
# Виртуализация. 
Decision:
root@kvmubuntu:~# VBoxManage list ostypes
...
ID:     Windows2010_64
Description: Windows 2010 (64-bit)
Family ID: Windows
Family Desc: Microsoft Windows
64 bit:   true
...
root@kvmubuntu:~# VBoxManage createvm --name "Windows10" --ostype "Windows2010_64" --register --basefolder /vboximages/
root@kvmubuntu:~# vboxmanage modifyvm Windows10 --memory 4096 --vram 128
root@kvmubuntu:~# vboxmanage modifyvm Windows10 --nic1 bridged
root@kvmubuntu:~# vboxmanage createhd --filename /vboximages/Windows10/Windows10.vdi --size 75000 --format VDI 
root@kvmubuntu:~# vboxmanage storagectl Windows10 --name "SATA Controller" --add sata --controller IntelAhci
root@kvmubuntu:~# vboxmanage storageattach Windows10 --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium /vboximages/Windows10/Windows10.vdi
root@kvmubuntu:~# vboxmanage storagectl Windows10 --name "IDE Controller" --add ide --controller PIIX4
root@kvmubuntu:~# vboxmanage storageattach Windows10 --storagectl "IDE Controller" --port 1 --device 0 --type dvddrive --medium /iso/Windows10.iso
root@kvmubuntu:~# vboxmanage modifyvm Windows10 --boot1 dvd --boot2 disk --boot3 none --boot4 none
root@kvmubuntu:~# vboxmanage modifyvm Windows10 --vrde on
root@kvmubuntu:~# vboxmanage modifyvm Windows10 --vrdemulticon on --vrdeport 10001
root@kvmubuntu:~# vboxmanage modifyvm Windows10 --graphicscontroller vboxsvga
root@kvmubuntu:~# vboxmanage sharedfolder add Windows10 --name "Загрузки" --hostpath /Загрузки/ --automount
root@kvmubuntu:~# vboxmanage startvm --type gui Windows10 & 
Task:
Установка виртуальной машины Windows в Qemu-Kvm.
# Виртуализация. 
Decision:
root@kvmubuntu:~# virt-install \
--name Windows10 \
--ram 1024 \
--disk path=/var/lib/libvirt/images/Windows10.img,size=75 \
--vcpus 4 \
--os-variant Windows10 \
--network bridge=br0 \
--graphics none \
--console pty,target_type=serial \
--location /var/lib/libvirt/iso/Windows10.iso \
--extra-args 'console=ttyS0,115200n8' 
Task:
Завершение процесса работы в виртуальной машине.
# Виртуализация. 
Decision:
root@kvmubuntu:~# umount /dev/sdc1
root@kvmubuntu:~# exit
PS C:\Windows\system32> wsl --unmount \\.\PHYSICALDRIVE2 
Task:
Установка Sftp сервера.
# Администрирование локальных, виртуальных и облачных серверов. 
Decision:
root@kvmubuntu:~# virsh start Windows10
- Панель управления - Система - Настройка удаленного доступа - +разрешить подключения удаленного помощника к этому компьютеру - +разрешить удаленные подключения к этому компьютеру - -Разрешить подключение только с компьютеров ...
PS C:\Windows\system32> Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
PS C:\Windows\system32> Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
PS C:\Windows\system32> Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH*'
Name : OpenSSH.Client~~~~0.0.1.0
State : Installed
Name : OpenSSH.Server~~~~0.0.1.0
State : Installed
C:\Users\tuser> ipconfig
...
tipubuntu
PS C:\Windows\system32> Start-Service sshd
PS C:\Windows\system32> Set-Service -Name sshd -StartupType 'Automatic'
PS C:\Windows\system32> notepad.exe C:\ProgramData\ssh\sshd_config
PS C:\Windows\system32> type C:\ProgramData\ssh\sshd_config
...
PasswordAuthentication yes
...
# override default of no subsystems
Subsystem sftp sftp-server.exe
...
Match User tuser
ChrootDirectory C:\Users\tuser\Documents
# ForceCommand internal-sftp
X11Forwarding yes
...
PS C:\Windows\system32> Restart-Service sshd
root@kvmubuntu:~# ssh tuser@tipubuntu
tuser@KVM-TWINDOWS C:\Users\tuser> exit
root@kvmubuntu:~# ls
DataProcessingInCpp Drivers ReceivingDataFromSatellite
root@kvmubuntu:~# sftp tuser@tipubuntu
sftp> put -r ReceivingDataFromSatellite
sftp> put -r DataProcessingInCpp
sftp> ls
DataProcessingInCpp               
ReceivingDataFromSatellite 
sftp> exit
Task:
Установка Borland C++ Builder под Windows.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
PS C:\Windows\system32> Mount-DiskImage -ImagePath "C:\users\tuser\documents\DataProcessingInCpp\Borland C++ Builder 6.0 Enterprise [cd1].iso"
PS C:\Windows\system32> Get-PSDrive -PSProvider FileSystem
Name   Used (GB) Free (GB) Provider Root                       CurrentLocation 
----   --------- --------- -------- ----                       --------------- 
C     25,27   49,16 FileSystem C:\                       users\tuser\documents 
D     4,32   0,00 FileSystem D:\
E         FileSystem E:\
F     0,61   0,00 FileSystem F:\
PS C:\Windows\system32> ls F:\
Каталог: F:\
Mode     LastWriteTime   Length Name
----     -------------   ------ ----
d-----  01.02.2002 17:00    Install
--r---  01.02.2002 17:00   29550 license.txt
--r---  01.02.2002 17:00   54878 readme.rtf
--r---  01.02.2002 17:00   33959 readme.txt
--r---  01.02.2002 17:00   29550 license.txt
--r---  01.02.2002 17:00   54878 readme.rtf
--r---  01.02.2002 17:00   33959 readme.txt
--r---  01.02.2002 17:00   5337 remote.rtf
--r---  01.02.2002 17:00   1750 remote.txt
--r---  01.02.2002 17:00   1750 install.exe
- Запустим от администратора install.exe - выбираем С++ Builder 6 - нужно ввести сгенерированный ключ программы, зайдя в папку Borland - запустить генератор ключей Borland KeyGen - копируем - вставляем серийный номер - ключ программы в установщик
PS C:\Windows\system32> Dismount-DiskImage -ImagePath "C:\users\tuser\documents\DataProcessingInCpp\Borland C++ Builder 6.0 Enterprise [cd1].iso" 
PS C:\Windows\system32> Mount-DiskImage -ImagePath "C:\users\tuser\documents\DataProcessingInCpp\Borland C++ Builder 6.0 Enterprise [cd2].iso"
- Ок - finish - NO (Ни в коем случае не перезагружаться)
PS C:\Windows\system32> Dismount-DiskImage -ImagePath "C:\users\tuser\documents\DataProcessingInCpp\Borland C++ Builder 6.0 Enterprise [cd2].iso" 
- C:\Programms file (x86)\Bornald\Builder\Bin\ - свойства совместимости bcb.exe - +всегда выполнять от администратора это программу - Запускаем bcb.exe - +регистрируем ее с помощью генератора ключей Borland KeyGe - копировать - вставить - перезагрузиться
Task:
Мы хотим чтобы наша программа с графическим интерфейсом сначала с нами поздоровалась в Bornald Builder.
# Разработка программы на C++.
Decision:
//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop
#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
  : TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button1Click(TObject *Sender)
{
  ShowMessage("Hello world!");
}
//---------------------------------------------------------------------------
Task:
Первый запуск Qt Creator на языке Си.
# Разработка программы на C++.
Decision:
- Начало (Welcome) - проекты - создаем проект - проект без Qt - приложение на языке Си - qmake - ok - проекты - запуск - запуск в терминале - ок - запуск (зеленый треугольник внизу или ctrl+r)
Task:
Настроим утилиту для OpenGl в ubuntu 20.04.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# apt-get update
root@kvmubuntu:~# apt-get install libglu1-mesa-dev freeglut3-dev mesa-common-dev
Task:
Первый запуск OpenGl.
# Разработка программы на C++.
Decision:$ vim main.cpp
root@kvmubuntu:~# cat main.cpp
 #include <GL/glut.h>
 void displayMe(void)
 {
 glClear(GL_COLOR_BUFFER_BIT);
 glBegin(GL_POLYGON);
     glVertex3f(0.5, 0.0, 0.5);
     glVertex3f(0.5, 0.0, 0.0);
     glVertex3f(0.0, 0.5, 0.0);
     glVertex3f(0.0, 0.0, 0.5);
 glEnd();
 glFlush();
 }
 int main(int argc, char** argv)
 {
 glutInit(&argc, argv);
 glutInitDisplayMode(GLUT_SINGLE);
 glutInitWindowSize(400, 300);
 glutInitWindowPosition(100, 100);
 glutCreateWindow("Hello world!");
 glutDisplayFunc(displayMe);
 glutMainLoop();
 return 0;
 }
root@kvmubuntu:~# g++ main.cpp -o firstOpenGlApp -lglut -lGLU -lGL
root@kvmubuntu:~# ./firstOpenGlApp
Task:
Установка Qt Creator под Windows.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
- https://visualstudio.microsoft.com/ru/downloads/ - Инструменты для Visual Studio 2022 - Инструменты сборки для Visual Studio 2022 - aka.ms
C:\Users\...\Downloads\qt C++ installer> vs_buildtools.exe --layout offline --lang en-us --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended
- ...\offline\vs_setup.exe
- https://developer.microsoft.com/en-US/windows/downloads/windows-sdk/ - Getting started - https://go.microsoft.com/fwlink/?linkid=2173746 - ...\22000.194.210911-1543.co_release_svc_prod1_WindowsSDK.iso - Извлечь в текущую папку - ...\22000.194.210911-1543.co_release_svc_prod1_WindowsSDK\Installers\X64 Debuggers And Tools-x64_en-us.exe - ...\22000.194.210911-1543.co_release_svc_prod1_WindowsSDK\Installers\X86 Debuggers And Tools-x86_en-us.exe
- https://cmake.org/download/ - Binary distributions: - Windows x64 Installer: Installer tool has changed. Uninstall CMake 3.4 or lower first! - https://github.com/Kitware/CMake/releases/download/v3.22.0/cmake-3.22.0-windows-x86_64.msi
- ...\cmake-3.22.0-windows-x86_64.msi - Add CMake to the system PATH for all users
- https://www.qt.io/offline-installers - Windows Host - \qt-opensource-windows-x86-5.12.11.exe - Select Components - Qt 5.12 -> MSVC 2017 32-bit - MSVC 2017 64-bit - Launch QT Creator - Компьютер - Свойства - Дополнительные параметры системы - Переменные среды -  Системные переменные - Path - Изменить - Создать - C:\Qt\Qt5.12.11\Tools\QtCreator\bin - Пуск - QT Creator Community - Инструменты - Параметры
Task:
Установка Qt Creator под Ubuntu 20.04.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
- https://www.qt.io/download-qt-installer - Download:
root@kvmubuntu:~# chmod u+x qt-unified-linux-x64-4.1.1-online.run
root@kvmubuntu:~# ./qt-unified-linux-x64-4.1.1-online.run
- выбрать компоненты
Task:
Установка g++.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# apt install build-essential
root@kvmubuntu:~# g++ --version
Task:
Первый запуск.
# Разработка программы на C++.
Decision:
root@kvmubuntu:~# vim hello.cc
root@kvmubuntu:~# cat hello.cc
   #include <iostream>
   using namespace std;
   int main()
   {
   cout << "Hello, World!";
   return 0;
   }
root@kvmubuntu:~# ls -l
   итого 28
   -rw-rw-r-- 1     100 Jul 20 20:13 hello.cc
root@kvmubuntu:~# g++ -o hello hello.cc
root@kvmubuntu:~# ls -l
   итого 48
   -rwxrwxr-x 1   17160 Jul 20 20:13 hello
   -rw-rw-r-- 1     100 Jul 20 20:13 hello.cc
root@kvmubuntu:~# ./hello
   Hello, World!
Decision:
root@kvmubuntu:~# vim test.cpp
root@kvmubuntu:~# cat test.cpp
   fint main(){
   }
root@kvmubuntu:~# g++ test.cpp -o test
   test.cpp:1:1: error: ‘fint’ does not name a type; did you mean ‘int’?
   1 | fint main(){
     | ^~~~
     | int
root@kvmubuntu:~# vim test.cpp
root@kvmubuntu:~# cat test.cpp
   int main(){
   }
root@kvmubuntu:~# g++ test.cpp -o test
root@kvmubuntu:~# ls
   test  test.cpp
root@kvmubuntu:~# gdb --annotate=3 test
   GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
   Copyright (C) 2020 Free Software Foundation, Inc.
   License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
   This is free software: you are free to change and redistribute it.
   There is NO WARRANTY, to the extent permitted by law.
   Type "show copying" and "show warranty" for details.
   This GDB was configured as "x86_64-linux-gnu".
   Type "show configuration" for configuration details.
   For bug reporting instructions, please see:
   <http://www.gnu.org/software/gdb/bugs/>.
   Find the GDB manual and other documentation resources online at:
   <http://www.gnu.org/software/gdb/documentation/>.
   For help, type "help".
   Type "apropos word" to search for commands related to "word"...
   Reading symbols from test...
   (No debugging symbols found in test)
     pre-prompt
   (gdb)
     prompt
run
     post-prompt
   Starting program: /home/as/Документы/C++/C++ Open GL/test/test
     starting
     exited 0
   [Inferior 1 (process 8426) exited normally]
     thread-exited,id="1",group-id="i1"
     stopped
     pre-prompt
   (gdb)
     prompt
quit
     post-prompt
Task:
Теперь попробуем добавить что-нибудь в программе. Чтобы добавить какой-нибудь текст, нужно подключить библиотеку iostream.
# Разработка программы на C++.
Decision:
root@kvmubuntu:~# vim test.cpp
root@kvmubuntu:~# cat test.cpp
   #include <iostream>
   int main(){
   std::cout<<"Hello"<<std::endl;
   }
root@kvmubuntu:~# g++ test.cpp -o test
root@kvmubuntu:~# gdb --annotate=3 test
   Copyright (C) 2020 Free Software Foundation, Inc.
   License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
   This is free software: you are free to change and redistribute it.
   There is NO WARRANTY, to the extent permitted by law.
   Type "show copying" and "show warranty" for details.
   This GDB was configured as "x86_64-linux-gnu".
   Type "show configuration" for configuration details.
   For bug reporting instructions, please see:
   <http://www.gnu.org/software/gdb/bugs/>.
   Find the GDB manual and other documentation resources online at:
   <http://www.gnu.org/software/gdb/documentation/>.
   For help, type "help".
   Type "apropos word" to search for commands related to "word"...
   Reading symbols from test...
   (No debugging symbols found in test)
     pre-prompt
   (gdb)
     prompt
run
     post-prompt
   Starting program: /home/as/Документы/C++/C++ Open GL/test/test
     starting
   Hello
     exited 0
   [Inferior 1 (process 8581) exited normally]
     thread-exited,id="1",group-id="i1"
     stopped
     pre-prompt
   (gdb)
     prompt
q
     post-prompt
Decision:
root@kvmubuntu:~# vim test.cpp
root@kvmubuntu:~# cat test.cpp
   #include <iostream>
   using namespace std;
   int main(){
   int i=1;
   float f=1.1123;
   char c='f';
   cin>>i;
   cin>>f;
   cin>>c;
   cout<<i<<endl;
   cout<<f<<endl;
   cout<<c<<endl;
   }
root@kvmubuntu:~# g++ test.cpp -o test
root@kvmubuntu:~# gdb --annotate=3 test
   GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
   Copyright (C) 2020 Free Software Foundation, Inc.
   License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
   This is free software: you are free to change and redistribute it.
   There is NO WARRANTY, to the extent permitted by law.
   Type "show copying" and "show warranty" for details.
   This GDB was configured as "x86_64-linux-gnu".
   Type "show configuration" for configuration details.
   For bug reporting instructions, please see:
   <http://www.gnu.org/software/gdb/bugs/>.
   Find the GDB manual and other documentation resources online at:
   <http://www.gnu.org/software/gdb/documentation/>.
   For help, type "help".
   Type "apropos word" to search for commands related to "word"...
   Reading symbols from test...
   (No debugging symbols found in test)
     pre-prompt
   (gdb)
     prompt
run
     post-prompt
   Starting program: /home/as/Документы/C++/C++ Open GL/test/test
     starting
   32
   15.04
   g
   32
   15.04
   g
     exited 0
   [Inferior 1 (process 9164) exited normally]
     thread-exited,id="1",group-id="i1"
     stopped
     pre-prompt
   (gdb)
     prompt
q
     post-prompt        
Source:
# https://linuxconfig.org/how-to-install-g-the-c-compiler-on-ubuntu-20-04-lts-focal-fossa-linux
# http://www.codebind.com/linux-tutorials/install-opengl-ubuntu-linux/
# https://prognote.ru/articles/how-to-install-qt-5-on-linux-ubuntu
# https://www.youtube.com/watch?v=2Scwa8KuNQU&t=79s
Task:
Часы
# Разработка программы на C++.
Decision:
root@kvmubuntu:~# cat Clock.cpp
#include<GL/glut.h>
#include<cmath>
#include<ctime>
void display(){
        glClear(GL_COLOR_BUFFER_BIT);
        glBegin(GL_LINES);
    for(int i=0; i<12; ++i){
        float x=sin(2*M_PI/12*i);
        float y=cos(2*M_PI/12*i);
        glVertex2f(400*x, 400*y);
        glVertex2f(380*x, 380*y);
    }
    time_t t=time(0);
    tm *lt=localtime(&t);//kosiyak
    int h=lt -> tm_hour;
    int m=lt -> tm_min;
    int s=lt -> tm_sec;
    float x=sin(2*M_PI*(h*60+m)/12/60);
        float y=cos(2*M_PI*(h*60+m)/12/60);
        glVertex2f(0, 0);
        glVertex2f(250*x, 250*y);
    x=sin(2*M_PI*m/60);
        y=cos(2*M_PI*m/60);
        glVertex2f(0, 0);
        glVertex2f(350*x, 350*y);
    x=sin(2*M_PI*s/60);
        y=cos(2*M_PI*s/60);
        glVertex2f(0, 0);
        glVertex2f(370*x, 370*y);
    glEnd();
        glutSwapBuffers();
}
void timer(int=0){
        display();
        glutTimerFunc(10,timer,0);
}
int main(int argc, char **argv){
    glutInit(&argc, argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
        glutInitWindowSize(400,400);
        glutInitWindowPosition(20,1050-400-20);
        glutCreateWindow("Clock");
        glClearColor(0,0,0,1.0);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(-400,400,-400,400,-400,400);
        glutDisplayFunc(display);
        timer();
        glutMainLoop();
}
root@kvmubuntu:~# g++ Clock.cpp -o main -lglut -lGLU -lGL
root@kvmubuntu:~# ./main
Task:
Лабиринт с помощью двумерных массивов.
# Разработка программы на C++.
Decision:
#include <iostream>
#include <math.h>
#include <clocale>
using namespace std;
int main()
{
    setlocale(LC_CTYPE, "rus");
    int mas[33][20] = {
                        {1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,}, 
                        {1,2,1,0,0,1,0,1,2,2,2,1,1,1,1,0,0,0,0,1,},
                        {1,2,1,1,0,1,0,1,2,1,2,2,2,2,1,0,1,1,0,1,},
                        {1,2,2,2,2,2,2,1,2,1,1,1,1,2,1,0,0,1,0,1,},
                        {1,1,1,1,1,1,2,1,2,1,0,0,1,2,1,1,0,1,0,1,},
                        {1,0,0,1,0,0,2,2,2,1,1,0,0,2,0,0,0,1,0,1,},
                        {1,0,1,1,0,1,1,1,1,1,0,0,1,2,1,1,1,1,0,1,},
                        {1,0,0,0,0,0,0,0,0,1,1,1,1,2,1,0,0,0,0,1,},
                        {1,1,1,1,1,1,0,1,1,1,2,2,2,2,1,0,1,1,1,1,},
                        {1,1,0,0,0,1,0,0,1,1,2,1,1,1,1,0,0,0,0,1,},
                        {1,0,0,1,0,0,0,0,0,1,2,2,2,2,1,1,1,1,0,1,},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,0,0,0,0,1,},
                        {1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,1,1,1,1,},
                        {1,2,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,},
                        {1,2,1,0,0,0,1,2,2,2,1,0,0,0,0,0,1,1,0,1,},
                        {1,2,1,1,1,1,1,2,1,2,1,1,1,0,1,0,0,0,0,1,},
                        {1,2,1,2,2,2,1,2,1,2,2,2,1,1,1,1,1,1,1,1,},
                        {1,2,1,2,1,2,1,2,1,0,1,2,2,2,2,2,2,2,2,1,},
                        {1,2,1,2,1,2,1,2,1,0,1,1,1,1,1,1,1,1,2,1,},
                        {1,2,1,2,1,2,1,2,1,0,0,0,0,0,0,0,0,0,2,1,},
                        {1,2,1,2,1,2,2,2,1,0,1,1,1,1,1,1,0,1,2,1,},
                        {1,2,1,2,1,1,1,1,1,0,0,0,1,0,1,0,0,1,2,1,},
                        {1,2,1,2,2,1,0,0,1,1,1,0,0,0,1,0,1,1,2,1,},
                        {1,2,1,1,2,1,1,0,0,0,0,0,1,0,1,0,0,1,2,1,},
                        {1,2,1,1,2,1,0,0,1,1,1,1,1,1,1,1,1,1,2,1,},
                        {1,2,1,1,2,1,1,0,1,2,2,2,2,2,2,2,2,2,2,1,},
                        {1,2,1,1,2,1,0,0,1,2,1,1,1,1,1,1,1,1,1,1,},
                        {1,2,1,1,2,1,0,1,1,2,1,1,1,1,1,1,1,1,2,2,},
                        {1,2,1,1,2,1,0,0,1,2,1,1,2,2,2,2,2,2,2,1,},
                        {1,2,1,1,2,1,0,1,1,2,1,1,2,1,1,1,1,1,1,1,},
                        {1,2,1,1,2,1,0,0,1,2,1,1,2,1,0,0,0,1,0,1,},
                        {1,2,2,2,2,1,0,1,1,2,2,2,2,0,0,1,0,0,0,1,},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,}
    };
    for (int i = 0; i < 33; i++)
    {
        for (int j = 0; j < 20; j++)
        {
            if (mas[i][j] == 1)
            {
                cout <<"j";
                cout <<"j";
            } else{
                 cout << "  ";
            }
        }
        cout << endl;
    }
    return 0;
}    
Task:
The matrix.
# Разработка программы на C++.
Decision:
#include <GL/glut.h>
#include <iostream>
using namespace std;
struct Ch{
    Ch(char ach=' ', int alive=0):
        ch(ach),
        live(alive)
    {}
    char ch;
    int live;
};
const int W=852/9;
const int H=480/15;
Ch screen[W][H];
void display(){
    glClear(GL_COLOR_BUFFER_BIT);
    for(int y=0; y<H; ++y){
        for(int x=0; x<W; ++x){
            glRasterPos2f(x*9, (y+1)*15);
            glColor3f(0, screen[x][y].live/10000.0, 0);
            glutBitmapCharacter(GLUT_BITMAP_9_BY_15, screen[x][y].ch);
        }
    }
    glutSwapBuffers();
}
void timer(int=0){
        for(int y=0; y<H; ++y){
            for(int x=0; x<W; ++x){
            if(screen[x][y].live>0){
                --screen[x][y].live;
            }
        }
    }
    int x=rand()%W;
    for(int y=0; y<H; ++y){
        if(screen[x][y].live<=0){
            screen[x][y].ch=rand()%256;
            screen[x][y].live=10000;
            break;
        }
    }
    glutPostRedisplay();
    glutTimerFunc(0, timer, 0);
}
int main(int argc, char **argv){
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(852, 480);
    glutInitWindowPosition(0, 86);
    glutCreateWindow("Metrix Code");
    glClearColor(0, 0, 0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0, 852, 480, 0, -1, 1);
    glutDisplayFunc(display);
    timer();
    glutMainLoop();
    /*for(unsigned wchar i=' '; i<500; ++i){
        wcout<<(wchar)i;
    }*/
}
Task:
Анимация с мышью.
# Разработка программы на C++.
Decision:
#include <GL/glut.h>
#include <cstdlib>
#include <cmath>
using namespace std;
int x=0, y=0;
bool down=false;
const int N=100;
struct P{
    float x, y, vx, vy, r, g, b;
}p[N];
void display(){
    glClear(GL_COLOR_BUFFER_BIT);
    glPointSize(5);
    glBegin(GL_POINTS);
    for(int i=0; i<N; ++i){
        glColor3f(p[i].r, p[i].g, p[i].b);
        glVertex2f(p[i].x, p[i].y);
    }
    glEnd();
    glutSwapBuffers();
}
void timer(int=0){
    display();
    for(int i=0; i<N; ++i){
        p[i].x+=p[i].vx;
        p[i].y+=p[i].vy;
        if (down){
            float d=sqrt((p[i].x-x)*(p[i].x-x)+(p[i].y-y)*(p[i].y-y));
            p[i].x+=5*(x-p[i].x)/d;
            p[i].y+=5*(y-p[i].y)/d;
        }
    }
    glutTimerFunc(10, timer, 0);
}
void mouse(int button, int state, int ax, int ay){
    x=ax;
    y=ay;
    down=state==GLUT_DOWN;
}
void motion(int ax, int ay){
    x=ax;
    y=ay;
}
int main(int argc, char **argv){
    for(int i=0; i<N; ++i){
        p[i].x=rand()%480;
        p[i].y=rand()%480;
        p[i].vx=rand()%480/100.0-2.4;
        p[i].vy=rand()%480/100.0-2.4;
        p[i].r=rand()%200/200.0;
        p[i].g=rand()%200/200.0;
        p[i].b=rand()%200/200.0;
    }
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(480, 480);
    glutInitWindowPosition(20, 1050-480-20);
    glutCreateWindow("Knight tour");
    glClearColor(0, 0, 0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0, 480, 480, 0, -1, 1);
    glutDisplayFunc(display);
    timer();
    glutMouseFunc(mouse);
    glutMotionFunc(motion);
    glutMainLoop();
}
Task:
Моделирование гравитации.
# Разработка программы на C++.
Decision:
#include<GL/glut.h>
#include<cmath>
struct Particle{
    float x, y, vx, vy, m;
};
const int N=4;
Particle particles[N];
void display(){
        glClear(GL_COLOR_BUFFER_BIT);
        glBegin(GL_POINTS);
    for(int i=0; i<N; ++i){
        glVertex2f(particles[i].x, particles[i].y);
    }
        glEnd();
        glutSwapBuffers();
}
void timer(int=0){
    for(int i=0; i<N; ++i){
        Particle &p0=particles[i];
        for(int j=0; j<N; ++j){
            if(j==i){
                continue;
            }
            const Particle &p=particles[j];
            float d=sqrt((p0.x-p.x)*(p0.x-p.x)+
                    (p0.y-p.y)*(p0.y-p.y));
            if(d>3){
                p0.vx+=0.0007*p.m/d/d*(p.x-p0.x)/d;
                                p0.vy+=0.0007*p.m/d/d*(p.y-p0.y)/d;
            }
        }
        p0.x+=p0.vx;
        p0.y+=p0.vy;

    }
        display();
        glutTimerFunc(1,timer,0);
}
int main(int argc, char **argv){
    particles[0].x=100;
    particles[0].y=100;
    particles[0].vx=0;
    particles[0].vy=0;
    particles[0].m=1000;
        particles[1].x=130;
        particles[1].y=100;
        particles[1].vx=0;
        particles[1].vy=-0.1;
        particles[1].m=7;
        particles[2].x=30;
        particles[2].y=100;
        particles[2].vx=0;
        particles[2].vy=0.1;
        particles[2].m=10;
        particles[3].x=25;
        particles[3].y=100;
        particles[3].vx=0;
        particles[3].vy=0.11;
        particles[3].m=0.1;
    glutInit(&argc, argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
        glutInitWindowSize(200,200);
        glutInitWindowPosition(20,810);
        glutCreateWindow("Gravitation");
        glClearColor(0,0,0,1.0);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(0,200,200,0,-1,1);
        glutDisplayFunc(display);
        timer();
        glutMainLoop();
}
Task:
Вращающийся куб.
# Разработка программы на C++.
Decision:
#include <GL/glut.h>
//#include <GL/freeglut.h>
void display(){
    glClear(GL_COLOR_BUFFER_BIT);
    glRotatef(1,1,1,0);
    glBegin(GL_LINE_STRIP);
    glVertex3f(-50, -50, -50);
    glVertex3f(50, -50, -50);
    glVertex3f(50, 50, -50);
    glVertex3f(-50, 50, -50);   
    glVertex3f(-50, -50, -50);
    glEnd();
        glBegin(GL_LINE_STRIP);
        glVertex3f(-50, -50, 50);
        glVertex3f(50, -50, 50);
        glVertex3f(50, 50, 50);
        glVertex3f(-50, 50, 50); 
        glVertex3f(-50, -50, 50);
        glEnd();
        glBegin(GL_LINES);
        glVertex3f(-50, -50, 50);
        glVertex3f(-50, -50, -50);
        glVertex3f(50, -50, 50);
        glVertex3f(50, -50, -50); 
        glVertex3f(50, 50, 50);
    glVertex3f(50, 50, -50);
    glVertex3f(-50, 50, 50);
    glVertex3f(-50, 50, -50);
        glEnd();

    glutSwapBuffers();
}
void timer(int=0){
    display();
glutTimerFunc(10, timer, 0);
}
int main(int argc, char **argv){
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(200, 200);
    glutInitWindowPosition(20, 810);
    glutCreateWindow("Cube");
    glClearColor(0,0,0,1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-100, 100, -100, 100, -100, 100);
    glutDisplayFunc(display);
    timer();
    glutMainLoop();
}
Source:
# https://www.youtube.com/playlist?list=PL30625C8F5ADD5BB4
Task:
Функция ввода пароля.
# Разработка программы на C++.
Decision:
#include <iostream>
#include <string>
using namespace std;
void check_pass (string password){
    string valid_pass="qwerty123";
    if (password==valid_pass){
        cout<<"Доступ разрешен." << endl;
    } else {
        cout << "Неверный пароль!" << endl;
    }
}
int main()
{
    setlocale(LC_CTYPE, "rus");
    string user_pass;
    cout<< "Введите пароль: ";
    getline(cin, user_pass);
    check_pass(user_pass);
    return 0;
}
Task:
Шифрование ключевых фраз с помощью функции crypt.
# Разработка программы на C++.
Decision:
root@kvmubuntu:~# ./project hunter2 '$1$42'
$1$42$7l6Y3xT5282XmZrtDOF9f0
root@kvmubuntu:~# ./project hunter2 '$6$42' $6$42$OqFFAVnI3gTSYG0yI9TZWX9cpyQzwIop7HwpG1LLEsNBiMr4w6OvLX1KDa./UpwXfrFk1i...
root@kvmubuntu:~# ./project hunter2 '$1$hunter2'
$1$hunter2$YVxrxDmidq7Xf8Gdt6qM2.
root@kvmubuntu:~# gcc C-EncryptionOfKeyPhrasesUsingCrypt.c -o project -lcrypt
root@kvmubuntu:~# ./project
root@kvmubuntu:~# cat C-EncryptionOfKeyPhrasesUsingCrypt.c
#include <stdio.h>
#define __USE_XOPEN
#include <unistd.h>
int main(int argc, char** argv)
{
 if(argc==3)
   {
       printf("%s\n", crypt(argv[1],argv[2]));
   }
   else
   {
       printf("Использование: MyCrypt $пароль $salt\n" );
   }
  return 0;
}
Task:
Address Book. Я заранее создал список имен c телефонными номерами в файле file.txt.
Нужно создать такую программу, что бы при вводе имени на консоле выдавался номер нужного человека. Сделаю я это с помощью вектора.
# Разработка программы на C++.
Decision:
#include<iostream>
#include<fstream>
#include<vector>
#include<string>
using namespace std;
class Number{
public:
    string name;
    string number;
    Number (const Number &v):
        name(v.name),
        number(v.number){}
    Number(){}
    const Number &operator=(const Number &v){
        name=v.name;
        number=v.number;
        return v;
    }      
};
int main(){
    fstream f("file.txt");
    vector<Number> telBook;
    while(true){
        Number t;
        f>>t.name;
        if(f.eof()){
            break;
        }
        f>>t.number;
        if(f.eof()){
            break;
        }
        telBook.push_back(t);
    }
    while(true){
        cout<<"Введите имя (или стоп)";
        string name;
        cin>>name;
        if(name=="стоп"){
            break;
        }
        for(int i=0;i<telBook.size(); ++i){
            if(telBook[i].name==name){
                cout<<name<<" "<<telBook[i].number<<endl;
            }
        }
    }
}
Source:
# https://www.youtube.com/playlist?list=PLvItDmb0sZw_l5qKMLTjePXX485CWKVNe
Task:
Keyboard. For this letter of the English alphabet, you need to print the letter on the right on a standard keyboard. At the same time, the keyboard is closed, i.e. to the right of the letter «p» is the letter «a», from the letter «l» is the letter «z», and from the letter «m» — the letter
Input: Первая строка входного файла INPUT.TXT содержит один символ — маленькую букву английского алфавита.
Output: В выходной файл OUTPUT.TXT следует вывести букву стоящую справа от заданной буквы, с учетом замкнутости клавиатуры.
# Разработка программы на C++.
Decision:
#include<iostream>
#include<fstream>
#include<cmath>
using namespace std;
ifstream in("input.txt");
ofstream out("output.txt");
int main()
{
    const char massive=26;
    char a[massive]={
        'q','w','e','r','t','y','u','i','o','p','a',
        's','d','f','g','h','j','k','l','z','x','c',
        'v','b','n','m'
    };
    char symbol;
    in>>symbol;
    if(symbol=='m'){
        out<<a[0];
    }
    else{
        for(int i=0; i<massive; i++){
            if(symbol==a[i]){
                out<<a[i+1];
            }
        }
    }
    return 0;
}    
Task:
Склонение слов.
# Разработка программы на C++.
Decision:
#include <iostream>
using namespace std;
int main(){
    cout<<"Введите кoличество пирожков: ";
    int n;
    cin>>n;
    cout<<"Я собираюсь съесть "<<n;
        int o=n%100;
    if((o>10)&&(o<20)){
        cout<<" .";
    }
    else{
        switch(o%10){
            case 0:
                cout<<" пирожков.";
                break;
            case 1:
                cout<<" пирожок.";
                break;
            case 2:
            case 3:
            case 4:
                cout<<" пирожка.";
                break;
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                cout<<" пирожков.";
                break;
        }
    }
    cout<<endl; 
}
Source:
# https://acmp.ru/index.asp?main=tasks
Task:
Генерация. пытаемся отгадать число у компа.
# Разработка программы на C++.
Decision:
#include<iostream>
#include<cstdlib>
#include<ctime>
using namespace std;
int main (){
        srand(time(0));
        bool done;
        do{
                int j, i=rand()%100;
                while (true){
                        cout<<"Какое число вы загадали?";
                        cin>>j;
                        if(i>j){
                                cout<<"Мое число больше"<<endl;
                        }
                        else{
                                if(i<j){
                                        cout<<"Мое число меньше"<<endl;
                                }
                                else{
                                        cout<<"Ты угадал"<<endl;
                                        break;
                                }
                        }
                }
                cout<<"Продолжить? (y/n) ";
                char c;
                done=(c!='y');
                cin>>c;
        }while(!done);
}
Task:
Теперь наоборот комп пытаеmся угадать у нас число.
# Разработка программы на C++.
Decision:
#include<iostream>
#include<cmath>
using namespace std;
float f(float x){
        cout<<(int)x<<endl;
        while (true){
                cout<<"Правильно? (+/-/=) ";
                char c;
                cin>>c;
                switch (c){
                        case '+': return +1;
                        case '-': return -1;
                        case '=': return 0;
                }
                cout<<"Вы ввели не правильный символ, повторите"<<endl;
        }
}
float n(float x1, float x2){
        float x=(x1+x2)/2;
        float y=f(x);
        while(abs(y)>0.001){
                if(y>0){
                        x1=x;
                }else{
                        x2=x;
                }
                x=(x1+x2)/2;
                y=f(x);
        }
        return x;
}
int main(){
        cout<<"Вы загадали "<< (int)n(0,100);
}
Task:
Крестики-нолики.
# Разработка программы на C++.
Decision:
#include <iostream>
using namespace std;
int main() {
    char xo[3][3] = {
        {'.', '.','.'},
        {'.', '.','.'},
        {'.', '.','.'}
    };
    while(true) {
        int x, y;
        cin >> x >> y;
        xo[x][y] = 'x';
        for(int i=0;i<3; i++) {
            for(int j=0;j<3; j++) {
                cout << xo[i][j] << " ";
            }
            cout << endl;
        }
    }
    return 0;
}
Decision:
#include<iostream>
using namespace std;
//char d[9]={ '-', '-', '-', '-', '-', '-', '-', '-', '-'};
char d[9]={};
void clear(){
    for(int i=0; i<50; i++){
        cout<<endl;
    }
}
void clear_doska(){
    for(int i=0; i<9; i++){
        d[i]='-';
    }
}
void doska_player(){
    cout<<"ход игроков"<<endl;
    cout<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
    cout<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
    cout<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
}
int doska(){
    cout<<"подсказка хода"<<endl;
    cout<<"-7-|-8-|-9-"<<endl;
    cout<<"-4-|-5-|-6-"<<endl;
    cout<<"-1-|-2-|-3-"<<endl;
    doska_player("");
    //cout<<"ход игроков"<<endl;
    //cout<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
    //cout<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
    //cout<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
    int hod;
    cout<<"ваш ход: ";
    cin>>hod;
    while(hod>9 || hod<1 || d[hod-1]!='-'){
        cout<<"введите правильный ход: ";
        cin>>hod;
    }
    return hod;
}
int main(){
    clear_doska();
    int turn=0;
    for(int i=0; i<9; i++){
        clear();
        int hod=doska();
        cout<<"Вы ввели: "<<hod<<endl;
        if(i%2==0){
            d[hod-1]='x';
        }else{
            d[hod-1]='o';
        }
        turn++;
    }
    doska_player();
    return 0;
}
Decision:
#include<iostream>
#include<string>
using namespace std;
char d[9]={};
void clear(){
    for(int i=0; i<50; i++){
        cout<<endl;
    }
}
void clear_doska(){
    for(int i=0; i<9; i++){
        d[i]='-';
    }
}
void doska_player(string indent){
    cout<<indent<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
    cout<<indent<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
    cout<<indent<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
}
int doska(){
    cout<<"подсказка хода"<<endl;
    cout<<"-7-|-8-|-9-"<<endl;
    cout<<"-4-|-5-|-6-"<<endl;
    cout<<"-1-|-2-|-3-"<<endl;
    doska_player("");
    int hod;    
    cout<<"ваш ход: ";
    cin>>hod;
    while(hod>9 || hod<1 || d[hod-1]!='-'){
        cout<<"введите правильный ход: ";
        cin>>hod;
    }
    return hod;
}
bool finish_win(char player){
    int win[][3]={{0,1,2},{3,4,5},{6,7,8},{0,3,6},{1,4,7},{2,5,8},{6,4,2},{0,4,8}};
    for(int i=0; i<8; i++){
        int count=0;
        for(int j=0; j<3; j++){
            if(d[win[i][j]]==player){
                count++;
            }
        }
        if(count==3){
            return true;
        }
    }
    return false;
}
char play_and_get_winner(){
    int turn=1;
    while(!finish_win('x') && !finish_win('o')){
        clear();
        int hod=doska();
        cout<<"Вы ввели: "<<hod<<endl;
        if(turn%2==1){
            d[hod-1]='x';
            if(finish_win('x')){
                cout<<"player X: поздравляю, вы выйграли"<<endl;
                return 'x';
            }
        }else{
            d[hod-1]='o';
            if(finish_win('o')){
                cout<<"player O: поздравляю, вы выйграли"<<endl;
                return 'o';
            }
        }
        turn++;
        if(turn==10){
            cout<<"Ничья"<<endl;
        }
    }
    return 'D';
}
int main(){
    cout<<"Welcome"<<endl;
    string reply="y";
    int x_wins=0, o_wins=0, ties=0;
    while(reply=="y"){
        clear_doska();
        char winner=play_and_get_winner();
        doska_player("\t");
        switch(winner){
            case 'x':
                x_wins++;
                break;
            case 'o':
                o_wins++;
                break;
            case 'D':
                ties++;
                break;
        }
        cout<<" Статистика Игрока Х: " <<x_wins<<", Игрока О: "<<o_wins<<" И нeчьи "<<ties<<endl;
        cout<<"Хотите продолжить?(y/n) ";
        cin>>reply;
        while(reply!="y" && reply!="n"){
            cout<<"Пожалуйста, введите правильный ответ(y/n) ";
            cin>>reply;
        }
    }
    return 0;
}
Task:
Сапер
Мальчику Васе очень нравится знаменитая игра "Сапер" ("Minesweeper").
Один человек играет в "Сапера". Игра ведется на клетчатом поле (далее мы будем называть это картой) N×M (N строк, M столбцов). В K ячейках поля находятся мины, в остальных ячейках либо записывается число от 1 до 8 — количество мин в соседних ячейках, либо ничего не записывается, если в соседних ячейках нет мин. Ячейки являются смежными, если у них есть хотя бы одна общая точка, в одной ячейке не может быть более одной мины. Изначально все ячейки поля закрыты. Игрок может открыть ячейку за один ход. Если в открытой им ячейке есть мина, он проигрывает, в противном случае игроку показывается число, которое стоит в этой ячейке, и игра продолжается. Цель игры состоит в том, чтобы открыть все ячейки, в которых нет мин.
У Васи есть эта игра на компьютере, но ему кажется, что все карточки, которые в ней есть, некрасивые и неинтересные. Поэтому он решил нарисовать свой собственный. Однако у него богатое воображение, а времени мало, и он хочет успеть нарисовать как можно больше карточек. Поэтому он просто выбирает N, M и K и расставляет мины на поле, после чего все остальные ячейки могут быть однозначно идентифицированы. Однако он не хочет тратить свое драгоценное время на определение оставшихся ячеек. Помогите ему!
# Разработка программы на C++.
Decision:
#include<iostream>
#include<fstream>
#include<ctime>
#include<cstdlib>
using namespace std;
ifstream in("input.txt");
ofstream out("output.txt");
int main()
{
    char massive[10][10]={
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'}
            };
    time_t now = time(NULL);
    srand(now);
    int x, y;
    for (int i=0; i<10; ){
        x = rand()%10;
        y = rand()%10;
        if (massive[x][y]=='*'){
            continue;
        }
        else {
            massive[x][y] ='*';
        }
       i++;
    }
    for (int i=0; i<10; i++){
        for (int j=0;j<10;j++)
        cout << massive[i][j] << " ";
        cout << endl;
    }
    return 0;
}
Task:
Мне нужно написать программу, которая считывает возраст человека. Программа сначала запрашивает год рождения.
# Разработка программы на C++.
Decision:
root@kvmubuntu:~# cat Cpp-AgeDetermination.cpp
#include <iostream>
using namespace std;
int age(int current_date, int current_month, int current_year, int birth_date, int birth_month, int birth_year)
{
  //если дата рождения больше текущей даты рождения тогда не считайте в этом месяце и добавьте 30 к дате так как вычесть дату и получить оставшиеся дни
  int month[]={31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  if (birth_date > current_date)
  {
    current_month = current_month - 1;
    current_date = current_date + month[birth_month-1];
  }
  //если месяц рождения превышает текущий месяц, то  Не считайте в этом году и добавьте 12 к месяц, чтобы мы могли вычесть и выяснить различия
  if (birth_month > current_month)
  {
    current_year = current_year - 1;
        current_month = current_month + 12;
  }
    // вычислить дату, месяц, год
    int calculated_date = current_date - birth_date;
    int calculated_month = current_month - birth_month;
    int calculated_year = current_year - birth_year;
  // печать нынешнего возраста
    cout<<"Present Age:"<<endl;
    cout<<"Years: "<<calculated_year<<" Months: "<<calculated_month<<" Days: "<<calculated_date<<endl;
  return 0;
}
int main()
{
  int current_date, current_month, current_year, birth_date, birth_month, birth_year;
  //код пользователя
  cout<<"Today:"<<endl;
  cout<<"DD: ";
  cin>>current_date;
  cout<<"MM: ";
  cin>>current_month;
  cout<<"YYYY: ";
  cin>>current_year;
  //рождение дд // мм // гггг
  cout<<"You'r Birthday:"<<endl;
  cout<<"DD: ";
  cin>>birth_date;
    cout<<"MM: ";
  cin>>birth_month;
    cout<<"YYYY:";
  cin>>birth_year;
  age(current_date, current_month, current_year, birth_date, birth_month, birth_year);
  system("pause");
  return 0;
}
root@kvmubuntu:~# cat Py-AgeDetermination.py
def age(current_date, current_month, current_year, birth_date, birth_month, birth_year):
    #если дата рождения больше текущей даты рождения тогда не считайте в этом месяце и добавьте 30 к дате так как вычесть дату и получить оставшиеся дни
    month =[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if (birth_date > current_date):
        current_month = current_month - 1
        current_date = current_date + month[birth_month-1]
    #если месяц рождения превышает текущий месяц, то Не считайте в этом году и добавьте 12 к месяц, чтобы мы могли вычесть и выяснить различия
    if (birth_month > current_month):
        current_year = current_year - 1;
        current_month = current_month + 12;
    # вычислить дату, месяц, год
    calculated_date = current_date - birth_date;
    calculated_month = current_month - birth_month;
    calculated_year = current_year - birth_year;
    # печать нынешнего возраста
    print("Present Age:")
    print("Years:", calculated_year, "Months:", calculated_month, "Days:", calculated_date)
print("Today:")
# код пользователя
current_date = int(input("DD: "))
current_month = int(input("MM: "))
current_year = int(input("YYYY: "))
# рождение дд // мм // гггг
print("You'r Birthday:")
birth_date = int(input("DD: "))
birth_month = int(input("MM: "))
birth_year = int(input("YYYY: "))
age(current_date, current_month, current_year, birth_date, birth_month, birth_year)
root@kvmubuntu:~# python3 Py-AgeDetermination.py
Today:
DD: 18
MM: 07
YYYY: 2022
You'r Birthday:
DD: 23
MM: 09
YYYY: 1992
Present Age:
Years: 29 Months: 9 Days: 25
root@kvmubuntu:~# g++ Cpp-AgeDetermination.cpp -o output
root@kvmubuntu:~# ./output
Today:
DD: 18
MM: 07
YYYY: 2022
You'r Birthday:
DD: 23
MM: 09
YYYY:1992
Present Age:
Years: 29 Months: 9 Days: 25
Task:
Создайте конвертер валют, который получает данные из национального банка с помощью json и выводит данные о стоимости рубля к доллару, евро и юаню. Запустите программу через терминал.
# Разработка программы на C++.
Decision:
root@kvmubuntu:~# cat Cpp-CurrencyConverter.cpp
#include <iostream>
using namespace std;
int main()
{
  float dollar, euro, yuan;
  cout<<"current dollar data: ";
  cin>>dollar;
        cout<<"current euro data: ";
  cin>>euro;
        cout<<"current yuan data: ";
  cin>>yuan;
  //cout<<dollar<<" "<<euro<<" "<<yuan<<" "<<endl;
  cout<<"1) Convert to dollars, Euros, yuan"<<endl<<"2) Transfer from dollars, Euros, yuan"<<endl<<"Choose your actions: ";
  int choise;
  cin>>choise;
  //cout<<choise; 
  if (choise==1){
    float ruble, resultDollar, resultEuro, resultYuan;
    cout<<"Enter the number of rubles: ";
    cin>>ruble;
    resultDollar=ruble/dollar;
    resultEuro=ruble/euro;
    resultYuan=ruble/yuan;
    cout<<"The result of your transfer = "<<resultDollar<<endl<<"The result of your transfer = "<<resultEuro<<endl<<"The result of your transfer = "<<resultYuan<<endl;
  } else if (choise==2) {
    float d, e, y, resultDollar, resultEuro, resultYuan;
    cout<<"Enter the number of dollars: ";
    cin>>d;
    cout<<"Enter the number of euroes: ";
    cin>>e;
    cout<<"Enter the number of yuans: ";
    cin>>y;
    resultDollar=d*dollar;
    resultEuro=e*euro;
    resultYuan=y*yuan;
    cout<<"The result of your transfer = "<<resultDollar<<endl<<"The result of your transfer = "<<resultEuro<<endl<<"The result of your transfer = "<<resultYuan<<endl;
  } else {
    cout<<"Error! Enter only 1 or 2: "<<endl;
    exit(0);
  }
  //system("pause");
  return 0;
}
root@kvmubuntu:~# cat Py-CurrencyConverter.py 
from pprint import pprint
import requests
data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
dictionaryU=data['Valute']['USD']
dictionaryE=data['Valute']['EUR']
dictionaryC=data['Valute']['CNY']
'''
lists=[dictionaryU, dictionaryE, dictionaryC]
for index in lists:
  print(index)
'''
'''
print(dictionaryU['Value'],dictionaryU['Name'])
print(dictionaryE['Value'],dictionaryE['Name'])
print(dictionaryC['Value'],dictionaryC['Name'])
'''
'''
dollar=float(input("Enter the dollar rate: "))
euro=float(input("Enter the euro exchange rate: "))
yuan=float(input("Enter the yuan exchange rate: "))
'''
dollar=dictionaryU['Value']
euro=dictionaryE['Value']
yuan=dictionaryC['Value']
print("Dollar exchange rate: ",dollar)
print("Euro exchange rate: ",euro)
print("Yuan exchange rate: ",yuan)
print("1) Convert to dollars, Euros, yuan\n2) Transfer from dollars, Euros, yuan\n")
choise=int(input("Choose your actions:\n"))
if choise==1:
  ruble=float(input("Enter the number of rubles: "))
  resultDollar=ruble/dollar
  resultEuro=ruble/euro
  resultYuan=ruble/yuan
  print("The result of your transfer = ", '{:.2f}'.format(resultDollar))
  print("The result of your transfer = ", '{:.2f}'.format(resultEuro))
  print("The result of your transfer = ", '{:.2f}'.format(resultYuan))
elif choise==2:
  d=float(input("Enter the number of dollars: "))
  e=float(input("Enter the number of euroes: "))  
  y=float(input("Enter the number of yuans: "))
  resultDollar=d*dollar
  resultEuro=e*euro
  resultYuan=y*yuan
  print("The result of your transfer = ", '{:.2f}'.format(resultDollar))
  print("The result of your transfer = ", '{:.2f}'.format(resultEuro))
  print("The result of your transfer = ", '{:.2f}'.format(resultYuan))
else:
  print("Error! Enter only 1 or 2")
  exit(0)
root@kvmubuntu:~# python3 Py-CurrencyConverter.py
Dollar exchange rate:  61.3101
Euro exchange rate:  62.5695
Yuan exchange rate:  92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions:
1
Enter the number of rubles: 500
The result of your transfer =  8.16
The result of your transfer =  7.99
The result of your transfer =  5.43
root@kvmubuntu:~# python3 Py-CurrencyConverter.py
Dollar exchange rate:  61.3101
Euro exchange rate:  62.5695
Yuan exchange rate:  92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions:
2
Enter the number of dollars: 1000
Enter the number of euroes: 900
Enter the number of yuans: 100
The result of your transfer =  61310.10
The result of your transfer =  56312.55
The result of your transfer =  9216.36
root@kvmubuntu:~# python3 Py-CurrencyConverter.py
Dollar exchange rate:  61.3101
Euro exchange rate:  62.5695
Yuan exchange rate:  92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions:
3
Error! Enter only 1 or 2
root@kvmubuntu:~# g++ Cpp-CurrencyConverter.cpp -o output
root@kvmubuntu:~# ./output
current dollar data: 61.3101
current euro data: 62.5695
current yuan data: 92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions: 1
Enter the number of rubles: 500
The result of your transfer = 8.15526
The result of your transfer = 7.99111
The result of your transfer = 5.42514
root@kvmubuntu:~# ./output
current dollar data: 61.3101
current euro data: 62.5695
current yuan data: 92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions: 2
Enter the number of dollars: 1000
Enter the number of euroes: 900
Enter the number of yuans: 100
The result of your transfer = 61310.1
The result of your transfer = 56312.6
The result of your transfer = 9216.36
root@kvmubuntu:~# ./output
current dollar data: 61.3101
current euro data: 62.5695
current yuan data: 92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions: 3
Error! Enter only 1 or 2:
Task:
Создайте простой калькулятор, который запускается через терминал.
# Разработка программы на C++.
Decision:
root@kvmubuntu:~# cat Cpp-Calculator.cpp
#include <iostream>
using namespace std;
int main()
{
  string repeat="y";
  while (repeat == "y"){
      int numb1, numb2;
      cout<<("Enter number1: ");
      cin>>numb1;
      cout<<("Enter number2: ");
      cin>>numb2;
      char operation;
      cout<<("Enter the operation: ");
      cin>>operation;
      if (operation == '+')
          cout<<(numb1 + numb2)<<endl;
      else if (operation == '-')
          cout<<(numb1 - numb2)<<endl;
      else if (operation == '*')
          cout<<(numb1 * numb2)<<endl;
      else if (operation == '/'){
          if (numb2 == 0)
              cout<<("You cant divide by zero!")<<endl;
          else
              cout<<(numb1 / numb2)<<endl;
      }else{
          cout<<("Invalid operation")<<endl;
      }
      cout<<("Do you want to continue? (y/n): ");
      cin>>repeat;
      if (repeat == "n"){
          break;
      }
      while (repeat!="y" && repeat!="n"){
          cout<<("Please enter the correct answer (y/n): ");
          cin>>repeat;
      }
  }
  return 0;
}
root@kvmubuntu:~# cat Py-Calculator.py
repeat="y"
while repeat == "y":
    numb1, numb2 = int(input("Enter number1: ")), int(input("Enter number2: "))
    operation = input("Enter the operation: ")
    if operation == '+':
        print(numb1 + numb2)
    elif operation == '-':
        print(numb1 - numb2)
    elif operation == '*':
        print(numb1 * numb2)
    elif operation == '/':
        if numb2 == 0:
            print('You cant divide by zero!')
        else:
            print(numb1 / numb2)
    else:
        print('Invalid operation')
    repeat = input("Do you want to continue? (y/n): ")
    if repeat == "n":
        break
    while (repeat!="y" and repeat!="n"):
        repeat = input("Please enter the correct answer (y/n): ")
root@kvmubuntu:~# python3 Py-Calculator.py
Enter number1: 16
Enter number2: 0
Enter the operation: /
You cant divide by zero!
Do you want to continue? (y/n): t
Please enter the correct answer (y/n): t
Please enter the correct answer (y/n): y
Enter number1: 16
Enter number2: 1
Enter the operation: t
Invalid operation
Do you want to continue? (y/n): y
Enter number1: 16
Enter number2: 1
Enter the operation: -
15
Do you want to continue? (y/n): n
root@kvmubuntu:~# g++ Cpp-Calculator.cpp -o output
root@kvmubuntu:~# ./output
Enter number1: 16
Enter number2: 0
Enter the operation: /
You cant divide by zero!
Do you want to continue? (y/n): t
Please enter the correct answer (y/n): t
Please enter the correct answer (y/n): y
Enter number1: 16
Enter number2: 1
Enter the operation: t
Invalid operation
Do you want to continue? (y/n): y
Enter number1: 16
Enter number2: 1
Enter the operation: -
15
Do you want to continue? (y/n): n
Skills:
# Администрирование локальных, виртуальных и облачных серверов.
# Виртуализация.
# Администрирование баз данных.
Task:
У меня уже были установлены виртуальные машины Ubuntu 22.04 и Windows 10. 
Для наглядности анализа сететевых технлогий нужно еще установить и настроить Centos 9, Kali Linux и Windows 12. 
Места на диске не хватало. Поэтому пришлось подключать еще один физичекий внешний диск.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@aw:/# lsblk
...
sdc 8:32 0 931,5G 0 disk
root@aw:/# fdisk /dev/sdc
...
Команда (m для справки): n
...
Выберите (по умолчанию - p): p
...
root@aw:/# lsblk
...
sdc 8:32 0 931,5G 0 disk
└─sdc1 8:33 0 931,5G 0 part
root@aw:/# mkfs -t ext4 /dev/sdc1
root@aw:/# mount /dev/sdc1 /var/lib/libvirt/images/
root@aw:/# umount /var/lib/libvirt/images/
Task:
Подключение внешнего диска к WSl.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
PS C:\Windows\system32> Start-Process powershell -Verb runAs
PS C:\Windows\system32> wmic diskdrive list brief
Caption                               DeviceID            Model                                 Partitions  Size        
ST1000LM 035-1RK172 SCSI Disk Device  \\.\PHYSICALDRIVE2  ST1000LM 035-1RK172 SCSI Disk Device  1           1000202273280
...
PS C:\Windows\system32> wsl --mount \\.\PHYSICALDRIVE2 --partition 1
PS C:\Windows\system32> wsl
root@aw:/# lsblk
NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
...
└─sdc1   8:33   0 931.5G  0 part /mnt/wsl/PHYSICALDRIVE2p1
...
root@aw:/# ls /mnt/wsl/PHYSICALDRIVE2p1/
Windows10.qcow2
root@aw:/# mount /dev/sdc1 /var/lib/libvirt/images/
root@aw:/# ls /var/lib/libvirt/images/
Windows10.qcow2
Task:
Импорт готовой ОС в Qemu-Kvm.
# Виртуализация. 
Decision:
root@aw:/# virt-install \
--name Windows10 \
--ram 1024 \
--vcpus 4 \
--disk path=/mnt/s/images/Windows10.qcow2,bus=sata \
--import \
--os-variant win10 \
--network default
Task:
Импортировать Kali в Qemu-Kvm.
# Виртуализация.
Decision:
root@aw:/# qemu-img info /var/lib/libvirt/images/Kali.qcow2
root@aw:/# virt-install --os-variant list | grep debian
root@aw:/# virt-install \
--name Kali22 \
--ram 2048 \
--vcpus 2 \
--disk /mnt/s/images/Kali22.qcow2,bus=sata \
--import \
--os-variant debian11 \
--network default
root@aw:/# virt-install \
--name Centos9 \
--ram 2048 \
--vcpus 2 \
--disk /mnt/s/images/Centos9.img,bus=sata \
--import \
--os-variant rhel9-unknown \
--network default
root@aw:/# umount /var/lib/libvirt/images/
PS C:\Windows\system32> wsl.exe --unmount \\.\PHYSICALDRIVE2
Source:
# https://habr.com/ru/news/518806/ - Microsoft добавила в подсистему Windows для Linux 2 (WSL2) возможность монтирования дисков
# https://qna.habr.com/q/861519 - Где находится домашняя директория WSL? 
# https://stackoverflow.com/questions/7690994/running-a-command-as-administrator-using-powershell - Running a command as Administrator using PowerShell?
# https://bozza.ru/art-260.html
Task:
Настройка гостевых дополнений Kali linux в Virtualbox.
# Виртуализация.
Decision:
- https://www.virtualbox.org/wiki/Testbuilds - https://www.virtualbox.org/download/testcase/VBoxGuestAdditions_6.1.29-148369.iso - Virtualbox - Kali Linux - Настройки - Носители - Атрибуты - Выбрать файл диска... - VBoxGuestAdditions_6.1.29-148369.iso - ok - Запустить
┌──(tuser㉿kvmkali)-[~]
└─$ ls /media
cdrom  cdrom0  sf_Downloads
┌──(tuser㉿kvmkali)-[~]
└─$ mount /dev/cdrom /media/cdrom
mount: /media/cdrom0: WARNING: source write-protected, mounted read-only.
┌──(tuser㉿kvmkali)-[~]
└─$ cd /media/cdrom
┌──(tuser㉿kvmkali)-[~]
└─$ ls
AUTORUN.INF  OS2                      VBoxDarwinAdditionsUninstall.tool  VBoxWindowsAdditions.exe
autorun.sh   runasroot.sh             VBoxLinuxAdditions.run             VBoxWindowsAdditions-x86.exe
cert         TRANS.TBL                VBoxSolarisAdditions.pkg           windows11-bypass.reg
NT3x         VBoxDarwinAdditions.pkg  VBoxWindowsAdditions-amd64.exe
┌──(tuser㉿kvmkali)-[~]
└─$ sh VBoxLinuxAdditions.run
┌──(tuser㉿kvmkali)-[~]
└─$ usermod -aG vboxsf server
┌──(tuser㉿kvmkali)-[~]
└─$ adduser kali vboxsf                                      100 ⨯
┌──(tuser㉿kvmkali)-[~]
└─$ reboot
tuser@kvm-tkali:~$ cd /media/sf_Downloads
tuser@kvm-tkali:~$ touch test.txt
tuser@kvm-tkali:~$ ls
AnyDesk.exe             'installer 1c'          SteamSetup.exe                          test.txt
ChromeSetup.exe         'installer qt C++'      sublime_text_build_4121_x64_setup.exe   tsetup-x64.3.2.5.exe
desktop.ini              Lessons               'System Volume Information'              virtualbox
'Firefox Installer.exe'   Skype-8.78.0.159.exe  'Telegram Desktop'                       Yandex.exe
tuser@kvm-tkali:~$ ls test.txt
test.txt
Source:
# https://www.youtube.com/user/itsemaev
Task:
Миграция виртуальных машин с VirtualBox в Qemu-Kvm. 
У руководителя уже установлена тестовая система Windows Server в машине Qemu-Kvm. задача - скопировать у него систему.
# Виртуализация.
Decision:
root@aw:/# vboxmanage list hdds
UUID:           90d93e42-c567-4ff4-8ab8-5a21971604dc
Parent UUID:    base
State:          created
Type:           normal (base)
Location:       /vboximages/Windows2012/Windows2012.vdi
Storage format: VDI
Capacity:       75000 MBytes
Encryption:     disabled
root@aw:/# VBoxManage clonehd /vboximages/Windows2012/Snapshots/\{41cf81da-b2f5-4dfe-9afb-e5c0d5f0d301\}.vdi /vboximages/Windows2012/Windows12.vdi --format VDI --variant Fixed
root@aw:/# qemu-img convert -f vdi /vboximages/Windows2012/Windows12.vdi -O qcow2 /images/Windows12.qcow2
root@aw:/# virt-install --osinfo list
...
win2k12r2
...
root@aw:/# virt-install \
--name Windows12 \
--ram 2048 \
--vcpus=2 \
--import \
--os-variant win2k12r2 \
--disk path=/mnt/s/images/Windows12.qcow2,format=qcow2 \
--network bridge=br0 \
--vnc \
--noautoconsole \
--accelerate 
Task:
Импортировать Windows Server в Qemu-Kvm. 2 Вариант.
# Виртуализация.
Decision:
root@aw:/# virt-install \
--name Windows12 \
--ram 2048 \
--vcpus 2 \
--import \
--os-variant win2k12 \
--disk path=/mnt/s/images/Windows12.qcow2,bus=sata \
--network default
Task:
Миграция виртуальных машин с Qemu-Kvm в VirtualBox.
# Виртуализация.
Decision:
root@aw:/# qemu-img convert -f qcow2 /mnt/s/images/Windows12.qcow2 -O vdi /mnt/s/images/Windows12.vdi
Source:
# https://askubuntu.com/questions/754127/how-to-install-qemu-img-and-use-it-to-convert-a-qcow2-image-to-a-virtual-box - How to install "qemu-img" and use it to convert a "qcow2" image to a Virtual Box one?
# https://ostechnix.com/create-a-kvm-virtual-machine-using-qcow2-image-in-linux/ - Import Qcow2 images using virt-install command.
# https://access.redhat.com/documentation/ru-ru/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/sect-guest_virtual_machine_installation_overview-creating_guests_with_virt_install - Importing a virtual machine image.
Task:
Настройка гостевых дополнений Centos 8 в Virtualbox.
# Виртуализация.
Decision:
[root@kvmcentos ~]# dnf -y update
[root@kvmcentos ~]# dnf -y install perl make bzip2
[root@kvmcentos ~]# dnf -y install kernel-headers
[root@kvmcentos ~]# dnf -y install gcc
[root@kvmcentos ~]# dnf -y install elfutils-libelf-devel
[root@kvmcentos ~]# dnf -y install kernel-devel-$(uname -r)
[root@kvmcentos ~]# poweroff
- https://www.virtualbox.org/wiki/Testbuilds - https://www.virtualbox.org/download/testcase/VBoxGuestAdditions_6.1.29-148369.iso - Virtualbox - Centos 8 Server - Настройки - Носители - Атрибуты - Выбрать файл диска... - VBoxGuestAdditions_6.1.29-148369.iso - ok - Запустить
[root@kvmcentos ~]# cd /media
[root@kvmcentos ~]# mkdir cdrom
[root@kvmcentos ~]# mount /dev/cdrom /media/cdrom/
mount: /media/cdrom: WARNING: device write-protected, mounted read-only.
[root@kvmcentos ~]# ls cdrom/
AUTORUN.INF  OS2                      VBoxDarwinAdditionsUninstall.tool  VBoxWindowsAdditions.exe
autorun.sh   runasroot.sh             VBoxLinuxAdditions.run             VBoxWindowsAdditions-x86.exe
cert         TRANS.TBL                VBoxSolarisAdditions.pkg           windows11-bypass.reg
NT3x         VBoxDarwinAdditions.pkg  VBoxWindowsAdditions-amd64.exe
[root@kvmcentos ~]# cd cdrom/
[root@kvmcentos ~]# sh VBoxLinuxAdditions.run
Verifying archive integrity... All good.
Uncompressing VirtualBox 6.1.29 Guest Additions for Linux........
VirtualBox Guest Additions installer
Copying additional installer modules ...
Installing additional modules ...
VirtualBox Guest Additions: Starting.
VirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel
modules.  This may take a while.
VirtualBox Guest Additions: To build modules for other installed kernels, run
VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup <version>
VirtualBox Guest Additions: or
VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup all
VirtualBox Guest Additions: Kernel headers not found for target kernel
4.18.0-348.2.1.el8_5.x86_64. Please install them and execute
/sbin/rcvboxadd setup
modprobe vboxguest failed
The log file /var/log/vboxadd-setup.log may contain further information.
[root@kvmcentos ~]# uname -r
4.18.0-348.2.1.el8_5.x86_64
[root@kvmcentos ~]# ls /usr/src/kernels/
4.18.0-348.el8.x86_64
[root@kvmcentos ~]# dnf -y install "kernel-devel-uname-r == $(uname -r)"
[root@kvmcentos ~]# ls /usr/src/kernels
4.18.0-348.2.1.el8_5.x86_64  4.18.0-348.el8.x86_64
[root@kvmcentos ~]# ls
AUTORUN.INF  OS2                      VBoxDarwinAdditionsUninstall.tool  VBoxWindowsAdditions.exe
autorun.sh   runasroot.sh             VBoxLinuxAdditions.run             VBoxWindowsAdditions-x86.exe
cert         TRANS.TBL                VBoxSolarisAdditions.pkg           windows11-bypass.reg
NT3x         VBoxDarwinAdditions.pkg  VBoxWindowsAdditions-amd64.exe
[root@kvmcentos ~]# sh VBoxLinuxAdditions.run
Verifying archive integrity... All good.
Uncompressing VirtualBox 6.1.29 Guest Additions for Linux........
VirtualBox Guest Additions installer
Removing installed version 6.1.29 of VirtualBox Guest Additions...
Copying additional installer modules ...
Installing additional modules ...
VirtualBox Guest Additions: Starting.
VirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel
modules.  This may take a while.
VirtualBox Guest Additions: To build modules for other installed kernels, run
VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup <version>
VirtualBox Guest Additions: or
VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup all
VirtualBox Guest Additions: Building the modules for kernel
4.18.0-348.2.1.el8_5.x86_64.
ValueError: File context for /opt/VBoxGuestAdditions-6.1.29/other/mount.vboxsf already defined
[root@kvmcentos ~]# reboot
Task:
Настроить удаленнное подключение к виртуальной машине чере rdp.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@aw:/# dnf install rdesktop
root@aw:/# rdesktop tipwindows -u tuser -p tpassword -g 1400x900 &
Task:
Перенести базу данных на другой физический диск.
# Администрирование баз данных.
Decision:
root@aw:/# systemctl stop postgresql
root@aw:/# -i -u postgres
root@aw:/# cp -r 14 14.backup
root@aw:/# ls -l
итого 8
drwxr-xr-x 3 postgres postgres 4096 фев 25 19:33 14
drwxr-xr-x 3 postgres postgres 4096 фев 25 19:57 14.backup
root@aw:/# mount /dev/sdc1 /var/lib/postgresql/14
root@aw:/# cp -pr /var/lib/postgresql/14.backup /var/lib/postgresql/14/
root@aw:/# mv /var/lib/postgresql/14/14.backup /var/lib/postgresql/14/14
root@aw:/# ls -l /var/lib/postgresql/14
итого 87992628
drwxr-xr-x 3 postgres postgres4096 фев 25 19:57 14
drwx------ 2 root root 16384 фев 21 20:50 lost+found
-rw------- 1 tuser tuser 90104397824 фев 24 19:44 ubuntu22.04.qcow2
root@aw:/# umount /var/lib/postgresql/14
root@aw:/# mount /dev/sdc1 /var/lib/postgresql
root@aw:/# systemctl start postgresql
root@aw:/# -u tuser psql -d tdb
# \d
 List of relations
Schema | Name | Type | Owner
--------+--------+-------+-------
public | cities | table | tuser
(1 row)
# CREATE TABLE countries (
 namevarchar(80),
 locationpoint
);
# exit
root@aw:/# systemctl stop postgresql
root@aw:/# umount /var/lib/postgresql
root@aw:/# systemctl start postgresql
Source:
# https://etogeek.dev/posts/move-psql/ - Перенос базы.
# https://www.linux.org.ru/forum/general/8186570 - копирование файлов с правами и пользователями. 
Task:
Install and configure an FTP server. Securing the connection to the FTP server.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# dnf update -y
[root@kvmcentos ~]# dnf install vsftpd -y
[root@kvmcentos ~]# systemctl enable vsftpd --now
[root@kvmcentos ~]# systemctl status vsftpd
[root@kvmcentos ~]# useradd -m -d "/home/ftpuser" ftpuser
[root@kvmcentos ~]# passwd ftpuser
[root@kvmcentos ~]# mkdir -p /home/ftpuser/shared
[root@kvmcentos ~]# chmod -R 750 /home/ftpuser/shared
[root@kvmcentos ~]# chown ftpuser: /home/ftpuser/shared
[root@kvmcentos ~]# vim /etc/vsftpd/user_list
[root@kvmcentos ~]# cat /etc/vsftpd/user_list | grep ftp
ftpuser
[root@kvmcentos ~]# vim /etc/vsftpd/vsftpd.conf
[root@kvmcentos ~]# cat /etc/vsftpd/vsftpd.conf
...
anonymous_enable=NO
local_enable=YES
write_enable=YES
chroot_local_user=YES
allow_writeable_chroot=YES
pasv_min_port=31500
pasv_max_port=32500
userlist_file=/etc/vsftpd/user_list
userlist_deny=NO
[root@kvmcentos ~]# systemctl restart vsftpd
[root@kvmcentos ~]# openssl req -x509 -nodes -days 3650 \
-newkey rsa:2048 -keyout /etc/vsftpd.pem \
-out /etc/vsftpd/vsftpd.pem
[root@kvmcentos ~]# vim /etc/vsftpd/vsftpd.conf
[root@kvmcentos ~]# cat /etc/vsftpd/vsftpd.conf
...
#rsa_cert_file=/etc/vsftpd/vsftpd.pem
#rsa_private_key_file=/etc/vsftpd.pem
#ssl_enable=YES
[root@kvmcentos ~]# systemctl restart vsftpd
[root@kvmcentos ~]# cat /etc/sysconfig/iptables
# Generated by iptables-save v1.8.8 (nf_tables) on Sun Oct 22 12:10:33 2023
*mangle
:PREROUTING ACCEPT [45:3316]
:INPUT ACCEPT [45:3316]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [34:5048]
:POSTROUTING ACCEPT [34:5048]
COMMIT
# Completed on Sun Oct 22 12:10:33 2023
# Generated by iptables-save v1.8.8 (nf_tables) on Sun Oct 22 12:10:33 2023
*raw
:PREROUTING ACCEPT [45:3316]
:OUTPUT ACCEPT [34:5048]
COMMIT
# Completed on Sun Oct 22 12:10:33 2023
# Generated by iptables-save v1.8.8 (nf_tables) on Sun Oct 22 12:10:33 2023
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
-A INPUT -i lo -j ACCEPT
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p tcp -m multiport --dports 21,22,25,53,80,143,443 -j ACCEPT
-A INPUT -p udp -m multiport --dports 53,21,20 -j ACCEPT
-A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
-A OUTPUT -o lo -j ACCEPT
-A OUTPUT -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT
COMMIT
# Completed on Sun Oct 22 12:10:33 2023
# Generated by iptables-save v1.8.8 (nf_tables) on Sun Oct 22 12:10:33 2023
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
COMMIT
# Completed on Sun Oct 22 12:10:33 2023
[root@kvmcentos ~]# iptables -t filter -A INPUT -p tcp --dport 20:21 -j ACCEPT
[root@kvmcentos ~]# iptables -t filter -A INPUT -p tcp --dport 31500:32500 -j ACCEPT
[root@kvmcentos ~]# service iptables save
[root@kvmcentos ~]# systemctl restart iptables
┌──(tuser㉿kvmkali)-[~]
└─$ telnet tipcentos 21
USER ftpuser
PASS tpassword
PWD
PASV
227 Entering Passive Mode (tipcentos,126,61).
┌──(tuser㉿kvmkali)-[~]
└─$ 126*256+61 
32317
┌──(tuser㉿kvmkali)-[~]
└─$ telnet tipcentos 32317
LIST
drwxr-x--- 2 1001 1001 6 Oct 21 03:06 shared
QUIT
Task:
Запрещаем доступ к фтп всем пользователям, кроме пользователя с MAC-адресом tmacubuntu.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# ifconfig | grep tmacubuntu
ether tmacubuntu txqueuelen 1000 (Ethernet)
[root@kvmcentos ~]# iptables -I INPUT -p tcp --dport 21 -m mac ! --mac-source tmacubuntu -j REJECT
[root@kvmcentos ~]# service iptables save
[root@kvmcentos ~]# systemctl restart iptables
root@kvmubuntu:~# ftp tipcentos
Name (tipcentos:user): ftpuser
Password:
ftp> ls
drwxr-x--- 2 1001 1001 6 Oct 21 03:06 shared
ftp> exit
┌──(tuser㉿kvmkali)-[~]
└─$ ftp tipcentos
ftp: Can't connect to `tipcentos:21': Connection refused
ftp: Can't connect to `tipcentos:ftp'
ftp> exit
┌──(tuser㉿kvmkali)-[~]
└─$ telnet tipcentos 21
Trying tipcentos...
telnet: Unable to connect to remote host: Connection refused
Source:
# https://unixcop.com/how-to-install-and-configure-an-ftp-server-on-centos-9-stream/
# https://losst.pro/kak-otkryt-port-iptables?ysclid=lnvrpgxwj8175390861
# https://techviewleo.com/configure-vsftpd-ftp-server-on-ubuntu-linux/
# https://stackoverflow.com/questions/38523250/vsftpd-login-is-not-successful
Task:
Install Nginx.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# dnf update -y
[root@kvmcentos ~]# dnf install nginx
[root@kvmcentos ~]# systemctl start nginx
[root@kvmcentos ~]# systemctl enable nginx
[root@kvmcentos ~]# nginx -v
[root@kvmcentos ~]# firefox http://tipcentos:80/
Source:
# https://devcoops.com/install-nginx-on-centos-9-stream/ - Install Nginx.
Task:
Configure Squid Proxy Kali.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
┌──(tuser㉿kvmkali)-[~]
└─$ apt update
┌──(tuser㉿kvmkali)-[~]
└─$ apt install squid
┌──(tuser㉿kvmkali)-[~]
└─$ systemctl start squid
┌──(tuser㉿kvmkali)-[~]
└─$ systemctl enable squid
┌──(tuser㉿kvmkali)-[~]
└─$ grep -Eiv '(^#|^$)' /etc/squid/squid.conf
acl localnet src 0.0.0.1-0.255.255.255 # RFC 1122 "this" network (LAN)
acl localnet src 10.0.0.0/8 # RFC 1918 local private network (LAN)
acl localnet src 100.64.0.0/10 # RFC 6598 shared address space (CGN)
acl localnet src 169.254.0.0/16 # RFC 3927 link-local (directly plugged) machines
acl localnet src 172.16.0.0/12 # RFC 1918 local private network (LAN)
acl localnet src tipkali.0.0/16 # RFC 1918 local private network (LAN)
acl localnet src fc00::/7 # RFC 4193 local private network range
acl localnet src fe80::/10 # RFC 4291 link-local (directly plugged) machines
acl SSL_ports port 443
acl Safe_ports port 80 # http
acl Safe_ports port 21 # ftp
acl Safe_ports port 443 # https
acl Safe_ports port 70 # gopher
acl Safe_ports port 210 # wais
acl Safe_ports port 1025-65535 # unregistered ports
acl Safe_ports port 280 # http-mgmt
acl Safe_ports port 488 # gss-http
acl Safe_ports port 591 # filemaker
acl Safe_ports port 777 # multiling http
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
http_access allow localhost
http_access deny to_localhost
http_access deny to_linklocal
include /etc/squid/conf.d/*.conf
http_access deny all
http_port 3128
coredump_dir /var/spool/squid
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320
┌──(tuser㉿kvmkali)-[~]
└─$ mv /etc/squid/squid.conf /etc/squid/squid.conf.bac
┌──(tuser㉿kvmkali)-[~]
└─$ vim /etc/squid/squid.conf
┌──(tuser㉿kvmkali)-[~]
└─$ cat /etc/squid/squid.conf
acl localnet src tipkali
http_access allow localnet
http_port 3128
┌──(tuser㉿kvmkali)-[~]
└─$ systemctl restart squid
┌──(tuser㉿kvmkali)-[~]
└─$ cat /var/log/squid/access.log
1698153952.395 1 tipkali NONE_NONE/400 3816 - / - HIER_NONE/- text/html
1698153953.958 7 tipkali TCP_DENIED/403 4185 GET http://kali:3128/squid-internal-static/icons/SN.png - HIER_NONE/- text/html
...
1698154905.087 2 tipkali TCP_MISS/400 3889 GET http://tipkali:3128/ - HIER_DIRECT/tipkali text/html
1698154906.698 149 tipkali TCP_TUNNEL/200 39 CONNECT static.vk.com:443 - HIER_DIRECT/87.240.137.164 -
1698154906.796 0 tipkali NONE_NONE/400 3838 - /favicon.ico - HIER_NONE/- text/html
1698154906.797 2 tipkali TCP_MISS/400 3911 GET http://tipkali:3128/favicon.ico - HIER_DIRECT/tipkali text/html
┌──(tuser㉿kvmkali)-[~]
└─$ apt install apache2-utils
┌──(tuser㉿kvmkali)-[~]
└─$ htpasswd -c /etc/squid/passwd user
┌──(tuser㉿kvmkali)-[~]
└─$ vim /etc/squid/squid.conf
┌──(tuser㉿kvmkali)-[~]
└─$ cat /etc/squid/squid.conf
#acl localnet src tipkali
#http_access allow localnet
http_port 3128
via off
auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/passwd
auth_param basic children 5
auth_param basic credentialsttl 2 hours
auth_param basic casesensitive on
auth_param basic realm Squid proxy for kali
acl auth_users proxy_auth REQUIRED
http_access allow auth_users
┌──(tuser㉿kvmkali)-[~]
└─$ systemctl restart squid
Task:
Configure Squid Proxy Centos.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# dnf install squid
[root@kvmcentos ~]# systemctl enable --now squid
[root@kvmcentos ~]# grep -Eiv '(^#|^$)' /etc/squid/squid.conf
acl localnet src 0.0.0.1-0.255.255.255 # RFC 1122 "this" network (LAN)
acl localnet src 10.0.0.0/8 # RFC 1918 local private network (LAN)
acl localnet src 100.64.0.0/10 # RFC 6598 shared address space (CGN)
acl localnet src 169.254.0.0/16 # RFC 3927 link-local (directly plugged) machines
acl localnet src 172.16.0.0/12 # RFC 1918 local private network (LAN)
acl localnet src tipcentos/16 # RFC 1918 local private network (LAN)
acl localnet src fc00::/7 # RFC 4193 local private network range
acl localnet src fe80::/10 # RFC 4291 link-local (directly plugged) machines
acl SSL_ports port 443
acl Safe_ports port 80 # http
acl Safe_ports port 21 # ftp
acl Safe_ports port 443 # https
acl Safe_ports port 70 # gopher
acl Safe_ports port 210 # wais
acl Safe_ports port 1025-65535 # unregistered ports
acl Safe_ports port 280 # http-mgmt
acl Safe_ports port 488 # gss-http
acl Safe_ports port 591 # filemaker
acl Safe_ports port 777 # multiling http
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
http_access allow localnet
http_access allow localhost
http_access deny all
http_port 3128
coredump_dir /var/spool/squid
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320
[root@kvmcentos ~]# mv /etc/squid/squid.conf /etc/squid/squid.conf.bac
[root@kvmcentos ~]# vim /etc/squid/squid.conf
[root@kvmcentos ~]# cat /etc/squid/squid.conf
acl localnet src tipcentos
acl localnet src tipcentos.0/32
acl Safe_ports port 80
acl Safe_ports port 443
cache_dir ufs /var/spool/squid 1000 16 256
http_access allow localnet
http_port 3128
[root@kvmcentos ~]# systemctl restart squid
[root@kvmcentos ~]# iptables -t filter -A INPUT -p tcp --dport 3128 -j ACCEPT
[root@kvmcentos ~]# service iptables save
[root@kvmcentos ~]# systemctl restart iptables.service
[root@kvmcentos ~]# curl -O -L "https://www.redhat.com/index.html" -x "tipcentos:3128"
% Total % Received % Xferd Average Speed Time Time Time Current
  Dload Upload Total Spent Left Speed
0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0
100 156k 0 156k 0 0 147k 0 --:--:-- 0:00:01 --:--:-- 795k
┌──(tuser㉿kvmkali)-[~]
└─$ nmap tipcentos
...
PORT STATE SERVICE
20/tcp closed ftp-data
21/tcp open ftp
22/tcp open ssh
25/tcp closed smtp
53/tcp closed domain
80/tcp open http
143/tcp closed imap
443/tcp closed https
3128/tcp open squid-http
...
[root@kvmcentos ~]# dnf install httpd-tools
[root@kvmcentos ~]# touch /etc/squid/passwd
[root@kvmcentos ~]# chown squid /etc/squid/passwd
[root@kvmcentos ~]# htpasswd /etc/squid/passwd proxyuser
[root@kvmcentos ~]# vim /etc/squid/squid.conf
[root@kvmcentos ~]# cat /etc/squid/squid.conf
#acl localnet src tipcentos
#acl localnet src tip.0/32
#acl Safe_ports port 80
#acl Safe_ports port 443
#cache_dir ufs /var/spool/squid 1000 16 256
#http_access allow localnet
http_port 3128
auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd
auth_param basic children 5
auth_param basic realm Squid Basic Authentication
auth_param basic credentialsttl 2 hours
acl auth_users proxy_auth REQUIRED
http_access allow auth_users
[root@kvmcentos ~]# systemctl restart squid
[root@kvmcentos ~]# curl -O -L "https://www.redhat.com/index.html" -x "proxyuser:tpassword@tipcentos:3128"
% Total % Received % Xferd Average Speed Time Time Time Current
  Dload Upload Total Spent Left Speed
0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0
100 156k 0 156k 0 0 124k 0 --:--:-- 0:00:01 --:--:-- 562k
Source:
# https://support.mozilla.org/ru/kb/parametry-soedineniya-v-firefox
# https://techviewleo.com/configure-squid-proxy-on-centos-almalinux-rhel/
Task:
Перенаправление пакетов, идущих на 80-й порт, на стандартный порт прокси-сервера.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# iptables -t nat -A PREROUTING -s tipcentos.0 -p tcp --dport 80 -j REDIRECT --to-port 3128
[root@kvmcentos ~]# service iptables save
[root@kvmcentos ~]# systemctl restart iptables.service
Task:
Предоставляем доступ из Интернет к веб-серверу, который расположен в локальной сети (проброс порта). Вместо tipubuntu укажите IP-адрес вашего веб-сервера.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination tipubuntu:80
[root@kvmcentos ~]# service iptables save
[root@kvmcentos ~]# systemctl restart iptables.service
Task:
Настройка Proxy-сервера. Включаем маскарадинг для доступа в Интернет пользователей локальной сети.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# iptables -t nat -A POSTROUTING -o enp1s0 -s tipubuntu.0/32 -j MASQUERADE
[root@kvmcentos ~]# service iptables save
[root@kvmcentos ~]# systemctl restart iptables.service
Task:
Блокировка подозрительных IP-адресов.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# iptables -A INPUT -s tipkali -j DROP
[root@kvmcentos ~]# service iptables save
[root@kvmcentos ~]# systemctl restart iptables.service
Task:
Установка и настройка tripwire.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# dnf -y install epel-releasey
[root@kvmcentos ~]# dnf -y install tripwire
[root@kvmcentos ~]# tripwire-setup-keyfiles
[root@kvmcentos ~]# tripwire --init
...
### Warning: File system error.
### Filename: /proc/pci
### Нет такого файла или каталога
### Continuing...
...
[root@kvmcentos ~]# cat /etc/tripwire/twpol.txt
...
/proc/pci -> root@aw:/#(Device) ;
...
[root@kvmcentos ~]# vim /etc/tripwire/twpol.txt
[root@kvmcentos ~]# cat /etc/tripwire/twpol.txt
...
#/proc/pci -> root@aw:/#(Device) ;
...
[root@kvmcentos ~]# tripwire --update-policy --secure-mode low /etc/tripwire/twpol.txt
[root@kvmcentos ~]# tripwire --check —interactive
Task:
Создаем конфигурацию, Создаем базу данных.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# ls /etc/tripwire/
centos-local.key site.key tw.cfg twcfg.txt tw.pol tw.pol.bak twpol.txt
[root@kvmcentos ~]# twadmin -m F -c /etc/tripwire/tw.cfg -S /etc/tripwire/site.key /etc/tripwire/twcfg.txt
[root@kvmcentos ~]# vim /etc/tripwire/twpolmake.pl
[root@kvmcentos ~]# cat /etc/tripwire/twpolmake.pl
#!/usr/bin/perl
# Tripwire Policy File customize tool
# ----------------------------------------------------------------
# Copyright (C) 2003 Hiroaki Izumi
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# ----------------------------------------------------------------
# Usage:
# perl twpolmake.pl {Pol file}
# ----------------------------------------------------------------
#
root@aw:/#POLFILE=root@aw:/#ARGV[0];
open(POL,"root@aw:/#POLFILE") or die "open error: root@aw:/#POLFILE" ;
my(root@aw:/#myhost,$kvm-tcentos) ;
my(root@aw:/#sharp,root@aw:/#tpath,root@aw:/#cond) ;
my(root@aw:/#INRULE) = 0 ;
while (<POL>) {
chomp;
if (($kvm-tcentos) = /^HOSTNAME\s*=\s*(.*)\s*;/) {
root@aw:/#myhost = `hostname` ; chomp(root@aw:/#myhost) ;
if ($kvm-tcentos ne root@aw:/#myhost) {
root@aw:/#_="HOSTNAME=\"root@aw:/#myhost\";" ;
}
}
elsif ( /^{/ ) {
root@aw:/#INRULE=1 ;
}
elsif ( /^}/ ) {
root@aw:/#INRULE=0 ;
}
elsif (root@aw:/#INRULE == 1 and (root@aw:/#sharp,root@aw:/#tpath,root@aw:/#cond) = /^(\s*\#?\s*)(\/\S+)\b(\s+->\s+.+)root@aw:/#/) {
root@aw:/#ret = (root@aw:/#sharp =~ s/\#//g) ;
if (root@aw:/#tpath eq '/sbin/e2fsadm' ) {
root@aw:/#cond =~ s/;\s+(tune2fs.*)root@aw:/#/; \#root@aw:/#1/ ;
}
if (! -s root@aw:/#tpath) {
root@aw:/#_ = "root@aw:/#sharp#root@aw:/#tpathroot@aw:/#cond" if (root@aw:/#ret == 0) ;
}
else {
root@aw:/#_ = "root@aw:/#sharproot@aw:/#tpathroot@aw:/#cond" ;
}
}
print "root@aw:/#_\n" ;
}
close(POL) ;
[root@kvmcentos ~]# perl /etc/tripwire/twpolmake.pl /etc/tripwire/twpol.txt > /etc/tripwire/twpol.txt.new
[root@kvmcentos ~]# twadmin -m P -c /etc/tripwire/tw.cfg -p /etc/tripwire/tw.pol -S /etc/tripwire/site.key /etc/tripwire/twpol.txt.new
[root@kvmcentos ~]# tripwire -m i -s -c /etc/tripwire/tw.cfg
[root@kvmcentos ~]# tripwire -m c -s -c /etc/tripwire/tw.cfg
Open Source Tripwire(R) 2.4.3.7 Integrity Check Report
Report generated by: root
Report created on: Вс 29 окт 2023 14:26:04
Database last updated on: Never
...
===============================================================================
Object Summary:
===============================================================================
-------------------------------------------------------------------------------
# Section: Unix File System
-------------------------------------------------------------------------------
No violations.
===============================================================================
Error Report:
===============================================================================
...
[root@kvmcentos ~]# ls /var/lib/tripwire/report
итого 28
-rw-r--r--. 1 root root 350 окт 29 13:55 centos-20231029-135511.twr
-rw-r--r--. 1 root root 350 окт 29 13:57 centos-20231029-135712.twr
-rw-r--r--. 1 root root 350 окт 29 14:00 centos-20231029-140029.twr
-rw-r--r--. 1 root root 350 окт 29 14:08 centos-20231029-140853.twr
-rw-r--r--. 1 root root 350 окт 29 14:09 centos-20231029-140919.twr
-rw-r--r--. 1 root root 6446 окт 29 14:27 centos-20231029-142604.twr
Task:
Проверим на работоспособность утилиты Tripwire. Создав файл в системе, утилита должна показать, что добавлен был файл.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# touch /var/lib/tripwire/tfile.txt
[root@kvmcentos ~]# tripwire -m c -s -c /etc/tripwire/tw.cfg
Open Source Tripwire(R) 2.4.3.7 Integrity Check Report
...
-------------------------------------------------------------------------------
Rule Name: Tripwire Data Files (/var/lib/tripwire)
Severity Level: 100
-------------------------------------------------------------------------------
Added:
"/var/lib/tripwire/tfile.txt"
===============================================================================
Error Report:
===============================================================================
...
Source:
# https://linux-notes.org/ustanovka-i-nastrojka-tripwire-v-centos-redhat-fedora/?ysclid=loazeq8vjc96566460
# https://www.server-world.info/en/note?os=CentOS_7&p=tripwire
# https://www.lisenet.com/2017/configure-tripwire-on-centos-7/
Task:
Добавьте 2 диска по 1Гб к виртуалке. 
На первом диске создайте ТР MBR и 3 основных раздела по 50Мб, на втором ТР GPT и 2 раздела по 100Мб. 
Сохраните и покажите список разделов.
# Виртуализация.
Decision:
[root@kvmcentos ~]# poweroff
- VirtualBox - Настроить - Носители - Контроллер SATA - Добавить жесткий диск - Создать - 1гб - выбрать - ок - запустить
[root@kvmcentos ~]# lsscsi -s
[1:0:0:0]    cd/dvd  VBOX     CD-ROM           1.0   /dev/sr0   61.1MB
[2:0:0:0]    disk    ATA      VBOX HARDDISK    1.0   /dev/sda   53.6GB
[3:0:0:0]    disk    ATA      VBOX HARDDISK    1.0   /dev/sdb   1.07GB
[4:0:0:0]    disk    ATA      VBOX HARDDISK    1.0   /dev/sdc   1.07GB
[root@kvmcentos ~]# fdisk /dev/sdb
...
Command (m for help): m
...
Generic
 n   add a new partition
 p   print the partition table
Save & Exit
 w   write table to disk and exit
Create a new label
 g   create a new empty GPT partition table
 o   create a new empty DOS partition table
Command (m for help): p
Disk /dev/sdb: 1 GiB, 1073741824 bytes, 2097152 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x357e75ef
Command (m for help): o
Created a new DOS disklabel with disk identifier 0x87f777ab.
Command (m for help): n
Partition type
 p   primary (0 primary, 0 extended, 4 free)
 e   extended (container for logical partitions)
Select (default p): p
Partition number (1-4, default 1): 3
First sector (2048-2097151, default 2048):
Last sector, +sectors or +size{K,M,G,T,P} (2048-2097151, default 2097151): +50M
Created a new partition 3 of type 'Linux' and of size 50 MiB.
Command (m for help): n
Partition type
 p   primary (1 primary, 0 extended, 3 free)
 e   extended (container for logical partitions)
Select (default p): p
Partition number (1,2,4, default 1): 1
First sector (104448-2097151, default 104448):
Last sector, +sectors or +size{K,M,G,T,P} (104448-2097151, default 2097151): +50M
Created a new partition 1 of type 'Linux' and of size 50 MiB.
Command (m for help): n
Partition type
 p   primary (2 primary, 0 extended, 2 free)
 e   extended (container for logical partitions)
Select (default p): p
Partition number (2,4, default 2): 2
First sector (206848-2097151, default 206848):
Last sector, +sectors or +size{K,M,G,T,P} (206848-2097151, default 2097151): +50M
Created a new partition 2 of type 'Linux' and of size 50 MiB.
Command (m for help): p
Disk /dev/sdb: 1 GiB, 1073741824 bytes, 2097152 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x87f777ab
Device     Boot  Start    End Sectors Size Id Type
/dev/sdb1       104448 206847  102400  50M 83 Linux
/dev/sdb2       206848 309247  102400  50M 83 Linux
/dev/sdb3         2048 104447  102400  50M 83 Linux
Partition table entries are not in disk order.
Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.
[root@kvmcentos ~]# fdisk /dev/sdc
Command (m for help): p
Disk /dev/sdc: 1 GiB, 1073741824 bytes, 2097152 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x275ab546
Command (m for help): g
Created a new GPT disklabel (GUID: 1ED9FC80-4FEE-934E-A504-725D4C9F611F).
Command (m for help): n
Partition number (1-128, default 1): 1
First sector (2048-2097118, default 2048):
Last sector, +sectors or +size{K,M,G,T,P} (2048-2097118, default 2097118): +100M
Created a new partition 1 of type 'Linux filesystem' and of size 100 MiB.
Command (m for help): n
Partition number (2-128, default 2): 2
First sector (206848-2097118, default 206848):
Last sector, +sectors or +size{K,M,G,T,P} (206848-2097118, default 2097118): +100M
Created a new partition 2 of type 'Linux filesystem' and of size 100 MiB.
Command (m for help): p
Disk /dev/sdc: 1 GiB, 1073741824 bytes, 2097152 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 1ED9FC80-4FEE-934E-A504-725D4C9F611F
Device      Start    End Sectors  Size Type
/dev/sdc1    2048 206847  204800  100M Linux filesystem
/dev/sdc2  206848 411647  204800  100M Linux filesystem
Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.
[root@kvmcentos ~]# fdisk -l /dev/sdb
Disk /dev/sdb: 1 GiB, 1073741824 bytes, 2097152 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x87f777ab
Device     Boot  Start    End Sectors Size Id Type
/dev/sdb1       104448 206847  102400  50M 83 Linux
/dev/sdb2       206848 309247  102400  50M 83 Linux
/dev/sdb3         2048 104447  102400  50M 83 Linux
Partition table entries are not in disk order.
[root@kvmcentos ~]# fdisk -l /dev/sdc
Disk /dev/sdc: 1 GiB, 1073741824 bytes, 2097152 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 1ED9FC80-4FEE-934E-A504-725D4C9F611F
Device      Start    End Sectors  Size Type
/dev/sdc1    2048 206847  204800  100M Linux filesystem
/dev/sdc2  206848 411647  204800  100M Linux filesystem
Task:
Добавьте на первом диске ещё 2 раздела по 100Мб, при этом не удаляя ранее созданные разделы.
# Виртуализация.
Decision:
Command (m for help): p
Disk /dev/sdb: 1 GiB, 1073741824 bytes, 2097152 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x87f777ab
Device     Boot  Start    End Sectors Size Id Type
/dev/sdb1       104448 206847  102400  50M 83 Linux
/dev/sdb2       206848 309247  102400  50M 83 Linux
/dev/sdb3         2048 104447  102400  50M 83 Linux
Partition table entries are not in disk order.
Command (m for help): n
Partition type
 p   primary (3 primary, 0 extended, 1 free)
 e   extended (container for logical partitions)
Select (default e): e
Selected partition 4
First sector (309248-2097151, default 309248):
Last sector, +sectors or +size{K,M,G,T,P} (309248-2097151, default 2097151): +100M
Created a new partition 4 of type 'Extended' and of size 100 MiB.
Command (m for help): n
All primary partitions are in use.
Adding logical partition 5
First sector (311296-514047, default 311296):
Last sector, +sectors or +size{K,M,G,T,P} (311296-514047, default 514047): +100M
Value out of range.
Last sector, +sectors or +size{K,M,G,T,P} (311296-514047, default 514047):
Created a new partition 5 of type 'Linux' and of size 99 MiB.
Command (m for help): p
Disk /dev/sdb: 1 GiB, 1073741824 bytes, 2097152 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x87f777ab
Device     Boot  Start    End Sectors  Size Id Type
/dev/sdb1       104448 206847  102400   50M 83 Linux
/dev/sdb2       206848 309247  102400   50M 83 Linux
/dev/sdb3         2048 104447  102400   50M 83 Linux
/dev/sdb4       309248 514047  204800  100M  5 Extended
/dev/sdb5       311296 514047  202752   99M 83 Linux
Partition table entries are not in disk order.
Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.
Task:
Удалите со второго диска второй раздел.
# Виртуализация.
Decision:
[root@kvmcentos ~]# fdisk /dev/sdc
Welcome to fdisk (util-linux 2.32.1).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.
Command (m for help): d
Partition number (1,2, default 2): 2
Partition 2 has been deleted.
Command (m for help): p
Disk /dev/sdc: 1 GiB, 1073741824 bytes, 2097152 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 1ED9FC80-4FEE-934E-A504-725D4C9F611F
Device     Start    End Sectors  Size Type
/dev/sdc1   2048 206847  204800  100M Linux filesystem
Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.
Task:
Добавьте сетевой адаптер (Host-only) через гипервизор. Настройте статический ip адрес в виртуальной машине на этом интерфейсе, в качестве dns и gateway укажите адрес хоста.
# Виртуализация.
Decision:
- Virtualbox - Файл - Настройки - Сеть - Добавить новую Нат сеть - Ok - настроить - виртуальный адаптер хоста - Инструменты - Менеджер сетей хоста - Создать - DHCP - +Включен - Centos - Настроить - Сеть - Тип подключения - Виртуальный адаптер хоста - vboxnet0 - ок - запустить
Task:
так как сеть мы в virtualbox подключили через nat, тогда нам нужно пробросить порт в virtualbox.
# Виртуализация.
Decision:
- VirtualBox - дополнительно проброс портов - + - Если я подkлючaюсь на свою машину на любой адрес (если несколько адресов на моей машине), то допустим на порт хоста 2222 (надо чтобы этот порт был открыт физически на вашей реальной машине), назовем его ssh to ubuntu (имя), и я хочу пробрасывать это на любой адрес моей машины с убунту на порт гостя 22 (ssh слушает порт 22) - putty - я могу подключиться на адрес 127.0.0.1 в host name на порт 2222 - подkлючаемся
root@kvmubuntu:~# ifconfig
Task:
Протестировать диск.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# apt update 
root@kvmubuntu:~# apt install testdisk
root@kvmubuntu:~# lsblk
 ...
 sdc      8:32   0 931,5G  0 disk 
└─sdc1   8:33   0 931,5G  0 part /media/dato/Файлы
root@kvmubuntu:~# testdisk
...
>[ Create ] Create a new log file
...
Select a media (use Arrow keys, then press Enter):
...
>Disk /dev/sdc - 1000 GB / 931 GiB - ST1000LM 035-1RK172
...
 [Previous]  [  Next  ] >[Proceed ]  [  Quit  ]
...
Please select the partition table type, press Enter when done.
...
>[EFI GPT] EFI GPT partition map (Mac i386, some x86_64...)
...
>[ Analyse  ] Analyse current partition structure and search for lost partitions
...
>[Quick Search]  [ Backup ]
...
>P MS Data                     2048 1953523711 1953521664
...
 1 P MS Data                     2048 1953523711 1953521664
...
 [  Quit  ]  [ Return ] >[Deeper Search]  [ Write  ]
Source:
# https://www.8host.com/blog/ustanovka-testdisk-i-vosstanovlenie-fajlov/?ysclid=lwwuyo1ydf377479189
Task:
Сколько места занимает на диске.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# du -h ~/
root@kvmubuntu:~# du --max-depth 1 -h .
root@kvmubuntu:~# apt-get -y install ncdu
root@kvmubuntu:~# ncdu
Task:
определить в текущей папке занимаемое место всеми подкаталогами и файлами.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# du -sm *
Task:
отсортировать результаты, чтобы выяснить, чем занято место в конкретной папке или на всем разделе.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# du -sm * | sort -n
root@kvmubuntu:~# du -smh *
Task:
Найдите самую большую директорию в корне.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# du -sh /* | sort -h | tail -3
Task:
Напишите команду, которая выведет сколько места на диске занимает текущая директория (при этом размер нужно вывести в удобном для чтения формате (например, вместо 2048 байт надо выводить 2.0К) и больше на экран выводить ничего не нужно).
# Администрирование локальных, виртуальных и облачных серверов.
Decision.
root@kvmubuntu:~# du -hs
938M
Task:
Узнать сколько места занято/свободно во всей системе.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# df -h
Filesystem Size Used Avail Use% Mounted on
tmpfs 196M 1.6M 195M 1% /run
/dev/sda349G 31G 16G 67% /
tmpfs 980M 0 980M 0% /dev/shm
tmpfs 5.0M 4.0K 5.0M 1% /run/lock
/dev/sda2 512M 6.1M 506M 2% /boot/efi
tmpfs 196M 76K 196M 1% /run/user/127
tmpfs 196M 64K 196M 1% /run/user/1001
Task:
посмотреть занятость файловой системы в %, в килограммах.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# df --output=pcent
Source:
# https://winitpro.ru/index.php/2021/02/20/svobodnoe-mesta-na-diske-v-linux/ - Просмотр занятого места на разделах командой du.
Task:
лиункс сам может находить устройства, но иногда нужно добавлять устройства или модули ядра для того чтобы это устройство работало. для этого есть утилиты управления модулями ядра.
в lsmod увидим e1000, это интернет модуль, который отвечает за сетевую карту. в description увидим название сет карты. удалим и вернем его. но на нас будут ругаться так как от него заисят еще другие модули ядра.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# lsmod
root@kvmubuntu:~# modinfo e1000
root@kvmubuntu:~# rmmod e1000
root@kvmubuntu:~# insmod e1000
insmod: ERROR: could not load module e1000: No such file or directory
root@kvmubuntu:~# insmod e1000
insmod: ERROR: could not load module e1000: No such file or directory
root@kvmubuntu:~# modprobe e1000
Task:
Вытащить последние 1000 строк лога, первые 1200 строк логов.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# tail -n 1000 /var/log/syslog
root@kvmubuntu:~# head -n 1200 /var/log/syslog
Task:
Посмотреть адрес в mx записи linux.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# dig @сервер доменное.имя тип записи флаги
Task:
Система инициализации systemd.
Зайдите в rescue.target, посмотрите содержимое fstab, после чего вернитесь в graphical.target.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# systemctl get-default
graphical.target
root@kvmubuntu:~# systemctl list-units --type target --all
UNIT                                                                          
...                                                                 
graphical.target                                                              
...                                                             
multi-user.target                                                             
...                                                           
rescue.target                                                                                                                              
lines 11-33
root@kvmubuntu:~# systemctl set-default rescue.target
Removed /etc/systemd/system/default.target.
Created symlink /etc/systemd/system/default.target → /usr/lib/systemd/system/rescue.target.
root@kvmubuntu:~# systemctl get-default
rescue.target
root@kvmubuntu:~# cat /usr/lib/systemd/system/rescue.target
#  SPDX-License-Identifier: LGPL-2.1+
#
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.
[Unit]
Description=Rescue Mode
Documentation=man:systemd.special(7)
Requires=sysinit.target rescue.service
After=sysinit.target rescue.service
AllowIsolate=yes
root@kvmubuntu:~# cat /etc/fstab
#
# /etc/fstab
# Created by anaconda on Mon Mar 21 05:33:35 2022
#
# Accessible filesystems, by reference, are maintained under '/dev/disk/'.
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.
#
# After editing this file, run 'systemctl daemon-reload' to update systemd
# units generated from this file.
#
/dev/mapper/ro_redos-root /                       ext4    defaults        1 1
UUID=2fefa97c-6093-43b9-99f0-23f8a1467990 /boot                   ext4    defaults        1 2
/dev/mapper/ro_redos-swap none                    swap    defaults        0 0
root@kvmubuntu:~# systemctl set-default graphical.target
Removed /etc/systemd/system/default.target.
Created symlink /etc/systemd/system/default.target → /usr/lib/systemd/system/graphical.target.
root@kvmubuntu:~# systemctl get-default
graphical.target
Task:
Сделайте multi-user.target режимом по умолчанию.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# systemctl set-default multi-user.target
Removed /etc/systemd/system/default.target.
Created symlink /etc/systemd/system/default.target → /usr/lib/systemd/system/multi-user.target.
root@kvmubuntu:~# systemctl get-default
multi-user.target
Task:
Управление процессами.
Сохраните в отдельном файле и прокомментируйте данные о процессе init.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# ps aux -p 1 > processes.txt
# выводим содержимое файла processes.txt на экран. поле USER отображает имя пользователя, запустившего процесс, PID - идентификатор процесса, %CPU - уровень использования процессора, %MEM - уровень использования памяти, VSZ - объём используемой виртуальной памяти, RSS - объём используемой реальной памяти, TTY - терминал, с которым связан процесс("?" потому, что init это первый системный процесс и он не связан ни с одним терминалом), STAT - состояние выполнения("S" - означает, что процесс бездействует, "s" - то что процесс лидер сеанса), START - время старта, TIME - время исполнения (на процессоре), COMMAND - имя программы.
root@kvmubuntu:~# cat processes.txt
USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND
root 1 0.7 0.0 1628 536 ? Ss 13:53 0:01 /sbin/init splash
Task:
Сохраните листинг самых ресурсоемких процессов и прокомментируйте его.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# ps aux --sort -pcpu | head -n 3
USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND
root 4997 5.5 3.8 127632 40044 ? SLl 11:56 0:16 amarok
root 5304 3.9 0.0 1852 776 ? RN 12:00 0:01 /usr/bin/updatedb
# поле USER отображает имя пользователя, запустившего процесс, PID - идентификатор процесса, %CPU - уровень использования процессора, %MEM - уровень использования памяти, VSZ - объём используемой виртуальной памяти, RSS - объём используемой реальной памяти, TTY - терминал, с которым связан процесс, STAT - состояние выполнения, START - время старта, TIME - время исполнения (на процессоре), COMMAND - имя программы.
# в выводе этого листинга видно, что процесс amarok с PID 4997, созданный пользователем root является самым ресурсоемким по использованию процессора. он использует процессор на 5.5, память на 3.8, его виртуальная память 127632, реальная память 40044, он не прикреплен ни к одному терминалу, его статус: "S" - означает, что процесс бездействует(ожидает выполнения), "L" - означает что это real-time процесс, имеются страницы заблокированные в памяти, время запуска процесса 11 часов 56 минут, время выполнения 16 секунд.
root@kvmubuntu:~# ps aux --sort -pmem | head -n 3
USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND
root 1 0.2 0.1 1628 536 ? Ss 11:54 0:02 /sbin/init splash
root 2 0.0 0.0 0 0 ? S 11:54 0:00 [migration/0]
# поле USER отображает имя пользователя, запустившего процесс, PID - идентификатор процесса, %CPU - уровень использования процессора, %MEM - уровень использования памяти, VSZ - объём используемой виртуальной памяти, RSS - объём используемой реальной памяти, TTY - терминал, с которым связан процесс, STAT - состояние выполнения, START - время старта, TIME - время исполнения (на процессоре), COMMAND - имя программы.
# в выводе этого листинга видно, что процесс "/sbin/init splash" с PID 1, созданный пользователем root является самым ресурсоемким по использованию оперативной памяти. он использует процессор на 0.2, память на 0.1, его виртуальная память 1628, реальная память 536, он не прикреплен ни к одному терминалу, его статус: "S" - означает, что процесс бездействует, "s" - то что процесс лидер сеанса, время запуска процесса 11 часов 54 минуты, время выполнения 2 секунды.
Task:
Запустите gedit, найдите его pid, найдите pid его родительского процесса и так по цепочке все родительские pid-ы.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gedit &
[1] 3965
[root@kvmcentos ~]# ps | grep gedit
3965 pts/1 00:00:01 gedit
[root@kvmcentos ~]# ps -ef | grep gedit
centos 3965 3218 1 10:01 pts/1 00:00:01 gedit
centos 4039 3218 0 10:03 pts/1 00:00:00 grep --color=auto gedit
[root@kvmcentos ~]# ps -f 3218
UID PID PPID C STIME TTY STAT TIME CMD
centos 3218 3215 0 09:25 pts/1 Ss 0:00 -bash
[root@kvmcentos ~]# ps -f 3215
UID PID PPID C STIME TTY STAT TIME CMD
centos 3215 3208 0 09:25 ? S 0:00 sshd: centos@pts/1
[root@kvmcentos ~]# ps -f 3208
UID PID PPID C STIME TTY STAT TIME CMD
root 3208 1013 0 09:25 ? Ss 0:00 sshd: centos [priv]
[root@kvmcentos ~]# ps -f 1013
UID PID PPID C STIME TTY STAT TIME CMD
root 1013 1 0 09:17 ? Ss 0:00 /usr/sbin/sshd -D -oCiphers=aes256-gcm@openssh.com,chacha20-poly1
[root@kvmcentos ~]# ps -f 1
UID PID PPID C STIME TTY STAT TIME CMD
root 1 0 0 09:15 ? Ss 0:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 1
Task:
Запустите форк-бомбу :
:(){ :|:& };:
Затем перезагрузите виртуалку, ограничьте количество процессов у своего пользователя до 50 и заново запустите форк-бомбу.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# :(){ :|:& };:
[2] 4788
[root@kvmcentos ~]# -bash: fork: retry: Resource temporarily unavailable
-bash: fork: retry: Resource temporarily unavailable
...
-bash: fork: retry: Resource temporarily unavailable
-bash: fork: Resource temporarily unavailable
client_loop: send disconnect: Connection reset
C:\Users\tuser>
C:\Users\tuser>ssh centos@tipcentos
[root@kvmcentos ~]# vim ~/.bash_profile
[root@kvmcentos ~]# cat ~/.bash_profile
# .bash_profile
# Get the aliases and functions
if [ -f ~/.bashrc ]; then
. ~/.bashrc
fi
# User specific environment and startup programs
# Limits
ulimit -u 50
[root@kvmcentos ~]# :(){ :|:& };:
Task:
Запустите любой процесс в фоновом режиме (к примеру, gedit). Найдите его родительский процесс. 
Найдите все дочерние процессы, которые принадлежат этому родительскому процессу. 
Убейте родительский процесс. Проверьте дочерние процессы и найдите новый родительский процесс.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gedit &
[1] 5380
[root@kvmcentos ~]# ps -ef | grep gedit
centos 5215 5164 0 12:30 pts/0 00:00:01 gedit
centos 5387 5285 0 12:34 pts/2 00:00:00 grep --color=auto gedit
[root@kvmcentos ~]# ps -f 5164
UID PID PPID C STIME TTY STAT TIME CMD
centos 5164 5159 0 12:30 pts/0 Ss+ 0:00 bash
[root@kvmcentos ~]# ps -ef | grep 5164
centos 5164 5159 0 12:30 pts/0 00:00:00 bash
centos 5215 5164 0 12:30 pts/0 00:00:01 gedit
centos 5406 5285 0 12:35 pts/2 00:00:00 grep --color=auto 5164
[root@kvmcentos ~]# pstree -p | grep gedit
| |-gnome-terminal-(5159)-+-bash(5164)---gedit(5215)-+-{gedit}(5222)
| | | |-{gedit}(5223)
| | | `-{gedit}(5224)
[root@kvmcentos ~]# ps -xal | grep gedit
0 1000 5215 5164 20 0 566668 52284 x64_sy Sl pts/0 0:01 gedit
0 1000 5442 5285 20 0 12136 1104 - S+ pts/2 0:00 grep --color=auto gedit
[root@kvmcentos ~]# kill -KILL 5164
[root@kvmcentos ~]# ps -ef | grep gedit
centos 5215 2331 0 12:30 ? 00:00:01 gedit
centos 5552 5285 0 12:40 pts/2 00:00:00 grep --color=auto gedit
[root@kvmcentos ~]# ps 2331
PID TTY STAT TIME COMMAND
2331 ? Ss 0:00 /usr/lib/systemd/systemd --user
[root@kvmcentos ~]# ps 1
PID TTY STAT TIME COMMAND
1 ? Ss 0:06 /usr/lib/systemd/systemd --switched-root --system --deserialize 17
Task:
получить полный список сигналов.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# kill -l
 1) SIGHUP     2) SIGINT     3) SIGQUIT     4) SIGILL     5) SIGTRAP
 6) SIGABRT     7) SIGBUS     8) SIGFPE     9) SIGKILL    10) SIGUSR1
11) SIGSEGV    12) SIGUSR2    13) SIGPIPE    14) SIGALRM    15) SIGTERM
16) SIGSTKFLT    17) SIGCHLD    18) SIGCONT    19) SIGSTOP    20) SIGTSTP
21) SIGTTIN    22) SIGTTOU    23) SIGURG    24) SIGXCPU    25) SIGXFSZ
26) SIGVTALRM    27) SIGPROF    28) SIGWINCH    29) SIGIO    30) SIGPWR
31) SIGSYS    34) SIGRTMIN    35) SIGRTMIN+1    36) SIGRTMIN+2    37) SIGRTMIN+3
38) SIGRTMIN+4    39) SIGRTMIN+5    40) SIGRTMIN+6    41) SIGRTMIN+7    42) SIGRTMIN+8
43) SIGRTMIN+9    44) SIGRTMIN+10    45) SIGRTMIN+11    46) SIGRTMIN+12    47) SIGRTMIN+13
48) SIGRTMIN+14    49) SIGRTMIN+15    50) SIGRTMAX-14    51) SIGRTMAX-13    52) SIGRTMAX-12
53) SIGRTMAX-11    54) SIGRTMAX-10    55) SIGRTMAX-9    56) SIGRTMAX-8    57) SIGRTMAX-7
58) SIGRTMAX-6    59) SIGRTMAX-5    60) SIGRTMAX-4    61) SIGRTMAX-3    62) SIGRTMAX-2
63) SIGRTMAX-1    64) SIGRTMAX
Task:
посмотреть адрессацию по портам.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# cat /proc/ioports
  0000-0cf7 : PCI Bus 0000:00
  0000-001f : dma1
  0020-0021 : pic1
  0040-0043 : timer0
  0050-0053 : timer1
  0060-0060 : keyboard
  0064-0064 : keyboard
  0070-0071 : rtc_cmos
0070-0071 : rtc0
  0080-008f : dma page reg
  00a0-00a1 : pic2
  00c0-00df : dma2
  00f0-00ff : fpu
  0170-0177 : 0000:00:01.1
0170-0177 : ata_piix
  01f0-01f7 : 0000:00:01.1
01f0-01f7 : ata_piix
  0376-0376 : 0000:00:01.1
0376-0376 : ata_piix
  03c0-03df : vga+
  03f6-03f6 : 0000:00:01.1
03f6-03f6 : ata_piix
0cf8-0cff : PCI conf1
0d00-ffff : PCI Bus 0000:00
  4000-403f : 0000:00:07.0
4000-4003 : ACPI PM1a_EVT_BLK
4004-4005 : ACPI PM1a_CNT_BLK
4008-400b : ACPI PM_TMR
4020-4021 : ACPI GPE0_BLK
  4100-410f : 0000:00:07.0
4100-4108 : piix4_smbus
  d000-d00f : 0000:00:01.1
d000-d00f : ata_piix
  d010-d01f : 0000:00:02.0
d010-d01f : vmwgfx probe
  d020-d027 : 0000:00:03.0
d020-d027 : e1000
  d040-d05f : 0000:00:04.0
  d100-d1ff : 0000:00:05.0
d100-d1ff : Intel 82801AA-ICH
  d200-d23f : 0000:00:05.0
d200-d23f : Intel 82801AA-ICH
  d240-d247 : 0000:00:0d.0
d240-d247 : ahci
  d248-d24b : 0000:00:0d.0
d248-d24b : ahci
  d250-d257 : 0000:00:0d.0
d250-d257 : ahci
  d258-d25b : 0000:00:0d.0
d258-d25b : ahci
  d260-d26f : 0000:00:0d.0
d260-d26f : ahci
Task:
посмотреть адрессацию в памяти.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# cat /proc/iomem
00000000-00000fff : Reserved
00001000-0009fbff : System RAM
0009fc00-0009ffff : Reserved
000a0000-000bffff : PCI Bus 0000:00
000c0000-000c7fff : Video ROM
000e2000-000e2fff : Adapter ROM
000f0000-000fffff : Reserved
  000f0000-000fffff : System ROM
00100000-7ffeffff : System RAM
  6ee00000-6fc00e80 : Kernel code
  6fc00e81-706507bf : Kernel data
  7090b000-70dfffff : Kernel bss
7fff0000-7fffffff : ACPI Tables
80000000-fdffffff : PCI Bus 0000:00
  f0000000-f7ffffff : 0000:00:02.0
f0000000-f7ffffff : vmwgfx probe
  f8000000-f81fffff : 0000:00:02.0
f8000000-f81fffff : vmwgfx probe
  f8200000-f821ffff : 0000:00:03.0
f8200000-f821ffff : e1000
  f8400000-f87fffff : 0000:00:04.0
f8400000-f87fffff : vboxguest
  f8800000-f8803fff : 0000:00:04.0
  f8804000-f8804fff : 0000:00:06.0
f8804000-f8804fff : ohci_hcd
  f8805000-f8805fff : 0000:00:0b.0
f8805000-f8805fff : ehci_hcd
  f8806000-f8807fff : 0000:00:0d.0
f8806000-f8807fff : ahci
fec00000-fec00fff : Reserved
  fec00000-fec003ff : IOAPIC 0
fee00000-fee00fff : Local APIC
  fee00000-fee00fff : Reserved
fffc0000-ffffffff : Reserved
Task:
Cмотрим инфу о прерываниях. например какие процессы сейчас запущены.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# cat /proc/interrupts
  CPU0     CPU1       
0:  1320048     555  IO-APIC-edge      timer
1:    10224       7  IO-APIC-edge      i8042
7:        0       0  IO-APIC-edge      parport0
8:        2       1  IO-APIC-edge      rtc
10:     3062     21  IO-APIC-fasteoi   acpi
12:      131      2  IO-APIC-edge      i8042
15:    47073      0  IO-APIC-edge      ide1
18:        0      1  IO-APIC-fasteoi   yenta
19:    31056      1  IO-APIC-fasteoi   libata, ohci1394
20:    19042      1  IO-APIC-fasteoi   eth0
21:    44052      1  IO-APIC-fasteoi   uhci_hcd:usb1, uhci_hcd:usb2,...
22:   188352      1  IO-APIC-fasteoi   ra0
23:   632444      1  IO-APIC-fasteoi   nvidia
24:     1585      1  IO-APIC-fasteoi   VIA82XX-MODEM, VIA8237
Task:
использовать утилиту dmesg для установления идентификаторов запросов прерываний, резервируемых для определенных устройств в процессе загрузки системы.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# dmesg | grep "irq 1[45]"
[ 28.930069] ata3: PATA max UDMA/133 cmd 0x1f0 ctl 0x3f6 bmdma 0x2090 irq 14
[ 28.930071] ata4: PATA max UDMA/133 cmd 0x170 ctl 0x376 bmdma 0x2098 irq 15
Task:
оценить загрузку CPU.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# top
top - 08:00:51 up  2:02,  2 users,  load average: 0.15, 0.12, 0.09
Tasks: 189 total,   2 running, 187 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.2 us,  0.3 sy,  0.0 ni, 99.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
MiB Mem :   1987.0 total,     83.6 free,    932.0 used,    971.4 buff/cache
MiB Swap:   2048.0 total,   2033.7 free,     14.3 used.    864.9 avail Mem
PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
765 mysql     20   0 1733056 356604  38296 S   0.7  17.5   0:38.09 mysqld  
...
 15 root      20   0       0      0      0 S   0.0   0.0   0:00.00 cpuhp/1
В третьей строке приводится информация об использовании центрального процессора.
%Cpu(s):  0.2 us,  0.3 sy,  0.0 ni, 99.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
Task:
Как узнать, не нарушая работы программы, к каким системным библиотекам и ресурсам системы она обращается в ходе работы?
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# awk '$NF!~/\.so/{next} {$0=$NF} !a[$0]++' /proc/$PID/maps
readelf --dynamic /usr/bin/vim | grep NEEDED
 0x0000000000000001 (NEEDED)             Shared library: [libm.so.6]
 0x0000000000000001 (NEEDED)             Shared library: [libtinfo.so.6]
 0x0000000000000001 (NEEDED)             Shared library: [libselinux.so.1]
 0x0000000000000001 (NEEDED)             Shared library: [libcanberra.so.0]
 0x0000000000000001 (NEEDED)             Shared library: [libacl.so.1]
 0x0000000000000001 (NEEDED)             Shared library: [libgpm.so.2]
 0x0000000000000001 (NEEDED)             Shared library: [libdl.so.2]
 0x0000000000000001 (NEEDED)             Shared library: [libpython3.8.so.1.0]
 0x0000000000000001 (NEEDED)             Shared library: [libpthread.so.0]
 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]
Task:
Перемещение папки /var на другой физический диск.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# lsblk
NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
...
sdc           8:32   0 931,5G  0 disk 
root@kvmubuntu:~# fdisk /dev/sdc
...
Команда (m для справки): n
...
Выберите (по умолчанию - p):p
Номер раздела (1-4, default 1): 
Первый сектор (2048-1953525167, default 2048): 
Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-1953525167, default 1953525167): 
...
Do you want to remove the signature? [Y] Да/[N] Нет: Y
...
Команда (m для справки): w
root@kvmubuntu:~# lsblk
NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
...
sdc           8:32   0 931,5G  0 disk 
└─sdc1        8:33   0 931,5G  0 part 
root@kvmubuntu:~# mkfs -t ext4 /dev/sdc1
mke2fs 1.46.5 (30-Dec-2021)
...
Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (262144 blocks): done
Writing superblocks and filesystem accounting information: done
root@kvmubuntu:~# mount /dev/sdc1 /mnt
root@kvmubuntu:~# lsblk
NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
...
sdc           8:32   0 931,5G  0 disk 
└─sdc1        8:33   0 931,5G  0 part /mnt
root@kvmubuntu:~# shopt -s dotglob
root@kvmubuntu:~# rsync -aulvXpogtr /var/* /mnt
sending incremental file list
...
total size is 63,868,813,893  speedup is 1.00
root@kvmubuntu:~# ls -Zd /var
system_u:object_r:var_t:s0 /var
root@kvmubuntu:~# ls -Zd /mnt
system_u:object_r:unlabeled_t:s0 /mnt
root@kvmubuntu:~# chcon -t var_t /mnt
root@kvmubuntu:~# ls -Zd /mnt
system_u:object_r:var_t:s0 /mnt
root@kvmubuntu:~# umount /mnt
root@kvmubuntu:~# blkid | grep sdc
/dev/sdc1: UUID="823ae1fa-...-b71dbb654f1f" TYPE="ext4" PARTUUID="3d352be0-01"
root@kvmubuntu:~# vim /etc/fstab
root@kvmubuntu:~# cat /etc/fstab | grep ext4
UUID=823ae1fa-...-b71dbb654f1f   /var  ext4  defaults,noatime,nofail 0 2
root@kvmubuntu:~# mv /var /var.back
root@kvmubuntu:~# mkdir /var
root@kvmubuntu:~# mount -av
/                        : ignored
...
/var                     : successfully mounted
root@kvmubuntu:~# ls /var
account  crash  ftp       lib    log         nis       run    yp
adm      db     games     local  lost+found  opt       spool
cache    empty  kerberos  lock   mail        preserve  tmp
root@kvmubuntu:~# lsblk
NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
...
sdc           8:32   0 931,5G  0 disk 
└─sdc1        8:33   0 931,5G  0 part /var
Source:
# http://sysengineering.ru/notes/peremeschenie-papok-linux-na-drugoy-disk?ysclid=lisfix46x1712981898
# https://losst.pro/kakuyu-fajlovuyu-sistemu-vybrat-dlya-linux?ysclid=lishte72fq279374732
Task:
Поиск процессов, которые "держат" удаленные файлы.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# lsof | grep deleted
pulseaudi 2309                          ubuntu    6u      REG                0,1  67108864      34867 /memfd:pulseaudio (deleted)
gnome-she 2601 2612 gmain               ubuntu   32r      REG                8,5     32768     414249 /home/ubuntu/.local/share/gvfs-metadata/root-91a6702b.log (deleted)
...
Web\x20Co 4259 4279 ProfilerC           ubuntu   68r      REG                0,1     19462      49425 /memfd:mozilla-ipc (deleted)
Web\x20Co 4259 4279 ProfilerC           ubuntu   69r      REG                0,1      9566      49427 /memfd:mozilla-ipc (deleted)
Task:
Как очистить раздел от мусора в командной строке? Это файлы с расширениями .tmp,.trace,*.out и файлы старше 7 дней.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# find /opt/tdir -iname "*.out" -daystart -atime +7 -exec rm {} \;
root@kvmubuntu:~# crontab -e
1 1 * * * /usr/bin/find /opt/tdir -iname "*.out" -daystart -atime +7 -exec rm {} \;
Task:
Клонирование дисков.
Представьте, что у вас есть два флеш-диска USB одинакового размера и вам нужно создать точную копию первого диска на втором. Допустим, что после подключения к компьютеру им назначаются имена устройств /dev/sdb и /dev/sdc соответственно. То есть нужно скопировать содержимое первого диска на второй.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# dd if=/dev/sdb of=/dev/sdc
Task:
Как вариант, если к компьютеру подключено только первое устройство, можно скопировать его содержимое в обычный файл, который впоследствии использовать для восстановления или копирования.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# dd if=/dev/sdc of=flash_drive.img
Task:
Просмотр списка смонтированных файловых систем.
Для монтирования файловых систем вывести список файловых систем, смонтированных в настоящий момент. Для первого эксперимента возьмем флешку. 
Сначала посмотрим, что имеется в системе, перед тем как вставить флешку. Вставим флешку. Теперь, когда мы знаем имя устройства флешки, размонтируем ее и повторно смонтируем его в другой каталог в дереве файловой системы. Создать новую точку монтирования диска. Смонтируем флешку в новую точку монтирования.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# mount
  sysfs on /sys type sysfs (rw)
  proc on /proc type proc (rw)
  udev on /dev type devtmpfs (rw)
  ...
  /dev/fuse on /run/user/1000/doc type fuse (rw)
  tmpfs on /run/snapd/ns type tmpfs (rw)
  nsfs on /run/snapd/ns/snap-store.mnt type nsfs (rw)
root@kvmubuntu:~# mount
  sysfs on /sys type sysfs (rw)
  proc on /proc type proc (rw)
  udev on /dev type devtmpfs (rw)
  ...
  /dev/fuse on /run/user/1000/doc type fuse (rw)
  tmpfs on /run/snapd/ns type tmpfs (rw)
  nsfs on /run/snapd/ns/snap-store.mnt type nsfs (rw)
  /dev/sdc1 on /media/asus/BOOT_MENU type vfat (rw,nosuid,nodev,relatime,uid=1000,gid=1000,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,showexec,utf8,flush,errors=remount-ro,uhelper=udisks2)
root@kvmubuntu:~# umount /dev/sdc1
root@kvmubuntu:~# mkdir /mnt/flash
root@kvmubuntu:~# ls /mnt
flash
root@kvmubuntu:~# mount -t vfat /dev/sdc1 /mnt/flash
# cd /mnt/flash/
/mnt/flash# ls
  '???'          autorun.inf   bootmgr       efi      'System Volume Information'
   autorun.ico   boot          bootmgr.efi   sources
# umount /dev/sdc1
Task:
Сетевая файловая система - NFS.
Скорее всего NFS уже есть в системе. Если же nfs в системе не обнаружен то ставим из репозитория.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# yum list | grep nfs
[root@kvmcentos ~]# yum -y install nfs-utils
[root@kvmcentos ~]# systemctl enable nfs-s.
[root@kvmcentos ~]# systemctl start nfs-s
[root@kvmcentos ~]# systemctl status nfs-s
Task:
В своей работе NFS использует RPC-вызовы, а значит работоспособность службы можно проверить с помощью portmapper (он тоже должен быть запущен на сервере где выполняются программы использующие RPC Calls).
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# rpcinfo -p localhost | grep nfs
  100003 3 tcp 2049 nfs
  100003 4 tcp 2049 nfs
  100227 3 tcp 2049 nfs_acl
[root@kvmcentos ~]# rpcinfo -p localhost
  program vers proto port service
  100000 4 tcp 111 portmapper
  100000 3 tcp 111 portmapper
  100000 2 tcp 111 portmapper
  100000 4 udp 111 portmapper
  100000 3 udp 111 portmapper
  100000 2 udp 111 portmapper
  100005 1 udp 20048 mountd
  100005 1 tcp 20048 mountd
  100005 2 udp 20048 mountd
  100005 2 tcp 20048 mountd
  100005 3 udp 20048 mountd
  100005 3 tcp 20048 mountd
  100024 1 udp 35314 status
  100024 1 tcp 45161 status
  100003 3 tcp 2049 nfs
  100003 4 tcp 2049 nfs
  100227 3 tcp 2049 nfs_acl
  100021 1 udp 48717 nlockmgr
  100021 3 udp 48717 nlockmgr
  100021 4 udp 48717 nlockmgr
  100021 1 tcp 35773 nlockmgr
  100021 3 tcp 35773 nlockmgr
  100021 4 tcp 35773 nlockmgr
Task:
Сделаем так чтобы при включении kvmubuntu автоматически монтировался. разрешим монтировать /home на сервере tipubuntu в режиме rw. То есть, что вы хотите отдавать(home), кому (tipubuntu), какие права (rw).
Проверим список экспортированных файловая система.
Перечитываем файл чтобы внесенные изменения начали действовать.
Проверим список экспортированных файловая система
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# ifconfig
...
tipubuntu
[root@kvmcentos ~]# vim /etc/exports
[root@kvmcentos ~]# cat /etc/exports
/home tipubuntu(rw,no_root_squash)
[root@kvmcentos ~]# exportfs
[root@kvmcentos ~]# exportfs -r
[root@kvmcentos ~]# exportfs
/home tipubuntu
Task:
Теперь на сервере tipubuntu попробуем примонтировать файловая система /home экспортированную на tipcentos. 
Создаем каталог куда будем монтировать.
Монитруем
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# mkdir /mnt/nfs
[root@kvmcentos ~]# ifconfig
...
tipcentos
...
[root@kvmcentos ~]# ls -l /home
итого 8
drwx------. 3 bestuser bestuser 92 апр 10 00:34 bestuser
drwx------. 18 Centos Centos 4096 апр 26 20:44 Centos
drwx------. 3 dmosk dmosk 113 апр 18 00:46 dmosk
drwx------. 4 sk sk 145 апр 20 22:50 sk
drwx------. 8 user1 user1 4096 апр 24 09:58 user1
drwx------. 3 user3 managers 113 апр 18 00:28 user3
drwx------. 4 webby webby 111 апр 24 09:58 webby
root@kvmubuntu:~# mount -t nfs tipcentos:/home /mnt/nfs
mount: /mnt/nfs: bad option; for several filesystems (e.g. nfs, cifs) you might need a /sbin/mount.<type> helper program.
root@kvmubuntu:~# apt-get -y install nfs-common
root@kvmubuntu:~# mount -t nfs tipcentos:/home /mnt/nfs
mount.nfs: Connection timed out
Task:
Видим, что не пропускают нас, потому что мы не настроили правила iptables. исправим это.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# nmap tipcentos
...
  PORT STATE SERVICE
  21/tcp open ftp
  22/tcp open ssh
  23/tcp open telnet
  25/tcp closed smtp
  53/tcp closed domain
  80/tcp closed http
  143/tcp closed imap
  443/tcp closed https
[root@kvmcentos ~]# cat /etc/sysconfig/iptables
Generated by xtables-save v1.8.2 on Sun Apr 12 01:33:36 2020
...
-A INPUT -i lo -j ACCEPT
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p tcp -m multiport --dports 21 -j ACCEPT
-A INPUT -p tcp -m multiport --dports 22 -j ACCEPT
-A INPUT -p tcp -m state --state NEW --dport 23 -j ACCEPT
-A INPUT -p tcp -m multiport --dports 25 -j ACCEPT
-A INPUT -p tcp -m multiport --dports 53 -j ACCEPT
-A INPUT -p tcp -m multiport --dports 80 -j ACCEPT
-A INPUT -p tcp -m multiport --dports 143 -j ACCEPT
-A INPUT -p tcp -m multiport --dports 443 -j ACCEPT
-A INPUT -p udp -m multiport --dports 53 -j ACCEPT
-A INPUT -p udp -m multiport --dports 21 -j ACCEPT
-A INPUT -p udp -m multiport --dports 20 -j ACCEPT
-A INPUT -p udp -m multiport --dports 69 -j ACCEPT
-A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
-A Сonclusion -o lo -j ACCEPT
-A Сonclusion -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT
COMMIT
# Completed on Sun Apr 12 01:33:36 2020
[root@kvmcentos ~]# vim /etc/sysconfig/iptables
[root@kvmcentos ~]# cat /etc/sysconfig/iptables
...
-A INPUT -p tcp -m multiport --dports 2049 -j ACCEPT
[root@kvmcentos ~]# systemctl restart iptables.service
root@kvmubuntu:~# nmap tipcentos
...
  2049/tcp open nfs
root@kvmubuntu:~# mount -t nfs tipcentos:/home /mnt/nfs
Task:
Теперь проверим каталоги у двух систем.
Посмотрим, что примонтированно в системе.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# ls -l /mnt/nfs
  итого 8
  drwx------ 3 1001 1001 92 апр 10 07:34 bestuser
  drwx------ 18 linux linux 4096 апр 27 03:44 Centos
  drwx------ 3 1004 1005 113 апр 18 07:46 dmosk
  drwx------ 4 1006 1007 145 апр 21 05:50 sk
  drwx------ 8 1002 1002 4096 апр 24 16:58 user1
  drwx------ 3 1003 1003 113 апр 18 07:28 user3
  drwx------ 4 1007 1008 111 апр 24 16:58 webby
[root@kvmcentos ~]# ls -l /home
  итого 8
  drwx------. 3 bestuser bestuser 92 апр 10 00:34 bestuser
  drwx------. 18 Centos Centos 4096 апр 26 20:44 Centos
  drwx------. 3 dmosk dmosk 113 апр 18 00:46 dmosk
  drwx------. 4 sk sk 145 апр 20 22:50 sk
  drwx------. 8 user1 user1 4096 апр 24 09:58 user1
  drwx------. 3 user3 managers 113 апр 18 00:28 user3
  drwx------. 4 webby webby 111 апр 24 09:58 webby
[root@kvmcentos ~]# vim /home/myestfile.txt
[root@kvmcentos ~]# cat /home/myestfile.txt
  hust text
[root@kvmcentos ~]# ls -l /home
  итого 12
  drwx------. 3 bestuser bestuser 92 апр 10 00:34 bestuser
  drwx------. 18 Centos Centos 4096 апр 26 20:44 Centos
  drwx------. 3 dmosk dmosk 113 апр 18 00:46 dmosk
  -rw-r--r--. 1 root root 10 апр 26 22:17 myestfile.txt
  drwx------. 4 sk sk 145 апр 20 22:50 sk
  drwx------. 8 user1 user1 4096 апр 24 09:58 user1
  drwx------. 3 user3 managers 113 апр 18 00:28 user3
  drwx------. 4 webby webby 111 апр 24 09:58 webby
root@kvmubuntu:~# ls -l /mnt/nfs
  итого 12
  drwx------ 3 1001 1001 92 апр 10 07:34 bestuser
  drwx------ 18 linux linux 4096 апр 27 03:44 Centos
  drwx------ 3 1004 1005 113 апр 18 07:46 dmosk
  -rw-r--r-- 1 root root 10 апр 27 05:17 myestfile.txt
  drwx------ 4 1006 1007 145 апр 21 05:50 sk
  drwx------ 8 1002 1002 4096 апр 24 16:58 user1
  drwx------ 3 1003 1003 113 апр 18 07:28 user3
  drwx------ 4 1007 1008 111 апр 24 16:58 webby
root@kvmubuntu:~# mount
  ...
  tipcentos:/home on /mnt/nfs type nfs4 (rw,relatime,vers=4.2,rsize=524288,wsize=524288,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,clientaddr=tip,local_lock=none,addr=tipcentos)
root@kvmubuntu:~# vim /mnt/nfs/myestfile.txt
root@kvmubuntu:~# cat /mnt/nfs/myestfile.txt
  hust text
  new line
[root@kvmcentos ~]# cat /home/myestfile.txt
  hust text
  new line
Task:
Если файловая система экспортированы на сервере, который работает круглосуточно (24 часа в сутки) то монтирование разделов можно добавить в конце /etc/fstab тем самым автоматизировав процедуру при старте компьютера.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# ifconfig
...
tipcentos
...
root@kvmubuntu:~# cat /etc/fstab
/etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point> <type> <options> <dump> <pass>
# / was on /dev/sda1 during installation
UUID=4020996d-6502-4a36-b7bc-aec4a74d5aa9 / ext4 errors=remount-ro 0 1
/swapfile none swap sw 0 0
root@kvmubuntu:~# vim /etc/fstab
root@kvmubuntu:~# cat /etc/fstab
/etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point> <type> <options> <dump> <pass>
# / was on /dev/sda1 during installation
UUID=4020996d-6502-4a36-b7bc-aec4a74d5aa9 / ext4 errors=remount-ro 0 1
/swapfile none swap sw 0 0
tipcentos:/home /mnt/nfs nfs defaults 0 0
Task:
Еще пример монтирования шара.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# mkdir /mnt/share
root@kvmubuntu:~# vim /mnt/share/share.txt
root@kvmubuntu:~# cat /mnt/share/share.txt
  for share
root@kvmubuntu:~# apt list | grep nfs
  ...
  nfs-common/bionic-updates,now 1:1.3.4-2.1ubuntu5.2 amd64 [установлен]
  ...
  nfs-kernel-s/bionic-updates 1:1.3.4-2.1ubuntu5.2 amd64
  ...
root@kvmubuntu:~# apt install -y nfs-kernel-s
root@kvmubuntu:~# systemctl enable nfs-kernel-s
root@kvmubuntu:~# systemctl start nfs-kernel-s
root@kvmubuntu:~# systemctl status nfs-kernel-s
  ● nfs-s.service - NFS s and services
  Loaded: loaded (/lib/systemd/system/nfs-s.service; enabled; vendor preset: enabled)
  Active: active (exited) since Mon 2020-04-27 05:34:56 MSK; 2min 14s ago
  Main PID: 5681 (code=exited, status=0/SUCCESS)
  Tasks: 0 (limit: 2327)
  CGroup: /system.slice/nfs-s.service
  апр 27 05:34:54 kvmubuntu systemd[1]: Starting NFS s and services...
  апр 27 05:34:56 kvmubuntu systemd[1]: Started NFS s and services.
Task:
Здесь допустим нету никаких секретов, поэтому сделаем этот файл доcтупным для всех. то есть всем разрешено его монтировать.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# rpcinfo -p localhost
  program vers proto port service
  100000 4 tcp 111 portmapper
  100000 3 tcp 111 portmapper
  100000 2 tcp 111 portmapper
  100000 4 udp 111 portmapper
  100000 3 udp 111 portmapper
  100000 2 udp 111 portmapper
  100005 1 udp 33609 mountd
  100005 1 tcp 35179 mountd
  100005 2 udp 53486 mountd
  100005 2 tcp 36927 mountd
  100005 3 udp 51351 mountd
  100005 3 tcp 48353 mountd
  100003 3 tcp 2049 nfs
  100003 4 tcp 2049 nfs
  100227 3 tcp 2049
  100003 3 udp 2049 nfs
  100227 3 udp 2049
  100021 1 udp 55641 nlockmgr
  100021 3 udp 55641 nlockmgr
  100021 4 udp 55641 nlockmgr
  100021 1 tcp 45397 nlockmgr
  100021 3 tcp 45397 nlockmgr
  100021 4 tcp 45397 nlockmgr
root@kvmubuntu:~# vim /etc/exports
root@kvmubuntu:~# cat /etc/exports
/mnt/share *(rw)
root@kvmubuntu:~# exportfs -r
  exportfs: /etc/exports [1]: Neither 'subtree_check' or 'no_subtree_check' specified for export "*:/mnt/share".
  Assuming default behaviour ('no_subtree_check').
  NOTE: this default has changed since nfs-utils version 1.0.x
root@kvmubuntu:~# exportfs
  /mnt/share <world>
root@kvmubuntu:~# ifconfig
...
tipubuntu
[root@kvmcentos ~]# ls -l /mnt/
[root@kvmcentos ~]# mount -t nfs tipubuntu:/mnt/share /mnt
[root@kvmcentos ~]# ls -l /mnt/
  итого 4
  -rw-r--r--. 1 root root 10 апр 26 22:27 share.txt
Task:
Создайте директорию ~/myfiles, скопируйте туда /etc/passwd и /etc/group. Создайте раздел с файловая система ext4. Перенесите данные из директории myfiles на эту файловую систему. Настройте автомонтирование этой файловой системы в эту директорию.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# mkdir  ~/myfiles
[root@kvmcentos ~]# cp /etc/passwd ~/myfiles
[root@kvmcentos ~]# cp /etc/group ~/myfiles
[root@kvmcentos ~]# ls -l myfiles/
  total 8
  -rw-r--r--. 1 cs cs 1457 Feb 10 10:24 group
  -rw-r--r--. 1 cs cs 3614 Feb 10 10:24 passwd
[root@kvmcentos ~]# sudo mkfs.ext4 /dev/sdb1
  mke2fs 1.45.6 (20-Mar-2020)
  Creating filesystem with 51200 1k blocks and 12824 inodes
  Filesystem UUID: 8f4688cc-def1-44aa-9fc5-7c1793fda09c
  Superblock backups stored on blocks:
      8193, 24577, 40961
  Allocating group tables: done
  Writing inode tables: done
  Creating journal (4096 blocks): done
  Writing superblocks and filesystem accounting information: done
[root@kvmcentos ~]# sudo tune2fs -l /dev/sdb1
  tune2fs 1.45.6 (20-Mar-2020)
  Filesystem volume name:   <none>
  Last mounted on:          <not available>
  Filesystem UUID:          8f4688cc-def1-44aa-9fc5-7c1793fda09c
  Filesystem magic number:  0xEF53
  Filesystem revision #:    1 (dynamic)
  Filesystem features:      has_journal ext_attr resize_inode dir_index filetype extent 64bit flex_bg sparse_super large_file huge_file dir_nlink extra_isize metadata_csum
  Filesystem flags:         signed_directory_hash
  Default mount options:    user_xattr acl
  Filesystem state:         clean
  Errors behavior:          Continue
  Filesystem OS type:       Linux
  Inode count:              12824
  Block count:              51200
  Reserved block count:     2560
  Free blocks:              44440
  Free inodes:              12813
  First block:              1
  Block size:               1024
  Fragment size:            1024
  Group descriptor size:    64
  Reserved GDT blocks:      256
  Blocks per group:         8192
  Fragments per group:      8192
  Inodes per group:         1832
  Inode blocks per group:   229
  Flex block group size:    16
  Filesystem created:       Thu Feb 10 10:30:30 2022
  Last mount time:          n/a
  Last write time:          Thu Feb 10 10:30:30 2022
  Mount count:              0
  Maximum mount count:      -1
  Last checked:             Thu Feb 10 10:30:30 2022
  Check interval:           0 (<none>)
  Lifetime writes:          278 kB
  Reserved blocks uid:      0 (user root)
  Reserved blocks gid:      0 (group root)
  First inode:              11
  Inode size:               128
  Journal inode:            8
  Default directory hash:   half_md4
  Directory Hash Seed:      334a5650-55c0-4327-97ce-256db7bb0bba
  Journal backup:           inode blocks
  Checksum type:            crc32c
  Checksum:                 0x656632a3
  разлогиниться - ctl+alt+f3
[root@kvmcentos ~]# lsof +D /home/cs/myfiles/
[root@kvmcentos ~]# du -h /home/cs/myfiles/
  8.0K    /home/cs/myfiles/
[root@kvmcentos ~]# fdisk -l /dev/sdb1
  Disk /dev/sdb1: 50 MiB, 52428800 bytes, 102400 sectors
  Units: sectors of 1 * 512 = 512 bytes
  Sector size (logical/physical): 512 bytes / 512 bytes
  I/O size (minimum/optimal): 512 bytes / 512 bytes
[root@kvmcentos ~]# mount /dev/sdb1 /mnt/
[root@kvmcentos ~]# df -h
  Filesystem           Size  Used Avail Use% Mounted on
  devtmpfs             881M     0  881M   0% /dev
  tmpfs                909M     0  909M   0% /dev/shm
  tmpfs                909M  9.1M  900M   2% /run
  tmpfs                909M     0  909M   0% /sys/fs/cgroup
  /dev/mapper/cl-root   47G  5.5G   42G  12% /
  /dev/sda1           1014M  346M  669M  35% /boot
  Downloads            931G  321G  611G  35% /media/sf_Downloads
  tmpfs                182M   12K  182M   1% /run/user/42
  tmpfs                182M     0  182M   0% /run/user/0
  /dev/sdb1             45M  1.1M   40M   3% /mnt
[root@kvmcentos ~]# mv -v /home/cs/myfiles/* /mnt
  copied '/home/cs/myfiles/group' -> '/mnt/group'
  removed '/home/cs/myfiles/group'
  copied '/home/cs/myfiles/passwd' -> '/mnt/passwd'
  removed '/home/cs/myfiles/passwd'
[root@kvmcentos ~]# ll /mnt /home/cs/myfiles/
  /home/cs/myfiles/:
  total 0
  /mnt:
  total 20
  -rw-r--r--. 1 cs cs  1457 Feb 10 10:24 group
  drwx------. 2 root   root   12288 Feb 10 10:30 lost+found
  -rw-r--r--. 1 cs cs  3614 Feb 10 10:24 passwd
[root@kvmcentos ~]# ll /mnt/
  total 20
  -rw-r--r--. 1 cs cs  1457 Feb 10 10:24 group
  drwx------. 2 root   root   12288 Feb 10 10:30 lost+found
  -rw-r--r--. 1 cs cs  3614 Feb 10 10:24 passwd
[root@kvmcentos ~]# du -h /mnt | tail -1
  21K     /mnt
[root@kvmcentos ~]# cat /etc/fstab
#
# /etc/fstab
# Created by anaconda on Fri Jan 14 04:46:51 2022
#
# Accessible filesystems, by reference, are maintained under '/dev/disk/'.
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.
#
# After editing this file, run 'systemctl daemon-reload' to update systemd
# units generated from this file.
#
/dev/mapper/cl-root     /                       xfs     defaults        0 0
UUID=8ec77867-4190-4bad-b7a5-98c12e4f3a5e /boot                   xfs     defaults        0 0
/dev/mapper/cl-swap     none                    swap    defaults        0 0
[root@kvmcentos ~]# blkid /dev/sdb1
  /dev/sdb1: UUID="8f4688cc-def1-44aa-9fc5-7c1793fda09c" BLOCK_SIZE="1024" TYPE="ext4" PARTUUID="87f777ab-01"
[root@kvmcentos ~]# blkid /dev/sdb1 | cut -d' ' -f2
  UUID="8f4688cc-def1-44aa-9fc5-7c1793fda09c"
[root@kvmcentos ~]# cp /etc/fstab{,.bkp}
[root@kvmcentos ~]# ls -l /etc/fstab*
  -rw-r--r--. 1 root root 579 Jan 14 12:46 /etc/fstab
  -rw-r--r--. 1 root root 579 Feb 10 10:56 /etc/fstab.bkp
[root@kvmcentos ~]# blkid /dev/sdb1 | cut -d' ' -f2 >> /etc/fstab
[root@kvmcentos ~]# cat /etc/fstab
#
# /etc/fstab
# Created by anaconda on Fri Jan 14 04:46:51 2022
#
# Accessible filesystems, by reference, are maintained under '/dev/disk/'.
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.
#
# After editing this file, run 'systemctl daemon-reload' to update systemd
# units generated from this file.
#
/dev/mapper/cl-root     /                       xfs     defaults        0 0
UUID=8ec77867-4190-4bad-b7a5-98c12e4f3a5e /boot                   xfs     defaults        0 0
/dev/mapper/cl-swap     none                    swap    defaults        0 0
UUID="8f4688cc-def1-44aa-9fc5-7c1793fda09c"
[root@kvmcentos ~]# vim /etc/fstab
[root@kvmcentos ~]# cat /etc/fstab
#
# /etc/fstab
# Created by anaconda on Fri Jan 14 04:46:51 2022
#
# Accessible filesystems, by reference, are maintained under '/dev/disk/'.
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.
#
# After editing this file, run 'systemctl daemon-reload' to update systemd
# units generated from this file.
#
/dev/mapper/cl-root     /                       xfs     defaults        0 0
UUID=8ec77867-4190-4bad-b7a5-98c12e4f3a5e /boot                   xfs     defaults        0 0
/dev/mapper/cl-swap     none                    swap    defaults        0 0
UUID="8f4688cc-def1-44aa-9fc5-7c1793fda09c" /home/cs/myfiles ext4 defaults,auto 0 1
[root@kvmcentos ~]# df -h
Filesystem           Size  Used Avail Use% Mounted on
devtmpfs             881M     0  881M   0% /dev
tmpfs                909M     0  909M   0% /dev/shm
tmpfs                909M  9.1M  900M   2% /run
tmpfs                909M     0  909M   0% /sys/fs/cgroup
/dev/mapper/cl-root   47G  5.5G   42G  12% /
/dev/sda1           1014M  346M  669M  35% /boot
Downloads            931G  321G  611G  35% /media/sf_Downloads
tmpfs                182M   12K  182M   1% /run/user/42
tmpfs                182M     0  182M   0% /run/user/0
/dev/sdb1             45M  1.1M   40M   3% /mnt
[root@kvmcentos ~]# mount /home/cs/myfiles
  mount: /home/cs/myfiles: /dev/sdb1 already mounted on /mnt.
  залогиниться - ctl+f1
[root@kvmcentos ~]# df -h
  Filesystem           Size  Used Avail Use% Mounted on
  devtmpfs             881M     0  881M   0% /dev
  tmpfs                909M     0  909M   0% /dev/shm
  tmpfs                909M  9.2M  900M   2% /run
  tmpfs                909M     0  909M   0% /sys/fs/cgroup
  /dev/mapper/cl-root   47G  5.5G   42G  12% /
  /dev/sda1           1014M  346M  669M  35% /boot
  /dev/sdb1             45M  1.1M   40M   3% /home/cs/myfiles
  Downloads            931G  321G  610G  35% /media/sf_Downloads
  tmpfs                182M   12K  182M   1% /run/user/42
  tmpfs                182M  4.0K  182M   1% /run/user/1000
Task:
Создайте директорию ~/mybackup. Создайте раздел с файловая система xfs, временно примонтируйте файловая система в директорию mybackup и перенесите данные из ~/myfiles на эту файловую систему. Отмонтируйте файловую систему.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# mkdir ~/mybackup
[root@kvmcentos ~]# lsof +D /home/cs/mybackup/
[root@kvmcentos ~]# du -h /home/cs/mybackup/
  0       /home/cs/mybackup/
[root@kvmcentos ~]# fdisk -l /dev/sdb2
  Disk /dev/sdb2: 50 MiB, 52428800 bytes, 102400 sectors
  Units: sectors of 1 * 512 = 512 bytes
  Sector size (logical/physical): 512 bytes / 512 bytes
  I/O size (minimum/optimal): 512 bytes / 512 bytes
[root@kvmcentos ~]# mkfs.xfs /dev/sdb2
  meta-data=/dev/sdb2              isize=512    agcount=2, agsize=6400 blks
       =                       sectsz=512   attr=2, projid32bit=1
       =                       crc=1        finobt=1, sparse=1, rmapbt=0
       =                       reflink=1
  data     =                       bsize=4096   blocks=12800, imaxpct=25
       =                       sunit=0      swidth=0 blks
  naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
  log      =internal log           bsize=4096   blocks=1368, version=2
       =                       sectsz=512   sunit=0 blks, lazy-count=1
  realtime =none                   extsz=4096   blocks=0, rtextents=0
[root@kvmcentos ~]# mount /dev/sdb2 /mnt/
[root@kvmcentos ~]# df -h
  Filesystem           Size  Used Avail Use% Mounted on
  devtmpfs             881M     0  881M   0% /dev
  tmpfs                909M     0  909M   0% /dev/shm
  tmpfs                909M  9.1M  900M   2% /run
  tmpfs                909M     0  909M   0% /sys/fs/cgroup
  /dev/mapper/cl-root   47G  5.5G   42G  12% /
  /dev/sda1           1014M  346M  669M  35% /boot
  /dev/sdb1             45M  1.1M   40M   3% /home/cs/myfiles
  Downloads            931G  321G  610G  35% /media/sf_Downloads
  tmpfs                182M   12K  182M   1% /run/user/42
  tmpfs                182M     0  182M   0% /run/user/0
  /dev/sdb2             45M  3.0M   42M   7% /mnt
[root@kvmcentos ~]# mv -v /home/cs/mybackup /mnt
  created directory '/mnt/mybackup'
  removed directory '/home/cs/mybackup'
[root@kvmcentos ~]# mv -v /home/cs/myfiles /mnt
  created directory '/mnt/myfiles'
  created directory '/mnt/myfiles/lost+found'
  copied '/home/cs/myfiles/group' -> '/mnt/myfiles/group'
  copied '/home/cs/myfiles/passwd' -> '/mnt/myfiles/passwd'
  removed '/home/cs/myfiles/passwd'
  removed directory '/home/cs/myfiles/lost+found'
  removed '/home/cs/myfiles/group'
  mv: cannot remove '/home/cs/myfiles': Device or resource busy
[root@kvmcentos ~]# ls /mnt/
  mybackup  myfiles
[root@kvmcentos ~]# umount /mnt
[root@kvmcentos ~]# df -h
  Filesystem           Size  Used Avail Use% Mounted on
  devtmpfs             881M     0  881M   0% /dev
  tmpfs                909M     0  909M   0% /dev/shm
  tmpfs                909M  9.1M  900M   2% /run
  tmpfs                909M     0  909M   0% /sys/fs/cgroup
  /dev/mapper/cl-root   47G  5.5G   42G  12% /
  /dev/sda1           1014M  346M  669M  35% /boot
  /dev/sdb1             45M  1.1M   40M   3% /home/cs/myfiles
  Downloads            931G  321G  610G  35% /media/sf_Downloads
  tmpfs                182M   12K  182M   1% /run/user/42
  tmpfs                182M     0  182M   0% /run/user/0
Task:
Управление логическими томами - LVM.
Создайте LVM, состоящий из двух разделов и одного целого диска.
Внутри группы томов создайте два логических раздела, каждый из которых должен занимать 30% пространства группы томов.
При включении файловая система на первом логическом разделе должна монтироваться в директорию /data, а файловая система второго логического раздела должна монтироваться в директорию /backup.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# df -h
  Filesystem           Size  Used Avail Use% Mounted on
  devtmpfs             881M     0  881M   0% /dev
  tmpfs                909M     0  909M   0% /dev/shm
  tmpfs                909M  9.3M  900M   2% /run
  tmpfs                909M     0  909M   0% /sys/fs/cgroup
  /dev/mapper/cl-root   47G  5.5G   42G  12% /
  /dev/sda1           1014M  346M  669M  35% /boot
  Downloads            931G  322G  610G  35% /media/sf_Downloads
  tmpfs                182M   32K  182M   1% /run/user/1000
  /dev/sr0              59M   59M     0 100% /run/media/cs/VBox_GAs_6.1.29
[root@kvmcentos ~]# lsblk
  NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
  sda           8:0    0   50G  0 disk
  ├─sda1        8:1    0    1G  0 part /boot
  └─sda2        8:2    0   49G  0 part
├─cl-root 253:0    0   47G  0 lvm  /
└─cl-swap 253:1    0  2.1G  0 lvm  [SWAP]
  sdb           8:16   0    1G  0 disk
  sdc           8:32   0    1G  0 disk
  sr0          11:0    1 58.3M  0 rom  /run/media/cs/VBox_GAs_6.1.29
[root@kvmcentos ~]# sudo fdisk /dev/sdb
  Welcome to fdisk (util-linux 2.32.1).
  Changes will remain in memory only, until you decide to write them.
  Be careful before using the write command.
  Device does not contain a recognized partition table.
  Created a new DOS disklabel with disk identifier 0x45b7ad47.
Command (m for help): g
  Created a new GPT disklabel (GUID: F214B3AC-4B25-C44A-9B25-391159BDF128).
Command (m for help): n
Partition number (1-128, default 1):
First sector (2048-2097118, default 2048):
Last sector, +sectors or +size{K,M,G,T,P} (2048-2097118, default 2097118): +200M
  Created a new partition 1 of type 'Linux filesystem' and of size 200 MiB.
Command (m for help): n
Partition number (2-128, default 2):
First sector (411648-2097118, default 411648):
Last sector, +sectors or +size{K,M,G,T,P} (411648-2097118, default 2097118): +400M
  Created a new partition 2 of type 'Linux filesystem' and of size 400 MiB.
Command (m for help): p
  Disk /dev/sdb: 1 GiB, 1073741824 bytes, 2097152 sectors
  Units: sectors of 1 * 512 = 512 bytes
  Sector size (logical/physical): 512 bytes / 512 bytes
  I/O size (minimum/optimal): 512 bytes / 512 bytes
  Disklabel type: gpt
  Disk identifier: F214B3AC-4B25-C44A-9B25-391159BDF128
  Device      Start     End Sectors  Size Type
  /dev/sdb1    2048  411647  409600  200M Linux filesystem
  /dev/sdb2  411648 1230847  819200  400M Linux filesystem
Command (m for help): w
  The partition table has been altered.
  Calling ioctl() to re-read partition table.
  Syncing disks.
[root@kvmcentos ~]# sudo pvcreate /dev/sdb1
Physical volume "/dev/sdb1" successfully created.
[root@kvmcentos ~]# sudo pvs
PV         VG Fmt  Attr PSize   PFree
/dev/sda2  cl lvm2 a--  <49.00g      0
/dev/sdb1     lvm2 ---  200.00m 200.00m
[root@kvmcentos ~]# sudo pvdisplay /dev/sdb1
"/dev/sdb1" is a new physical volume of "200.00 MiB"
--- NEW Physical volume ---
PV Name               /dev/sdb1
VG Name
PV Size               200.00 MiB
Allocatable           NO
PE Size               0
Total PE              0
Free PE               0
Allocated PE          0
PV UUID               Zh9vy1-BMtC-NwkZ-uelY-PTFf-XEO8-nINDjc
[root@kvmcentos ~]# sudo vgcreate myvg /dev/sdb1
Volume group "myvg" successfully created
[root@kvmcentos ~]# sudo vgs
VG   #PV #LV #SN Attr   VSize   VFree
cl     1   2   0 wz--n- <49.00g      0
myvg   1   0   0 wz--n- 196.00m 196.00m
[root@kvmcentos ~]# sudo vgdisplay myvg
--- Volume group ---
VG Name               myvg
System ID
Format                lvm2
Metadata Areas        1
Metadata Sequence No  1
VG Access             read/write
VG Status             resizable
MAX LV                0
Cur LV                0
Open LV               0
Max PV                0
Cur PV                1
Act PV                1
VG Size               196.00 MiB
PE Size               4.00 MiB
Total PE              49
Alloc PE / Size       0 / 0
Free  PE / Size       49 / 196.00 MiB
VG UUID               jAA7BR-mEHr-V2F8-yu8A-Bzoq-POr1-VSdD2q
[root@kvmcentos ~]# sudo lvcreate myvg -n mylv -L 200M
Volume group "myvg" has insufficient free space (49 extents): 50 required.
[root@kvmcentos ~]# sudo lvcreate myvg -n mylv -l 30%FREE
Logical volume "mylv" created.
[root@kvmcentos ~]# sudo lvcreate myvg -n mylv2 -l 30%FREE
Logical volume "mylv2" created.
[root@kvmcentos ~]# sudo lvs
LV    VG   Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
root  cl   -wi-ao---- <46.94g
swap  cl   -wi-ao----  <2.06g
mylv  myvg -wi-a-----  56.00m
mylv2 myvg -wi-a-----  40.00m
[root@kvmcentos ~]# sudo lvdisplay myvg
--- Logical volume ---
LV Path                /dev/myvg/mylv
LV Name                mylv
VG Name                myvg
LV UUID                BXxmLe-zWBY-Syui-ifdb-uQ5h-7W8d-ER1fKc
LV Write Access        read/write
LV Creation host, time cs.virtualbox, 2022-02-12 10:27:18 +0800
LV Status              available
# open                 0
LV Size                56.00 MiB
Current LE             14
Segments               1
Allocation             inherit
Read ahead sectors     auto
- currently set to     8192
Block device           253:2
--- Logical volume ---
LV Path                /dev/myvg/mylv2
LV Name                mylv2
VG Name                myvg
LV UUID                UO5u2O-61IE-niam-EogM-8WDg-jP8y-vMyzjf
LV Write Access        read/write
LV Creation host, time cs.virtualbox, 2022-02-12 10:33:40 +0800
LV Status              available
# open                 0
LV Size                40.00 MiB
Current LE             10
Segments               1
Allocation             inherit
Read ahead sectors     auto
- currently set to     8192
Block device           253:3
[root@kvmcentos ~]# ls /dev/myvg
  mylv  mylv2
[root@kvmcentos ~]# sudo mkfs.ext4 /dev/myvg/mylv
  mke2fs 1.45.6 (20-Mar-2020)
  Creating filesystem with 57344 1k blocks and 14336 inodes
  Filesystem UUID: 4e2490cc-9a96-4cac-af6d-12f7835067ad
  Superblock backups stored on blocks:
      8193, 24577, 40961
  Allocating group tables: done
  Writing inode tables: done
  Creating journal (4096 blocks): done
  Writing superblocks and filesystem accounting information: done
[root@kvmcentos ~]# sudo mkfs.ext4 /dev/myvg/mylv2
  mke2fs 1.45.6 (20-Mar-2020)
  Creating filesystem with 40960 1k blocks and 10240 inodes
  Filesystem UUID: 0c48275d-16e2-4054-a1c6-1d0da548eba3
  Superblock backups stored on blocks:
      8193, 24577
  Allocating group tables: done
  Writing inode tables: done
  Creating journal (4096 blocks): done
  Writing superblocks and filesystem accounting information: done
[root@kvmcentos ~]# ll /dev/myvg/
  total 0
  lrwxrwxrwx. 1 root root 7 Feb 12 10:37 mylv -> ../dm-2
  lrwxrwxrwx. 1 root root 7 Feb 12 10:37 mylv2 -> ../dm-3
[root@kvmcentos ~]# ll /dev/dm-*
  brw-rw----. 1 root disk 253, 0 Feb 10 09:25 /dev/dm-0
  brw-rw----. 1 root disk 253, 1 Feb 10 09:25 /dev/dm-1
  brw-rw----. 1 root disk 253, 2 Feb 12 10:37 /dev/dm-2
  brw-rw----. 1 root disk 253, 3 Feb 12 10:37 /dev/dm-3
[root@kvmcentos ~]# sudo lsblk -f /dev/myvg/mylv
  NAME      FSTYPE LABEL UUID                                 MOUNTPOINT
  myvg-mylv ext4         4e2490cc-9a96-4cac-af6d-12f7835067ad
[root@kvmcentos ~]# sudo lsblk -f /dev/myvg/mylv2
  NAME       FSTYPE LABEL UUID                                 MOUNTPOINT
  myvg-mylv2 ext4         0c48275d-16e2-4054-a1c6-1d0da548eba3
[root@kvmcentos ~]# cat /etc/fstab
#
# /etc/fstab
# Created by anaconda on Fri Jan 14 04:46:51 2022
#
# Accessible filesystems, by reference, are maintained under '/dev/disk/'.
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.
#
# After editing this file, run 'systemctl daemon-reload' to update systemd
# units generated from this file.
#
/dev/mapper/cl-root     /                       xfs     defaults        0 0
UUID=8ec77867-4190-4bad-b7a5-98c12e4f3a5e /boot                   xfs     defaults        0 0
/dev/mapper/cl-swap     none                    swap    defaults        0 0
[root@kvmcentos ~]# ll /dev/mapper
  total 0
  lrwxrwxrwx. 1 root root       7 Feb 10 09:25 cl-root -> ../dm-0
  lrwxrwxrwx. 1 root root       7 Feb 10 09:25 cl-swap -> ../dm-1
  crw-------. 1 root root 10, 236 Feb 10 09:25 control
  lrwxrwxrwx. 1 root root       7 Feb 12 10:37 myvg-mylv -> ../dm-2
  lrwxrwxrwx. 1 root root       7 Feb 12 10:37 myvg-mylv2 -> ../dm-3
[root@kvmcentos ~]# sudo vim /etc/fstab
[root@kvmcentos ~]# cat /etc/fstab
#
# /etc/fstab
# Created by anaconda on Fri Jan 14 04:46:51 2022
#
# Accessible filesystems, by reference, are maintained under '/dev/disk/'.
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.
#
# After editing this file, run 'systemctl daemon-reload' to update systemd
# units generated from this file.
#
/dev/mapper/cl-root     /                       xfs     defaults        0 0
UUID=8ec77867-4190-4bad-b7a5-98c12e4f3a5e /boot                   xfs     defaults        0 0
/dev/mapper/cl-swap     none                    swap    defaults        0 0
/dev/mapper/myvg-mylv   /data                   ext4    noatime         0 0
/dev/mapper/myvg-mylv2  /backup                 ext4    noatime         0 0
[root@kvmcentos ~]# sudo mkdir /data
  mkdir: cannot create directory ‘/data’: File exists
[root@kvmcentos ~]# sudo mkdir /backup
[root@kvmcentos ~]# sudo mount /data
[root@kvmcentos ~]# sudo mount /backup
[root@kvmcentos ~]# df -h /data
  Filesystem             Size  Used Avail Use% Mounted on
  /dev/mapper/myvg-mylv   51M  1.1M   46M   3% /data
[root@kvmcentos ~]# df -h /backup
  Filesystem              Size  Used Avail Use% Mounted on
  /dev/mapper/myvg-mylv2   35M  782K   32M   3% /backup
Source:
# https://codernotes.ru/articles/administrirovanie-linux/chem-zanyato-mesto-na-diske-linux.html
# https://losst.ru/komanda-du-v-linux
# https://www.youtube.com/watch?v=qXq7qH_MdV8&list=PLtSGboPf3g50Aejrp6KjQsqqjxvAO4aKw&index=4
# https://basis.gnulinux.pro/ru/latest/basis/25/25._%D0%9F%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%BA%D0%B0.html#"
Task:
Создайте сжатый архив файлов, измененных за последнюю неделю (tar, gzip, find, cpio).
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# find / -type f -mtime -7 > files.txt 2>/dev/null
root@kvmubuntu:~# tar -cf arch.tar -T files.txt 2>/dev/null
root@kvmubuntu:~# gzip arch.tar
root@kvmubuntu:~# gzip -l arch.tar.gz
compressed uncompressed ratio uncompressed_name
60560158 163093504 62.9% arch.tar
Task:
Переведите часы на зимнее время (на 1 час назад).
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# date
Fri Nov 30 15:58:48 2007
root@kvmubuntu:~# date --s -1hour
Fri Nov 30 14:58:54 2007
Task:
Составьте crontab файл для следующих процессов: 
1. daily1.sh - ежедневно в 23:55. 
2. daily2.sh - ежедневно в 8:00 и 17:00 
3. hourly.sh - каждый час в рабочее время (пн-пт, 8:00-17:30) 
4. happy_new_year.sh - в момент наступления нового года 
5. quatre.sh - каждые 4 часа
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# crontab -l
...
55 23 * * * /tdir/daily1.sh > /tdir/addtestfile
0 8-17 * * * /tdir/daily2.sh > /tdir/addtestfile
0 8-17 * * 1-5 /tdir/hourly.sh > /tdir/addtestfile
0 0 1 1 * /tdir/happy_new_year.sh > /tdir/addtestfile
* */4 * * * /tdir/quatre.sh > /tdir/addtestfile
Task:
допустим у нас есть файл testcron.sh.
Выполнить тестовый скрипт каждую минуту.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# cat testcron.sh
#!/bin/bash
echo "It is now $(date +%T) on (date +%A)"
$chmod +x testcron.sh
root@kvmubuntu:~# ./testcron.sh
It is now 08:04:32 on (date +%A)
root@kvmubuntu:~# crontab -e
No modification made
root@kvmubuntu:~# crontab -e
* * * * * /home/administrator/testcron.sh
Task:
Выполнить тестовый скрипт каждую минуту и добавим вывод в лог.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# crontab -e
* * * * * /home/administrator/testcron.sh >> /home/administrator/test.log
root@kvmubuntu:~# ls
examples.desktop Видео Изображения 'Рабочий стол'
testcron.sh Документы Музыка Шаблоны
test.log Загрузки Общедоступные
root@kvmubuntu:~# cat test.log
root@kvmubuntu:~# cat test.log
It is now 08:05:01 on (date +%A)
root@kvmubuntu:~# crontab -l
# Edit this file to introduce tasks to be run by cron.
#
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
#
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').#
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
#
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
#
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h dom mon dow command
* * * * * /home/tuser/testcron.sh >> /home/tuser/test.log
Task:
Отредактируем таблицу cron root. Мы перезагрузим сервер в 4:15, вывод в null. /dev/null - вывода не будет, чтобы не спамило журнал системы.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# crontab -e
15 4 * * * /sbin/reboot > /dev/null 2>&1 #
0 */2 * * * /etc/init.d/nginx restart >> /dev/null 2>&1 #Перезапустить nginx каждый чётный час - */2
root@kvmubuntu:~# crontab -l
# Edit this file to introduce tasks to be run by cron.
#
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
#
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').#
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
#
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
#
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h dom mon dow command
15 4 * * * /sbin/reboot > /dev/null 2>&1
0 */2 * * * /etc/init.d/nginx restart >> /dev/null 2>&1
root@kvmubuntu:~# cat test.log
It is now 08:05:01 on (date +%A)
It is now 08:06:01 on (date +%A)
root@kvmubuntu:~# date
Сб мар 7 08:06:01 MSK 2020
root@kvmubuntu:~# journalctl -e
 мар 07 08:03:19 VirtualBox rtkit-daemon[1069]: Supervising 4 threads of 2 proces
 мар 07 08:03:19 VirtualBox rtkit-daemon[1069]: Supervising 4 threads of 2 proces
 мар 07 08:03:24 VirtualBox rtkit-daemon[1069]: Supervising 4 threads of 2 proces
 мар 07 08:03:24 VirtualBox rtkit-daemon[1069]: Supervising 4 threads of 2 proces
 мар 07 08:03:30 VirtualBox rtkit-daemon[1069]: Supervising 4 threads of 2 proces
 мар 07 08:03:30 VirtualBox rtkit-daemon[1069]: Supervising 4 threads of 2 proces
 мар 07 08:03:30 VirtualBox rtkit-daemon[1069]: Supervising 4 threads of 2 proces
 мар 07 08:03:30 VirtualBox rtkit-daemon[1069]: Supervising 4 threads of 2 proces
 мар 07 08:03:30 VirtualBox rtkit-daemon[1069]: Successfully made thread 2635 of
 мар 07 08:03:30 VirtualBox rtkit-daemon[1069]: Supervising 5 threads of 3 proces
 мар 07 08:03:35 VirtualBox rtkit-daemon[1069]: Supervising 5 threads of 3 proces
 мар 07 08:03:35 VirtualBox rtkit-daemon[1069]: Supervising 5 threads of 3 proces
 мар 07 08:04:01 VirtualBox CRON[2678]: pam_unix(cron:session): session opened fo
 мар 07 08:04:01 VirtualBox CRON[2679]: (tuser) CMD (/home/tuser/testcron.sh >> /
 мар 07 08:04:01 VirtualBox CRON[2678]: (CRON) info (No MTA installed, discarding
 мар 07 08:04:01 VirtualBox CRON[2678]: pam_unix(cron:session): session closed fo
 мар 07 08:05:01 VirtualBox CRON[2699]: pam_unix(cron:session): session opened fo
 мар 07 08:05:01 VirtualBox CRON[2700]: (tuser) CMD (/home/tuser/testcron.sh >> /
 мар 07 08:05:01 VirtualBox CRON[2699]: pam_unix(cron:session): session closed fo
 мар 07 08:05:09 VirtualBox gnome-shell[1033]: JS WARNING: [resource:///org/gnome
 мар 07 08:06:01 VirtualBox CRON[2719]: pam_unix(cron:session): session opened fo
 мар 07 08:06:01 VirtualBox CRON[2720]: (tuser) CMD (/home/tuser/testcron.sh >> /
 мар 07 08:06:01 VirtualBox CRON[2719]: pam_unix(cron:session): session closed fo
root@kvmubuntu:~# cat /etc/crontab
# /etc/crontab: system-wide crontab
# Unlike any other crontab you don't have to run the `crontab'
# command to install the new version when you edit this file
# and files in /etc/cron.d. These files also have username fields,
# that none of the other crontabs do.
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
# m h dom mon dow user command
17 * * * * root cd / && run-parts --report /etc/cron.hourly
25 6 * * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )
47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )
52 6 1 * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )
Task:
Редактировать таблицу cron пользователя tuser.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# crontab -u tuser -e
Task:
Создайте скрипт, который создаёт файл. Настройте запуск этого скрипта раз в минуту. Проверьте результат.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# vim CronBash.sh
root@kvmubuntu:~# cat CronBash.sh
#!/bin/bash
touch testfile
root@kvmubuntu:~# ./CronBash.sh
root@kvmubuntu:~# cp CronBash.sh /usr/bin/
root@kvmubuntu:~# CronBash.sh
root@kvmubuntu:~# ls -l testfile
-rw-rw-r--. 1 tuser tuser 0 мая  4 09:48 testfile
root@kvmubuntu:~# cat /etc/crontab
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
# For details see man 4 crontabs
# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * tuser-name  command to be executed
root@kvmubuntu:~# crontab -e
no crontab for tuser - using an empty one
crontab: installing new crontab
root@kvmubuntu:~# crontab -l
*  *  *  *  *  /usr/bin/CronBash.sh
root@kvmubuntu:~# ls -l testfile
-rw-rw-r--. 1 tuser tuser 0 мая  4 09:58 testfile
root@kvmubuntu:~# ls -l testfile
-rw-rw-r--. 1 tuser tuser 0 мая  4 09:59 testfile
Task:
Создайте пользователя backup и настройте для него cron, чтобы тот раз в день находил файлы старее 5 дней в директории /data и добавлял эти файлы в архив /backup/archive.tar, после чего удалял из исходной директории. Настройте cron у пользователя tuser, чтобы он каждые 10 минут создавал файл в директории /data.
Также у пользователя root создайте cron, чтобы он каждую пятницу в 23:30 записывал содержимое директории /data и содержимое архива /backup/archive.tar в файл /var/log/reports/текущаядата.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# useradd backup2
root@kvmubuntu:~# passwd backup2
root@kvmubuntu:~# mkdir /backup/
root@kvmubuntu:~# ls -l /data
итого 0
-rw-r--r--. 1 root root 0 апр 14 13:14 testfile1
-rw-r--r--. 1 root root 0 апр 14 13:14 testfile2
-rw-r--r--. 1 root root 0 апр 14 13:14 testfile3
-rw-r--r--. 1 root root 0 апр 14 13:14 testfile4
-rw-r--r--. 1 root root 0 апр 14 13:14 testfile5
root@kvmubuntu:~# su - backup2
root@kvmubuntu:~# ls -l /data/
итого 0
-rw-r--r--. 1 root root 0 апр 14 13:14 testfile1
-rw-r--r--. 1 root root 0 апр 14 13:14 testfile2
-rw-r--r--. 1 root root 0 апр 14 13:14 testfile3
-rw-r--r--. 1 root root 0 апр 14 13:14 testfile4
-rw-r--r--. 1 root root 0 апр 14 13:14 testfile5
root@kvmubuntu:~# vim CronBash2.sh
root@kvmubuntu:~# cat CronBash2.sh
#!/bin/bash
if find /data/ -type f -mtime +5; then
cd /data
tar -cvf /backup/archive.tar testfile*
rm -rf /data/testfile*
else
echo "No files"
fi
root@kvmubuntu:~# rm -rf /backup/archive.tar
root@kvmubuntu:~# ./CronBash2.sh
/data/testfile5
/data/testfile1
/data/testfile3
/data/testfile2
/data/testfile4
testfile1
testfile2
testfile3
testfile4
testfile5
root@kvmubuntu:~# ls -l /data/
итого 0
root@kvmubuntu:~# ls -l /backup/
итого 12
-rw-r--r--. 1 root root 10240 мая 11 11:19 archive.tar
root@kvmubuntu:~# tar -tf /backup/archive.tar
testfile1
testfile2
testfile3
testfile4
testfile5
root@kvmubuntu:~# crontab -e
no crontab for backup2 - using an empty one
crontab: installing new crontab
root@kvmubuntu:~# crontab -l
5 11 * * * tar --totals -cvf /backup/archive.tar /data/testfile{1..2} | rm -rf /data/testfile{1..2}
root@kvmubuntu:~# mv CronBash2.sh /usr/bin/
root@kvmubuntu:~# exit
root@kvmubuntu:~# vim /var/spool/cron/backup2
root@kvmubuntu:~# cat /var/spool/cron/backup2
@daily /usr/bin/CronBash2.sh
root@kvmubuntu:~# vim CronBash3.sh
root@kvmubuntu:~# cat CronBash3.sh
#!/bin/bash
touch /data/testfile0
root@kvmubuntu:~# chown user:user /data
root@kvmubuntu:~# ls -l /
...
drwxr-xr-x.   2 user user  4096 мая 11 11:19 data
...
root@kvmubuntu:~# mv CronBash3.sh /usr/bin
root@kvmubuntu:~# whoami
user
root@kvmubuntu:~# crontab -e
crontab: installing new crontab
root@kvmubuntu:~# crontab -l
#*  *  *  *  *  /usr/bin/CronBash.sh
@reboot mkdir testdir
*/10  *  *  *  *  /usr/bin/CronBash3.sh
root@kvmubuntu:~# ls -l /data/
итого 0
-rw-r--r--. 1 user user 0 мая 12 08:57 testfile0
root@kvmubuntu:~# vim CronBash4.sh
root@kvmubuntu:~# cat CronBash4.sh
#!/bin/bash
mkdir /var/log/reports
ls -l /data > /var/log/reports/$(date +"%d.%m.%Y")
tar -tf /backup/archive.tar >> /var/log/reports/$(date +"%d.%m.%Y")
root@kvmubuntu:~# vim /var/spool/cron/root
root@kvmubuntu:~# cat /var/spool/cron/root
30  23  *  *  5  CronBash4.sh
Source:
# https://basis.gnulinux.pro/ru/latest/
Task:
Настроить диск с файловой системой exfat.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# apt install exfat-fuse
root@kvmubuntu:~# mkfs -t exfat /dev/sdc1
Task:
Запускаем любой процесс, например, с помощью watch отслеживаем статистику программы free в реальном времени. 
С другой консоли посмотрим приоритет процесса watch.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# watch free
root@kvmubuntu:~# ps -C watch -o ni=
15
Task:
Создать скрипт для ротации логов, и не только логов, но и любых файлов. 
Автоматическое переименование и удаление осуществляется, если файл достигнет заданного размера.
# Написаниие скриптов.
Decision:
	#/bin/bash
	@echo off
	set file=query.log
	set path=»c:\logs\»
	set maxbytesize=268436480
	set filescount=7
	cd %path%
	for /F «usebackq» %%A in (‘%file%’) do set size=%%~zA
	if %size% LSS %maxbytesize% (
	echo «we should do nothing»
	) else (
		setlocal ENABLEDELAYEDEXPANSION
		set /a j=%filescount%-1
 		del /f /q %file%.%filescount%
		for /l %%i in (!j!,-1,0) do (
			set /a k=%%i+1
			ren %file%.%%i %file%.!k!
		)
		endlocal
		ren %file% %file%.0
	)
- Подготовим папку logs с файлами определенного размера query.log и скриптом log-rotation.txt
Source:
# https://www.youtube.com/playlist?list=PLG-4IrwpAdz7tuB6A9EbDpIb3akCJ1hoe
Task:
Создайте скрипт, который будет создавать файл. 
После чего скрипт будет прописывать последнюю строчку из сообщений syslog в этот файл.
Затем будет отправлять в syslog своё сообщение - «Logs collected».
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# vim BASH-LogScript1.sh
root@kvmubuntu:~# chmod +x BASH-LogScript1.sh
root@kvmubuntu:~# cat BASH-LogScript1.sh
#!/bin/bash
touch LogFile
tail -n 1 /var/log/messages > LogFile
echo 'Logs collected' >> /var/log/messages
root@kvmubuntu:~# ./BASH-LogScript1.sh
root@kvmubuntu:~# cat /var/log/messages | grep 'Logs collected'
  Logs collected
Task:
Настройте rsyslog, чтобы логи, посланные этим скриптом, сохранялись в отдельном файле «collect.log» в директории /var/log.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# logger -p local4.info "Logs Collected"
root@kvmubuntu:~# journalctl -p info | grep 'Logs Collected'
  апр 28 09:21:31 i6.rt.ru ur[5962]: Logs Collected
root@kvmubuntu:~# vim /etc/rsyslog.conf
root@kvmubuntu:~# cat /etc/rsyslog.conf
....
# Save boot messages also to boot.log
local7.*                                                /var/log/boot.log
local4.*                                                /var/log/collect.log
...
root@kvmubuntu:~# systemctl restart rsyslog
root@kvmubuntu:~# ./BASH-LogScript1.sh
root@kvmubuntu:~# cat /var/log/collect.log
  Apr 28 09:41:29 i6 ur[6135]: Logs Collected
root@kvmubuntu:~# logger -p local4.info "Logs Collected"
root@kvmubuntu:~# cat /var/log/collect.log
  Apr 28 09:41:29 i6 ur[6135]: Logs Collected
  Apr 28 09:44:28 i6 ur[6162]: Logs Collected
Task:
Настройте ротацию этих логов, чтобы они сохранялись на протяжении месяца с еженедельной ротацией.
Запустите скрипт и убедитесь, что все ранее проделанные шаги выполнили свою задачу.
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# vim /etc/logrotate.d/collect.conf
root@kvmubuntu:~# cat /etc/logrotate.d/collect.conf
/var/log/collect.log
{
  dateext
  weekly
  rotate 4
}
root@kvmubuntu:~# logrotate -d /etc/logrotate.d/collect.conf
  WARNING: logrotate in debug mode does nothing except printing debug messages!  Consider using verbose mode (-v) instead if this is not what you want.
  reading config file /etc/logrotate.d/collect.conf
  Reading state from file: /var/lib/logrotate/logrotate.status
  Allocating hash table for state file, size 64 entries
  Handling 1 logs
  rotating pattern: /var/log/collect.log
  weekly (4 rotations)
  empty log files are rotated, old logs are removed
  considering log /var/log/collect.log
  Creating new state
  Now: 2022-04-28 10:14
  Last rotated at 2022-04-28 10:00
  log does not need rotating (log has been already rotated)
root@kvmubuntu:~# logrotate -f /etc/logrotate.d/collect.conf
root@kvmubuntu:~# ls -l /var/log/colle*
  -rw-------. 1 root root 112 апр 28 09:44 /var/log/collect.log-20220428
root@kvmubuntu:~# ./BASH-LogScript1.sh
root@kvmubuntu:~# journalctl -e
  ...
  апр 28 10:46:50 i6.rt.ru sudo[6584]:     ur : TTY=pts/1 ; PWD=/home/ur ; ur=root ; COMMAND=./BASH-LogScript1.sh
  ...
root@kvmubuntu:~# tail -n 20 /var/log/messages
  ...
  Logs collected
  ...
root@kvmubuntu:~# logger -p local4.info "Logs Collected"
root@kvmubuntu:~# cat /var/log/collect.log
  cat: /var/log/collect.log: No such file or directory
root@kvmubuntu:~# cat /var/log/collect.log-20220428
  Apr 28 09:41:29 i6 ur[6135]: Logs Collected
  Apr 28 09:44:28 i6 ur[6162]: Logs Collected
  Apr 28 10:38:59 i6 ur[6437]: Logs Collected
  Apr 28 10:49:34 i6 ur[6601]: Logs Collected
root@kvmubuntu:~# tail -n 20 /var/log/messages
  ...
  Apr 28 10:49:34 i6 ur[6601]: Logs Collected
  ...
Task:
Создайте скрипт, который будет отправлять логи в syslog – This is normal log → debug, 
This is error → error и This is critical error → crit. 
Настройте syslog, чтобы записывал эти логи в соответствующие файлы - /var/log/mylog.debug, /var/log/mylog.crit, /var/log/mylog.error. 
Настройте ротацию этих логов, чтобы они ротировались 5 раз. 
debug и error должны ротировались ежедневно, debug с сжатием, а error без сжатия. crit должен ротироваться раз в неделю.
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# ./BASH-LogScript2.sh
root@kvmubuntu:~# cat /etc/rsyslog.conf
# rsyslog configuration file
...
# Save boot messages also to boot.log
local4.*                                                /var/log/collect.log
local7.*                                                /var/log/boot.log
# ### sample forwarding rule ###
...
#Target="remote_host" Port="XXX" Protocol="tcp")
local1.*                                                /var/log/mylog.debug
local2.*                                                                                          /var/log/mylog.error
local3.*                                                                                          /var/log/mylog.crit
root@kvmubuntu:~# ls /var/log/mylog.
  mylog.crit-20220428      mylog.debug-20220428.gz  mylog.error-20220428     
root@kvmubuntu:~# cat /var/log/mylog.crit-20220428
  Apr 28 11:46:30 i6 root[6943]: This is critical error -> crit
root@kvmubuntu:~# cat /var/log/mylog.error-20220428
  Apr 28 11:46:30 i6 root[6942]: This is error -> error
root@kvmubuntu:~# cat BASH-LogScript2.sh
#!/bin/bash
logger -p local1.debug "This is normal log -> debug"
echo 'local1.*                                                /var/log/mylog.debug' >> /etc/rsyslog.conf

logger -p local2.err "This is error -> error"
echo 'local2.*                                                                                          /var/log/mylog.error' >> /etc/rsyslog.conf

logger -p local3.crit "This is critical error -> crit"
echo 'local3.*                                                                                          /var/log/mylog.crit' >> /etc/rsyslog.conf

sudo systemctl restart rsyslog
#sudo touch /etc/logrotate.d/mylogdebug.conf
#sudo touch /etc/logrotate.d/mylogerror.conf
#sudo touch /etc/logrotate.d/mylogcrit.conf
echo '/var/log/mylog.debug
{
  dateext
  daily
  rotate 5
  compress
}' > /etc/logrotate.d/mylogdebug.conf
sudo logrotate -f /etc/logrotate.d/mylogdebug.conf

echo '/var/log/mylog.error
{
  dateext
  daily
  rotate 5
  delaycompress
}' > /etc/logrotate.d/mylogerror.conf
sudo logrotate -f /etc/logrotate.d/mylogerror.conf

echo '/var/log/mylog.crit
{
  dateext
  weekly
  rotate 5
}' > /etc/logrotate.d/mylogcrit.conf
sudo logrotate -f /etc/logrotate.d/mylogcrit.conf
root@kvmubuntu:~# cat /etc/logrotate.d/mylog
mylogcrit.conf   mylogdebug.conf  mylogerror.conf  
root@kvmubuntu:~# cat /etc/logrotate.d/mylogdebug.conf
/var/log/mylog.debug
{
  dateext
  daily
  rotate 5
  compress
}
root@kvmubuntu:~# cat /var/log/messages | grep 'This is '
  Apr 28 11:34:58 i6 ur[6745]: This is error -> error
  Apr 28 11:34:58 i6 ur[6746]: This is critical error -> crit
  Apr 28 11:35:31 i6 root[6766]: This is error -> error
  Apr 28 11:35:31 i6 root[6767]: This is critical error -> crit
  Apr 28 11:40:00 i6 root[6828]: This is error -> error
  Apr 28 11:40:00 i6 root[6829]: This is critical error -> crit
  Apr 28 11:42:18 i6 root[6872]: This is error -> error
  Apr 28 11:42:18 i6 root[6873]: This is critical error -> crit
  Apr 28 11:44:04 i6 root[6903]: This is error -> error
  Apr 28 11:44:04 i6 root[6904]: This is critical error -> crit
  Apr 28 11:46:30 i6 root[6942]: This is error -> error
  Apr 28 11:46:30 i6 root[6943]: This is critical error -> crit
root@kvmubuntu:~# journalctl -e | grep 'This is '
  апр 28 11:34:58 i6.rt.ru ur[6744]: This is normal log -> debug
  апр 28 11:34:58 i6.rt.ru ur[6745]: This is error -> error
  апр 28 11:34:58 i6.rt.ru ur[6746]: This is critical error -> crit
  апр 28 11:35:31 i6.rt.ru root[6765]: This is normal log -> debug
  апр 28 11:35:31 i6.rt.ru root[6766]: This is error -> error
  апр 28 11:35:31 i6.rt.ru root[6767]: This is critical error -> crit
  апр 28 11:40:00 i6.rt.ru root[6827]: This is normal log -> debug
  апр 28 11:40:00 i6.rt.ru root[6828]: This is error -> error
  апр 28 11:40:00 i6.rt.ru root[6829]: This is critical error -> crit
  апр 28 11:42:18 i6.rt.ru root[6871]: This is normal log -> debug
  апр 28 11:42:18 i6.rt.ru root[6872]: This is error -> error
  апр 28 11:42:18 i6.rt.ru root[6873]: This is critical error -> crit
  апр 28 11:44:04 i6.rt.ru root[6902]: This is normal log -> debug
  апр 28 11:44:04 i6.rt.ru root[6903]: This is error -> error
  апр 28 11:44:04 i6.rt.ru root[6904]: This is critical error -> crit
  апр 28 11:46:30 i6.rt.ru root[6941]: This is normal log -> debug
  апр 28 11:46:30 i6.rt.ru root[6942]: This is error -> error
  апр 28 11:46:30 i6.rt.ru root[6943]: This is critical error -> crit
Task:
Создайте файл /etc/allowedurs, в котором пропишите логин своего пользователя.
Создайте скрипт, который сначала проверит, имеет ли данный текущий пользователь право запускать скрипт 
(пользователь должен быть в списке /etc/allowedurs).
Если прав нету, то следует вывести на экран сообщение «This incident will be reported», а в syslog в секцию error написать «ur urname tried to run this script!». 
После запуска скрипт должен вывести содержимое директории /data/. 
После чего предложить пользователю указать имя файла и указать дату и время модификации для смены.
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# vim /etc/allowedurs
root@kvmubuntu:~# cat /etc/allowedurs
root
it
root@kvmubuntu:~# vim BASH-LogScript3.sh
root@kvmubuntu:~# cat BASH-LogScript3.sh
#!/bin/bash
name1=$(whoami)
#echo $name1
cmd1=$(cat /etc/allowedurs | grep $name1)
#echo $cmd1
#for line1 in $(cat /etc/allowedurs)
#do
#    echo 'line1' $line1
  #if [[ $name1 == $line1 ]];
  #then
  #    echo '+'
  #else
  #    echo '-'
  #fi    
#done
if cat /etc/allowedurs | grep $name1
then
  echo '+'
else
  echo 'This incident will be reported'
  logger -p local2.err "ur $name1 tried to run this script!"
fi
ls /data
read -p "specify the file name: " rename
read -p "specify the modification date and time for the shift: " date
root@kvmubuntu:~# whoami
  ur
root@kvmubuntu:~# ./BASH-LogScript3.sh
  This incident will be reported
  testfile1  testfile2  testfile3  testfile4  testfile5
  specify the file name: ur2
  specify the modification date and time for the shift: 2019.10.12 19:15   
root@kvmubuntu:~# journalctl -e | grep 'tried to run this '
  апр 28 16:23:20 i6.rt.ru ur[8491]: ur urname tried to run this script!
  апр 28 16:24:51 i6.rt.ru ur[8513]: ur ur tried to run this script!
  апр 28 16:26:52 i6.rt.ru ur[8534]: ur ur tried to run this script!
  апр 28 16:30:09 i6.rt.ru ur[8556]: ur ur tried to run this script!
  апр 28 16:33:16 i6.rt.ru ur[8567]: ur ur tried to run this script!
  апр 28 16:34:36 i6.rt.ru ur[8591]: ur ur tried to run this script!
Source:
# https://www.youtube.com/playlist?list=PLg5SS_4L6LYuu1RAT4l1tCkZrJzkIaNgL
Task:
Сделайте скрипт, который спросит имя пользователя и скажет, является ли пользователь администратором?
# Написаниие скриптов.
Decision:
#!/bin/bash
read -p "Print urname: " user1
user2=$(cat /etc/group | grep wheel | cut -d ':' -f 4)
if [ "$user1" = "$user2" ]
then
  echo "He is Admin"
else
  echo "He is not Admin"
fi
Task:
Сделайте скрипт, который будет спрашивать название и создавать файл, затем спрашивать права для этого файла и задавать их.
# Написаниие скриптов.
Decision:
#!/bin/bash
read -p "Print name: " name
touch $name
read -p "What rights are needed? " rights
chmod $rights $name
Task:
Напишите скрипт на bash, который будет определять в какую возрастную группу попадают пользователи. 
При запуске скрипт должен вывести сообщение "enter your name:" и ждать от пользователя ввода имени (используйте read, чтобы прочитать его). 
Когда имя введено, то скрипт должен написать "enter your age:" и ждать ввода возраста (опять нужен read). 
Когда возраст введен, скрипт пишет на экран "<Имя>, your group is <группа>", где <группа> определяется на основе возраста по следующим правилам:
  младше либо равно 16: "child",
  от 17 до 25 (включительно): "youth",
  старше 25: "adult".
После этого скрипт опять выводит сообщение "enter your name:" и всё начинается по новой. Если в какой-то момент работы скрипта будет введено пустое имя или возраст 0, то скрипт должен написать на экран "bye" и закончить свою работу.
# Написаниие скриптов.
Decision:
#!/bin/bash
while [[ True ]]
do
  echo "enter your name:"
  read name
  if [[ $name == "" ]]
  then
  echo "bye"
  break
  fi
  echo "enter your age:"
  read age
  if [[ $age == 0 ]]
  then    
  echo "bye"
  break
  elif [[ $age -le 16 ]]
  then
  echo "$name, your group is child"
  elif [[ $age -ge 17 && $age -le 25 ]]
  then
  echo "$name, your group is youth"
  else
  echo "$name, your group is adult"
  fi
done
Task:
у пользователя root создайте cron, чтобы он каждую пятницу в 23:30 записывал содержимое директории /data и содержимое архива /backup/archive.tar в файл /var/log/reports/текущаядата.
# Написаниие скриптов.
Decision:
#!/bin/bash
mkdir /var/log/reports
ls -l /data > /var/log/reports/$(date +"%d.%m.%Y")
tar -tf /backup/archive.tar >> /var/log/reports/$(date +"%d.%m.%Y")
Task:
Создайте пользователя backup и настройте для него cron, чтобы тот раз в день находил файлы старее 5 дней в директории /data и добавлял эти файлы в архив /backup/archive.tar, после чего удалял из исходной директории.
# Написаниие скриптов.
Decision:
#!/bin/bash
if find /data/ -type f -mtime +5; then
  cd /data
  tar -cvf /backup/archive.tar testfile*
  rm -rf /data/testfile*
else
  echo "No files"
fi
Task:
Разрешите пользователю helpdesk1 запускать команду Sh-Interview-NewBackup от имени пользователя backup. 
Команда Sh-Interview-NewBackup должна создавать сжатый архив директории /data и сохранять его в домашней директории пользователя backup с датой в названии.
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# useradd backup1
root@kvmubuntu:~# passwd backup1
  Изменение пароля пользователя backup1.
  Новый пароль:
  НЕУДАЧНЫЙ ПАРОЛЬ: Пароль должен содержать не менее 8 символов
  Повторите ввод нового пароля:
  passwd: данные аутентификации успешно обновлены.
root@kvmubuntu:~# mkdir /data
root@kvmubuntu:~# touch /data/testfile{1..5}
root@kvmubuntu:~# ls -l /data/
  итого 0
  -rw-r--r--. 1 root root 0 апр 14 13:14 testfile1
  -rw-r--r--. 1 root root 0 апр 14 13:14 testfile2
  -rw-r--r--. 1 root root 0 апр 14 13:14 testfile3
  -rw-r--r--. 1 root root 0 апр 14 13:14 testfile4
  -rw-r--r--. 1 root root 0 апр 14 13:14 testfile5
root@kvmubuntu:~# vim bash-script10
root@kvmubuntu:~# cat bash-script10
#/bin/bash
#Разрешите пользователю helpdesk1 запускать команду Bash-GnuLinux-NewBackup от имени пользователя backup. Команда Sh-Interview-NewBackup должна создавать сжатый архив директории /data и сохранять его в домашней директории пользователя backup с датой в названии.
#dt=$(date)
#echo "$dt"
#echo "$(date)"
#for line in $(date)
#do
#    echo "$line"
#done
#touch testfile5$(date +%y%m%d)
sudo tar -cjvf /home/backup1/testArchive$(date +%d%m%y).tar.gz /data/
root@kvmubuntu:~# bash /home/ur/bash-script10
  tar: Удаляется начальный `/' из имен объектов
  /data/
  /data/testfile5
  /data/testfile1
  /data/testfile3
  /data/testfile2
  /data/testfile4
root@kvmubuntu:~# r-t -rf /home/backup1/testArchive150422.tar.gz
root@kvmubuntu:~# mv bash-script10 Bash-GnuLinux-NewBackup
root@kvmubuntu:~# cp Bash-GnuLinux-NewBackup /usr/bin/
root@kvmubuntu:~# cat /etc/sudoers
  ...
  ## Allow root to run any commands anywhere
  root    ALL=(ALL)     ALL
  sysadmin        ALL=(ALL)       ALL
  netadmin        ALL=(root)      /usr/bin/nmtui
  #helpdesk1       ALL=(ALL)   /usr/bin/passwd, !/usr/bin/passwd sysadmin, !/usr/bin/passwd root
  ...
root@kvmubuntu:~# visudo
root@kvmubuntu:~# cat /etc/sudoers
  ...
  ## Allow root to run any commands anywhere
  root    ALL=(ALL)     ALL
  sysadmin        ALL=(ALL)       ALL
  netadmin        ALL=(root)      /usr/bin/nmtui
  #helpdesk1       ALL=(ALL)   /usr/bin/passwd, !/usr/bin/passwd sysadmin, !/usr/bin/passwd root
  backup1     ALL=(ALL)    ALL
  helpdesk1     ALL=(backup1)    /usr/bin/Bash-GnuLinux-NewBackup
  ...
root@kvmubuntu:~# su - helpdesk1
root@kvmubuntu:~# su - backup1 -c "sudo Bash-GnuLinux-NewBackup"
  sudo: a ter-tinal is required to read the password; either use the -S option to read from standard input or configure an askpass helper
root@kvmubuntu:~# su - helpdesk1
  Последний вход в систему: Пт апр 15 14:24:48 +08 2022 на pts/0
root@kvmubuntu:~# su - backup1 Bash-GnuLinux-NewBackup
  Последний вход в систему: Пт апр 15 14:27:43 +08 2022 на pts/0
  tar: Удаляется начальный `/' из имен объектов
  /data/
  /data/testfile5
  /data/testfile1
  /data/testfile3
  /data/testfile2
  /data/testfile4
root@kvmubuntu:~# exit
  выход
root@kvmubuntu:~# ls -l /home/backup1/
  итого 4
  -rw-r--r--. 1 root    root    183 апр 15 14:28 testArchive150422.tar.gz
Task:
Cконструируем сценарий, вычисляющий сумму ежемесячных платежей по кредиту. 
Для передачи сценария программе bc в следующем примере используется встроенный документ. 
loan-calc : сценарий вычисления суммы ежемесячных платежей по кредиту.
# Написаниие скриптов.
Decision:
#!/bin/bash
PROGNAME=$(basename $0)
usage () {
  cat <<- EOF
  Usage: $PROGNAME PRINCIPAL INTEREST MONTHS
  Where:
  PRINCIPAL is the amount of the loan.
  INTEREST is the APR as a number (7% = 0.07).
  MONTHS is the length of the loan's term.
  EOF
}
if (($# != 3)); then
  usage
  exit 1
fi
principal=$1
interest=$2
months=$3
bc <<- EOF
  scale = 10
  i = $interest / 12
  p = $principal
  n = $months
  a = p * ((i * ((1 + i) ^ n)) / (((1 + i) ^ n) - 1))
  print a, "\n"
  EOF
Task:
Определить файл или директория ваши данные.
# Написаниие скриптов.
Decision:
#!/bin/bash
dir=/home/ik/* # your data
for file in $dir
do
if [ -d "$file" ]
then
echo "$file - директория"
elif [ -f "$file" ]
then
echo "$file - файл"
else
echo "Неизвестный файл"
fi
done
Task:
Бэкап архив всех файлов.
# Написаниие скриптов.
Decision:
#!/bin/bash
BACKUPFILE=backup
archive=${1:-$BACKUPFILE}
find . -mtime -1 -type f -print0 | xargs -0 tar rvf "$archive.tar"
echo "Каталог $PWD заархивирован в файл \"$archive.tar\"."
exit 0
Task:
Напишите сценарий, который выводит дату, время, список зарегистрировавшихся пользователей, и uptime системы и сохраняет эту информацию в системном журнале.
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# vim Bash-GnuLinux-AboutUserLogFile.sh
root@kvmubuntu:~# cat Bash-GnuLinux-AboutUserLogFile.sh
#!/bin/bash
echo "выводит число секунд прошедших с начала эпохи unix:"
date '+%s'
echo "выводит локальное время:"
date '+%F %T'
echo "список зарегистрировавшихся обычных пользователей, которые создаются с UID от UID_MIN до UID_MAX которые определены в файле /etc/login.defs:"
awk '/^UID/{print $1"="$2}' /etc/login.defs
echo "из файла /etc/passwd выбрать только тех пользователей у которых UID (третий столбик :) из этого диапазона:"
eval $(awk '/^UID/{print $1"="$2}' /etc/login.defs)
awk -v min=$UID_MIN -v max=$UID_MAX -F: '$3>=min && $3<=max {print $1}' /etc/passwd
echo "uptime системы:"
uptime -p
root@kvmubuntu:~# ./Bash-GnuLinux-AboutUserLogFile.sh
  выводит число секунд прошедших с начала эпохи unix:
  1633836259
  выводит локальное время:
  2021-10-09 22:24:19
  список зарегистрировавшихся обычных пользователей, которые создаются с UID от UID_MIN до UID_MAX которые определены в файле /etc/login.defs:
  UID_MIN=1000
  UID_MAX=60000
  из файла /etc/passwd выбрать только тех пользователей у которых UID (третий столбик :) из этого диапазона:
  ubuntu
  uptime системы:
  up 21 minutes
root@kvmubuntu:~# cat Bash-GnuLinux-AboutUserLogFile.sh
#!/bin/bash
echo -e "Дата и Время:;$(date '+%F %T')\nПользователи:;$(eval $(awk '/^UID/{print $1"="$2}' /etc/login.defs) && awk -v min=$UID_MIN -v max=$UID_MAX -F: '$3>=min && $3<=max {print $1}' /etc/passwd)\nВремя работы (начало):;$(uptime -s)\nВремя работы (прошло):;$(uptime -p)" | column -t -s ";" | systemd-cat --identifier="задача3"
root@kvmubuntu:~# ./Bash-GnuLinux-AboutUserLogFile.sh
root@kvmubuntu:~# journalctl SYSLOG_IDENTIFIER="задача3"
  -- Logs begin at Fri 2021-05-21 06:21:13 CDT, end at Sat 2021-10-09 22:33:30 CDT. --
  Oct 09 22:25:25 ubuntu-VirtualBox задача3[2796]: Дата и Время:           2021-10-09 22:25:25
  Oct 09 22:25:25 ubuntu-VirtualBox задача3[2796]: Пользователи:           ubuntu
  Oct 09 22:25:25 ubuntu-VirtualBox задача3[2796]: Время работы (начало):  2021-10-09 22:02:57
  Oct 09 22:25:25 ubuntu-VirtualBox задача3[2796]: Время работы (прошло):  up 22 minutes
  Oct 09 22:26:23 ubuntu-VirtualBox задача3[2826]: Дата и Время:           2021-10-09 22:26:23
  Oct 09 22:26:23 ubuntu-VirtualBox задача3[2826]: Пользователи:           ubuntu
  Oct 09 22:26:23 ubuntu-VirtualBox задача3[2826]: Время работы (начало):  2021-10-09 22:02:57
  Oct 09 22:26:23 ubuntu-VirtualBox задача3[2826]: Время работы (прошло):  up 23 minutes
  Oct 09 22:29:41 ubuntu-VirtualBox задача3[2846]: Дата и Время:           2021-10-09 22:29:41
  Oct 09 22:29:41 ubuntu-VirtualBox задача3[2846]: Пользователи:           ubuntu
  Oct 09 22:29:41 ubuntu-VirtualBox задача3[2846]: Время работы (начало):  2021-10-09 22:02:57
  Oct 09 22:29:41 ubuntu-VirtualBox задача3[2846]: Время работы (прошло):  up 26 minutes
  Oct 09 22:31:48 ubuntu-VirtualBox задача3[2868]: Дата и Время:           2021-10-09 22:31:48
  Oct 09 22:31:48 ubuntu-VirtualBox задача3[2868]: Пользователи:           ubuntu
  Oct 09 22:31:48 ubuntu-VirtualBox задача3[2868]: Время работы (начало):  2021-10-09 22:02:57
  Oct 09 22:31:48 ubuntu-VirtualBox задача3[2868]: Время работы (прошло):  up 28 minutes
  Oct 09 22:33:30 ubuntu-VirtualBox задача3[2885]: Дата и Время:           2021-10-09 22:33:30
  Oct 09 22:33:30 ubuntu-VirtualBox задача3[2885]: Пользователи:           ubuntu
  Oct 09 22:33:30 ubuntu-VirtualBox задача3[2885]: Время работы (начало):  2021-10-09 22:02:57
  Oct 09 22:33:30 ubuntu-VirtualBox задача3[2885]: Время работы (прошло):  up 30 minutes
Task:
Создайте функции просмотра информации о пользователе(1), создания пользователя(2), удаления пользователя (3). 
Используйте case и select для использования этих функций в виде меню.
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# cat Bash-GnuLinux-AboutUser1.sh
#/bin/bash
aboutuser() {
  read -p "About user: " line
  cat /etc/passwd | grep -w $line
}
adduser(){
  read -p "Add user: " name
  #cut -d':' -f1 /etc/passwd | grep -w $name
}
deleteuser(){
  read -p "Delete user: " name
  #cut -d':' -f1 /etc/passwd | grep -w $name
}
user() {
  select option in "About user" "Add user" "Delete user" "Exit"
  do
  case $option in
      "About user") aboutuser ;;
      "Add user") adduser ;;
      "Delete user") deleteuser ;;
      "Exit") break ;;
      *) echo Wrong option ;;
  esac
  done
}
user
root@kvmubuntu:~# ./Bash-GnuLinux-AboutUser1.sh
1) About user
2) Add user
3) Delete user
4) Exit
#? 1
About user: d
d:x:1000:1000:,,,:/home/d:/bin/bash
#? 4
Task:
Создайте скрипт, который запрашивает имя пользователя, а в ответ выводит информацию о пользователе – его uid, домашнюю директорию, список групп, в которых он состоит.
После этого скрипт должен спросить, что следует поменять – uid, домашнюю директорию или группу.
Если uid, то сначала проверить, доступен ли такой uid, если нет – то один раз предложить ввести заново.
Если домашнюю директорию, то спросить, на какую директорию следует сменить, а также следует ли перемещать домашнюю директорию.
После чего следует вывести на экран итоговую команду.
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# cat Bash-GnuLinux-AboutUser.sh
#/bin/bash
read -p "Print username: " user
#idd=$(id -u $user)
id1=$(cat /etc/passwd | grep $user | cut -d ':' -f 4)
home1=$(cat /etc/passwd | grep $user | cut -d ':' -f 6)
group1=$(cat /etc/group | grep $user | cut -d ':' -f 1)
echo "uid = $id1"
echo "home = $home1"
echo "group = $group1"
read -p "What should be changed? (uid/home/group): " change
#echo "$change"
if [ $change == "uid" ]
then
  read -p "Write youser own version: " id2
  if cut -d':' -f3 /etc/passwd | grep -w $id2
  then
  echo "there is such a user"
  else
  #echo "there is no such user"
  read -p "Re-Enter. Write youser own version: " id2
  if cut -d':' -f3 /etc/passwd | grep -w $id2
      then
              echo "there is such a user"
  fi
  fi
elif [ $change == "home" ]
then
  read -p "Write youser own version: " home2
  if cut -d':' -f6 /etc/passwd | grep -w $home2
  then
  echo "Such a directory already exists"
  else
  echo "This is a unique home directory"
  fi
elif [ $change == "group" ]
then
  read -p "Write youser own version: " group2
  if cut -d':' -f1 /etc/group | grep -w $group2
  then
  echo "+"
  else
  echo "-"
  fi
else
  echo "command not found"
fi
root@kvmubuntu:~# ./Bash-GnuLinux-AboutUser.sh
Print username: tuser
uid = 1000
home = /home/tuser
group = dialout
cdrom
floppy
sudo
audio
dip
video
plugdev
netdev
What should be changed? (uid/home/group): uid
Write youser own version: 45435
Re-Enter. Write youser own version: 34534
Task:
программа вывода системной информации, управляемая с помощью меню.
# Написаниие скриптов.
Decision:
#!/bin/bash
# case-menu: 
clear
echo "
Please Select:
1. Display System Information
2. Display Disk Space
3. Display Home Space Utilization
0. Quit
"
read -p "Enter selection [0-3] > "
case $REPLY in
  q|Q)    echo "Program terminated."
      exit
      ;;
  a|A)    echo "Hostname: $HOSTNAME"
      uptime
      ;;
  b|B)    df -h
      ;;
  c|C)    if [[ $(id -u) -eq 0 ]]; then
          echo "Home Space Utilization (All Users)"
          du -sh /home/*
      else
          echo "Home Space Utilization ($USER)"
          du -sh $HOME
      fi
      ;;
  *)      echo "Invalid entry." >&2
      exit 1
      ;;
esac
Task:
простая программа получения информации о файле.
# Написаниие скриптов.
Decision:
#!/bin/bash
# file_info: 
PROGNAME=$(basename $0)
if [[ -e $1 ]]; then
  echo -e "\nFile Type:"
  file $1
  echo -e "\nFile Status:"
  stat $1
else
  echo "$PROGNAME: usage: $PROGNAME file" >&2
  exit 1
fi
Task:
сценарий для подсчета файлов по времени изменения.
# Написаниие скриптов.
Decision:
#/bin/bash
# hours : 
usage () {
  echo "usage: $(basename $0) directory" >&2
}
# Убедиться, что аргумент является каталогом
if [[ ! -d $1 ]]; then
  usage
  exit 1
fi
# Инициализировать массив
for i in {0..23}; do hours[i]=0; done
# Собрать данные
for i in $(stat -c %y "$1"/* | cut -c 12-13); do
  j=${i/#0}
  ((++hours[j]))
  ((++count))
done
# Вывести данные
echo -e "Hour\tFiles\tHour\tFiles"
echo -e "----\t-----\t----\t-----"
for i in {0..11}; do
  j=$((i + 12))
  printf "%02d\t%d\t%02d\t%d\n" $i ${hours[i]} $j ${hours[j]}
done
printf "\nTotal files = %d\n" $count
Task:
демонстрация подстановки процессов.
# Написаниие скриптов.
Decision:
#/bin/bash
# pro-sub : 
while read attr links owner group size date time filename; do
  cat <<- EOF
  Filename:   $filename
  Size:       $size
  Owner:      $owner
  Group:      $group
  Modified:   $date $time
  Links:      $links
  Attributes: $attr
  EOF
done < <(ls -l | tail -n +2)
Task:
чтение полей из файла.
# Написаниие скриптов.
Decision:
#!/bin/bash
# read-ifs: 
FILE=/etc/passwd
read -p "Enter a username > " user_name
file_info=$(grep "^$user_name:" $FILE)
if [ -n "$file_info" ]; then
  IFS=":" read user pw uid gid name home shell <<< "$file_info"
  echo "User = '$user'"
  echo "UID = '$uid'"
  echo "GID = '$gid'"
  echo "Full Name = '$name'"
  echo "Home Dir. = '$home'"
  echo "Shell = '$shell'"
else
  echo "No such user '$user_name'" >&2
  exit 1
fi
Task:
программа вывода системной информации, управляемая с помощью меню.
# Написаниие скриптов.
Decision:
#!/bin/bash
# read-menu: 
clear
echo "
Please Select:
1. Display System Information
2. Display Disk Space
3. Display Home Space Utilization
0. Quit
"
read -p "Enter selection [0-3] > "
if [[ $REPLY =~ ^[0-3]$ ]]; then
  if [[ $REPLY == 0 ]]; then
  echo "Program terminated."
  exit
  fi
  if [[ $REPLY == 1 ]]; then
  echo "Hostname: $HOSTNAME"
  uptime
  exit
  fi
  if [[ $REPLY == 2 ]]; then
  df -h
  exit
  fi
  if [[ $REPLY == 3 ]]; then
  if [[ $(id -u) -eq 0 ]]; then
      echo "Home Space Utilization (All Users)"
      du -sh /home/*
  else
      echo "Home Space Utilization ($USER)"
      du -sh $HOME
  fi
  exit
  fi
else
  echo "Invalid entry." >&2
  exit 1 fi
Task:
ввод секретного пароля.
# Написаниие скриптов.
Decision:
#!/bin/bash
# read-secret: 
if read -t 10 -sp "Enter secret passphrase > " secret_pass; then
  echo -e "\nSecret passphrase = '$secret_pass'"
else
  echo -e "\nInput timed out" >&2
  exit 1
fi
Task:
проверка ввода.
# Написаниие скриптов.
Decision:
#!/bin/bash
# read-validate: 
invalid_input () {
  echo "Invalid input '$REPLY'" >&2
  exit 1
}
read -p "Enter a single item > "
# пустой ввод (недопустимо)
[[ -z $REPLY ]] && invalid_input
# ввод множества элементов (недопустимо)
(( $(echo $REPLY | wc -w) > 1 )) && invalid_input
# введено допустимое имя файла?
if [[ $REPLY =~ ^[-[:alnum:]\._]+$ ]]; then
  echo "'$REPLY' is a valid filename."
  if [[ -e $REPLY ]]; then
  echo "And file '$REPLY' exists."
  else
  echo "However, file '$REPLY' does not exist."
  fi
  # введено вещественное число?
  if [[ $REPLY =~ ^-?[[:digit:]]*\.[[:digit:]]+$ ]]; then
  echo "'$REPLY' is a floating point number."
  else
  echo "'$REPLY' is not a floating point number."
  fi
  # введено целое число?
  if [[ $REPLY =~ ^-?[[:digit:]]+$ ]]; then
  echo "'$REPLY' is an integer."
  else
  echo "'$REPLY' is not an integer."
  fi
else
  echo "The string '$REPLY' is not a valid filename."
fi
Task:
Программа вывода страницы с информацией о системе.
# Написаниие скриптов.
Decision:
#/bin/bash
PROGNAME=$(basename $0)
TITLE="System Information Report For $HOSTNAME"
CURRENT_TIME=$(date +"%x %r %Z")
TIME_STAMP="Generated $CURRENT_TIME, by $USER"
report_uptime () {
  cat <<- _EOF_
  <H2>System Uptime</H2>
  <PRE>$(uptime)</PRE>
  _EOF_
  return
}
report_disk_space () {
  cat <<- _EOF_
  <H2>Disk Space Utilization</H2>
  <PRE>$(df -h)</PRE>
  _EOF_
  return
}
report_home_space () {
  local format="%8s%10s%10s\n"
  local i dir_list total_files total_dirs total_size user_name
  if [[ $(id -u) -eq 0 ]]; then
  dir_list=/home/*
  user_name="All Users"
  else
  dir_list=$HOME
  user_name=$USER
  fi
  echo "<H2>Home Space Utilization ($user_name)</H2>"
  for i in $dir_list; do   
  total_files=$(find $i -type f | wc -l)
  total_dirs=$(find $i -type d | wc -l)
  total_size=$(du -sh $i | cut -f 1)
  echo "<H3>$i</H3>"
  echo "<PRE>"
  printf "$format" "Dirs" "Files" "Size"
  printf "$format" "----" "-----" "----"
  printf "$format" $total_dirs $total_files $total_size
  echo "</PRE>"
  done
  return
}
usage () {
  echo "$PROGNAME: usage: $PROGNAME [-f file | -i]"
  return
}
write_html_page () {
  cat <<- _EOF_
  <HTML>
  <HEAD>
      <TITLE>$TITLE</TITLE>
  </HEAD>
  <BODY>
      <H1>$TITLE</H1>
      <P>$TIME_STAMP</P>
      $(report_uptime)
      $(report_disk_space)
      $(report_home_space)    
  </BODY>
  </HTML>
  _EOF_
  return
}
# обработка параметров командной строки
interactive=
filename=
while [[ -n $1 ]]; do
  case $1 in
  -f | --file)        shift
          filename=$1
          ;;
  -i | --interactive) interactive=1
          ;;
  -h | --help)        usage
          exit
          ;;
  *)          usage >&2
          exit 1
          ;;
  esac
  shift
done
# интерактивный режим
if [[ -n $interactive ]]; then
  while true; do
  read -p "Enter name of output file: " filename
  if [[ -e $filename ]]; then
      read -p "'$filename' exists. Overwrite? [y/n/q] > "
      case $REPLY in
          Y|y)    break
              ;;
          Q|q)    echo "Program terminated."
              exit
              ;;
          *)  continue
              ;;
      esac
  fi
  done
fi
# вывод страницы html
if [[ -n $filename ]]; then
  if touch $filename && [[ -f $filename ]]; then
  write_html_page > $filename
  else
  echo "$PROGNAME: Cannot write file '$filename'" >&2
  exit 1
  fi
else
  write_html_page
fi
Task:
сценарий для демонстрации распространенных видов ошибок.
# Написаниие скриптов.
Decision:
#!/bin/bash
# trouble: 
number=1
echo "number=$number" # ОТЛАДКА
set -x # Включить трассировку
if [ $number = 1 ]; then
echo "Number is equal to 1."
else
echo "Number is not equal to 1."
fi
set +x # Выключить трассировку
Task:
программа вывода системной информации, управляемая с помощью меню.
# Написаниие скриптов.
Decision:
#!/bin/bash
# while-menu: 
DELAY=3 # Время отображения результатов на экране (в секундах)
while [[ $REPLY != 0 ]]; do
clear
cat <<- _EOF_
Please Select:
1. Display System Information
2. Display Disk Space
3. Display Home Space Utilization
4. Quit
_EOF_
read -p "Enter selection [0-3] > "
if [[ $REPLY =~ ^[0-3]$ ]]; then
if [[ $REPLY == 1 ]]; then
echo "Hostname: $HOSTNAME"
uptime
sleep $DELAY
fi
if [[ $REPLY == 2 ]]; then
df -h
sleep $DELAY
fi
if [[ $REPLY == 3 ]]; then
if [[ $(id -u) -eq 0 ]]; then
echo "Home Space Utilization (All Users)"
du -sh /home/*
else
echo "Home Space Utilization ($USER)"
du -sh $HOME
fi
sleep $DELAY
fi
else
echo "Invalid entry."
sleep $DELAY
fi
done
echo "Program terminated."
Task:
программа вывода системной информации, управляемая с помощью меню.
# Написаниие скриптов.
Decision:
#!/bin/bash
# while-menu2: 
DELAY=3 # Время отображения результатов на экране (в секундах)
while true; do
clear
cat <<- _EOF_
Please Select:
1. Display System Information
2. Display Disk Space
3. Display Home Space Utilization
4. Quit
_EOF_
read -p "Enter selection [0-3] > "
if [[ $REPLY =~ ^[0-3]$ ]]; then
if [[ $REPLY == 1 ]]; then
echo "Hostname: $HOSTNAME"
uptime
sleep $DELAY
continue
fi
if [[ $REPLY == 2 ]]; then
df -h
sleep $DELAY
continue
fi
if [[ $REPLY == 3 ]]; then
if [[ $(id -u) -eq 0 ]]; then
echo "Home Space Utilization (All Users)"
du -sh /home/*
else
echo "Home Space Utilization ($USER)"
du -sh $HOME
fi
sleep $DELAY
continue
fi
if [[ $REPLY == 0 ]]; then
break
fi
else
echo "Invalid entry."
sleep $DELAY
fi
done
echo "Program terminated."
Task:
Напишите bash-скрипт, сохраняющий подробное описание объектов, расположенных в каталоге /home/de13ma, 
но не принадлежащих пользователю de13ma (владелец не de13ma) в файл description.txt. 
В задаче есть допущение что имя файла или группы не может содержать слово de13ma.
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# cat Linux-Description4.sh
#!/bin/bash
ls -l /home/de13ma | grep -v "de13ma" > /tdir/description.txt
Task:
Напишите bash-скрипт, сохраняющий все запущенные процессы пользователя de13ma в файл processes.txt. 
В задаче есть допущение что имя процесса не может содержать слово de13ma.
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# cat Linux-Processes4.sh
#!/bin/bash
ps -fu de13ma > processes.txt
Task:
Записать строку в конец файла linux .
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# cat testfile
Hey
root@kvmubuntu:~# cat testscript.sh
#!/bin/bash
echo USERSPASSWORD | sudo -S sudo sh -c "echo 'bro' >> /home/dato/testdir/testfile"
root@kvmubuntu:~# ./testscript.sh
root@kvmubuntu:~# ./testscript.sh
root@kvmubuntu:~# cat testfile
Hey
bro
bro
Source:
# https://jeka.by/ask/165/bash-add-string-in-file/
Task:
Напишите скрипт на bash, который принимает на вход два аргумента и выводит на экран строку следующего вида:
Arguments are: $1=первый_аргумент $2=второй_аргумент
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# cat Linux-StandartStreams.sh
#/bin/bash
var1=$1
var2=$2
echo "Arguments are:" \$1=$var1 \$2=$var2
Task:
Напишите скрипт на bash, который принимает на вход один аргумент (целое число от 0 до бесконечности), который будет обозначать число студентов в аудитории. В зависимости от значения числа нужно вывести разные сообщения.
Соответствие входа и выхода должно быть таким:
  0 -->  No students
  1 -->  1 student
  2 -->  2 students
  3 -->  3 students
  4 -->  4 students
  5 и больше --> A lot of students
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# cat Linux-StandartStreams2.sh
#!/bin/bash
number=student
case $1 in
0) result="No ${number}s";;
1) result="$1 ${number}";;
[2-4]) result="$1 ${number}s";;
*) result="A lot of ${number}s";;
esac
echo "$result"
Task:
Предположим, вы пишете скрипт на bash и хотите использовать в нем конструкцию if в следующем фрагменте:
  if [[ ... ]]
  then
  echo "True"
  fi
Вы можете вписать вместо "..." (внутри [[ ]] и не забудьте про пробелы после [[ и перед ]]!) любое из перечисленных ниже условий.
1) $# -ge 0
2) $var1 == $var2 && $var1 != $var2
3) -e $0
4) -z " "
5) -s $0
6) $var1 == $var2 || $var1 != $var2
Однако мы просим вас выбрать только те из них, при которых echo напечатает на экран True вне зависимости от того, с какими параметрами был запущен ваш скрипт и какие в нем есть переменные.
#Например, условие 0 -eq 0 подходит, т.к. ноль всегда равен нулю вне зависимости от аргументов и переменных внутри скрипта и на экран будет напечатано True.  В то же время условие $var1 -eq 0 не подходит, так как в переменной var1 как может быть записан ноль (тогда будет напечатано True), так его может и не быть (тогда ничего напечатано не будет).
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# cat Linux-StandartStreams1.sh
#!/bin/bash
if [[ $# -ge 0 ]] # -ge больше или равно
then
  echo "True1"
fi
if [[ $var1 == $var2 && $var1 != $var2 ]]
then
  echo "True2"
fi
if [[ -e $0 ]] # -e <путь> путь существует
then
  echo "True3"
fi
if [[ -z " " ]] # -z <строка> строка пуста
then
  echo "True4"
fi
if [[ -s $0 ]] # -s <путь> размер файла больше 0
then
  echo "True5"
fi
if [[ $var1 == $var2 || $var1 != $var2 ]]
then
  echo "True6"
fi
Task:
Создайте файл со списком пользователей. С помощью for выведите на экран текст: «Creating new ur: uradd имя_пользователя».
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# cat Linux-CreatingNewUser.sh
#/bin/bash
cut -d':' -f1 /etc/passwd >> testfile4
for line in $(cat testfile4)
do echo "Creating new ur: uradd $line"
done
Task:
Определить, что является файлом, а что папкой в заданном каталоге.
# Написаниие скриптов.
Decision:
root@kvmubuntu:~# cat Linux-LsLtAFileOrADirectory.sh
#!/bin/bash
dir=/home/*
for file in $dir
do
if [ -d "$file" ]
then
echo "$file - директория"
elif [ -f "$file" ]
then
echo "$file - файл"
else
echo "Неизвестный файл"
fi
done
Task:
Установка Subversion - система контроля версий.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# yum list | grep subversion
subversion.x86_64 1.10.2-1.module_el8.0.0+45+75bba4f4 @AppStream
subversion-libs.x86_64 1.10.2-1.module_el8.0.0+45+75bba4f4 @AppStream
subversion-devel.x86_64 1.10.2-1.module_el8.0.0+45+75bba4f4 AppStream
subversion-gnome.x86_64 1.10.2-1.module_el8.0.0+45+75bba4f4 AppStream
subversion-javahl.noarch 1.10.2-1.module_el8.0.0+45+75bba4f4 AppStream
subversion-perl.x86_64 1.10.2-1.module_el8.0.0+45+75bba4f4 AppStream
subversion-tools.x86_64 1.10.2-1.module_el8.0.0+45+75bba4f4 AppStream
[root@kvmcentos ~]# yum -y install subversion
[root@kvmcentos ~]# svnversion --version
Task:
Работаем с репозиторием.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# vim /etc/xinetd.d/ssh 
[root@kvmcentos ~]# cat /etc/xinetd.d/ssh
service ssh 
{
disable = yes
socket_type = stream
protocol = tcp
port = 22
wait = no
user = root
server = /usr/sbin/sshd
server_args = -i
only_from = 192.168.0.0
}
[root@kvmcentos ~]# systemctl restart xinetd
[root@kvmcentos ~]# systemctl restart sshd
Task:
Создаем репозиторий.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# svnadmin create /svn/myrepo
[root@kvmcentos ~]# svn info file:///svn/myrepo/
Path: myrepo
URL: file:///svn/myrepo
Relative URL: ^/
Repository Root: file:///svn/myrepo
Repository UUID: bbe1dc47-235c-4cf4-b253-af3d81a943a3
Revision: 0
Node Kind: directory
Last Changed Rev: 0
Last Changed Date: 2020-04-09 21:36:41 -0400 (Чт, 09 апр 2020)
Task:
Репозиторий пустой о чем говорит “Revision: 0”. С каждым новым измением в репозитории номер ревизии будет увеличиваться на единицу.
В каталоге docs я подготовил несколько файлов которые положат начало новому репозиторию.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# ls -l docs
итого 12
-rw-r--r--. 1 root root 14 апр 9 21:40 file1
-rw-r--r--. 1 root root 14 апр 9 21:40 file2
-rw-r--r--. 1 root root 15 апр 9 21:40 file3
[root@kvmcentos ~]# svn import docs file:///svn/myrepo/ -m "start the dance"
Adding docs/file1
Adding docs/file2
Adding docs/file3
Committing transaction...
Committed revision 1.
[root@kvmcentos ~]# svn info file:///svn/myrepo/
Path: myrepo
URL: file:///svn/myrepo
Relative URL: ^/
Repository Root: file:///svn/myrepo
Repository UUID: bbe1dc47-235c-4cf4-b253-af3d81a943a3
Revision: 1
Node Kind: directory
Last Changed Author: root
Last Changed Rev: 1
Last Changed Date: 2020-04-09 21:41:48 -0400 (Чт, 09 апр 2020)
[root@kvmcentos ~]# svn list file:///svn/myrepo/
file1
file2
file3
Task:
У нас получился репозиторий с тремя файлами. Теперь мы создадим рабочую копию этого репозитория и поработаем с ней.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# svn co file:///svn/myrepo/
A myrepo/file1
A myrepo/file2
A myrepo/file3
Checked out revision 1.
[root@kvmcentos ~]# ls -l
итого 0
drwxr-xr-x. 2 root root 45 апр 9 21:40 docs
drwxr-xr-x. 3 root root 57 апр 9 21:43 myrepo
[root@kvmcentos ~]# cd myrepo/
[root@kvmcentos ~]# ls -l
итого 12
-rw-r--r--. 1 root root 14 апр 9 21:43 file1
-rw-r--r--. 1 root root 14 апр 9 21:43 file2
-rw-r--r--. 1 root root 15 апр 9 21:43 file3
[root@kvmcentos ~]# echo "new line" >> file1
[root@kvmcentos ~]# cat myrepo/file1
it is file 1
new line
new line2
[root@kvmcentos ~]# svn commit -m "file1 has been modified"
Sending file1
Transmitting file data .done
Committing transaction...
Committed revision 2.
[root@kvmcentos ~]# ls -l /svn/myrepo
итого 12
drwxr-xr-x. 2 root root 76 апр 9 21:36 conf
drwxr-sr-x. 6 root root 4096 апр 9 21:46 db
-r--r--r--. 1 root root 2 апр 9 21:36 format
drwxr-xr-x. 2 root root 231 апр 9 21:36 hooks
drwxr-xr-x. 2 root root 41 апр 9 21:36 locks
-rw-r--r--. 1 root root 246 апр 9 21:36 README.txt
[root@kvmcentos ~]# ifconfig
...
inet tipcentos
...
Decision:
[root@kvmcentos ~]# yum -y install subversion
[root@kvmcentos ~]# pwd
/home/tuser
Task:
Получение копии репозитория с удаленного сервера где у вас есть аккаунт
Убедитесь, что пользователь включен в нужную группу для доступа к репозиториям.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# svn co svn+ssh://root@tipcentos/svn/myrepo
root@tipcentos's password:
A myrepo/file1
A myrepo/file2
A myrepo/file3
Получена редакция 3.
[root@kvmcentos ~]# ls myrepo/
file1 file2 file3
[root@kvmcentos ~]# cd myrepo/
[root@kvmcentos ~]# cat file2
it is file 2
[root@kvmcentos ~]# vim file2
[root@kvmcentos ~]# cat file2
it is file 2
new modificate 1
[root@kvmcentos ~]# svn commit -m "file2 has been modified"
root@tipcentos's password:
Посылаю file2
Передаю данные .done
Committing transaction...
Committed revision 4.
[root@kvmcentos ~]# cat file3
it is file 3
[root@kvmcentos ~]# vim file3
[root@kvmcentos ~]# cat file3
it is file 3
new file3
[root@kvmcentos ~]# svn commit -m "file3 has been modified"
Sending file3
Transmitting file data .done
Committing transaction...
Committed revision 5.
[root@kvmcentos ~]# svn info file:///svn/myrepo
Path: myrepo
URL: file:///svn/myrepo
Relative URL: ^/
Repository Root: file:///svn/myrepo
Repository UUID: bbe1dc47-235c-4cf4-b253-af3d81a943a3
Revision: 5
Node Kind: directory
Last Changed Author: root
Last Changed Rev: 5
Last Changed Date: 2020-04-29 07:43:37 -0400 (Ср, 29 апр 2020)
[root@kvmcentos ~]# cat file3
it is file 3
[root@kvmcentos ~]# vim file3
[root@kvmcentos ~]# cat file3
it is file 3
modified ubuntu3
[root@kvmcentos ~]# svn commit -m "file3 has been modified ubuntu3"
root@tipcentos's password:
Посылаю file3
Передаю данные .done
Committing transaction...
svn: E160028: Фиксация не удалась (подробности приведены ниже):
svn: E160028: File '/file3' is out of date
[root@kvmcentos ~]# svn update
Updating '.':
root@tipcentos's password:
C file3
Обновлено до редакции 5.
Summary of conflicts:
Text conflicts: 1
Conflict discovered in file 'file3'.
Select: (p) postpone, (df) show diff, (e) edit file, (m) merge,
(mc) my side of conflict, (tc) their side of conflict,
(s) show all options: m
Merging 'file3'.
Conflicting section found during merge:
(1) their version (at line 2) |(2) your version (at line 2)
--------------------------------------+--------------------------------------
new file3 |modified ubuntu3
--------------------------------------+--------------------------------------
Select: (1) use their version, (2) use your version,
(12) their version first, then yours,
(21) your version first, then theirs,
(e1) edit their version and use the result,
(e2) edit your version and use the result,
(eb) edit both versions and use the result,
(p) postpone this conflicting section leaving conflict markers,
(a) abort file merge and return to main menu: 2
Merge of 'file3' completed.
Select: (p) postpone, (df) show diff, (e) edit file, (m) merge,
(r) mark resolved, (mc) my side of conflict,
(tc) their side of conflict, (s) show all options: p
Summary of conflicts:
Text conflicts: 1
[root@kvmcentos ~]# ls
file1 file2 file3 file3.mine file3.r3 file3.r5
[root@kvmcentos ~]# cat file3.r3
it is file 3
[root@kvmcentos ~]# cat file3.r5
it is file 3
new file3
[root@kvmcentos ~]# cat file3.mine
it is file 3
modified ubuntu3
[root@kvmcentos ~]# rm -f file3.r3 file3.r5 file3.mine
[root@kvmcentos ~]# vim file3
[root@kvmcentos ~]# cat file3
it is file 3
modified ubuntu3
[root@kvmcentos ~]# svn commit -m "file3 has been modified ubuntu3"
root@tipcentos's password:
Посылаю file3
Передаю данные .done
Committing transaction...
Committed revision 6.
[root@kvmcentos ~]# svn update
Updating '.':
U file3
U file2
Updated to revision 6.
[root@kvmcentos ~]# ls -l
итого 12
-rw-r--r--. 1 root root 33 апр 29 06:47 file1
-rw-r--r--. 1 root root 30 апр 29 07:57 file2
-rw-r--r--. 1 root root 30 апр 29 07:57 file3
[root@kvmcentos ~]# cat file3
it is file 3
modified ubuntu3
Task:
Системный пользователь, который не является членом группы agents.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# svn list svn+ssh://mybestuser@linuxbox/svn/myrepo 
mybestuser@linuxbox's password:
file1
file2
file3
secret/
[root@kvmcentos ~]# svn list svn+ssh://mybestuser@linuxbox/svn/myrepo/secret
mybestuser@linuxbox's password:
svn: Authorization failed
[root@kvmcentos ~]# svn list svn+ssh://mybestuser@linuxbox/svn/myrepo/secret/public
mybestuser@linuxbox’s password:
file3
Task:
Ограничение доступа
У нас уже есть репозиторий /svn/myrepo и сейчас мы разберемся с правами доступа к нему.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# useradd james
[root@kvmcentos ~]# passwd james
[root@kvmcentos ~]# ls -l /svn/myrepo/conf/
итого 20
-rw-r--r--. 1 root root 1080 апр 9 21:36 authz
-rw-r--r--. 1 root root 885 апр 9 21:36 hooks-env.tmpl
-rw-r--r--. 1 root root 309 апр 9 21:36 passwd
-rw-r--r--. 1 root root 4391 апр 29 08:05 svnserve.conf
[root@kvmcentos ~]# vim /svn/myrepo/conf/svnserve.conf
[root@kvmcentos ~]# cat /svn/myrepo/conf/svnserve.conf
...
[general]
anon-access = none
[root@kvmcentos ~]#auth-access = write
[root@kvmcentos ~]#password-db = passwd
authz-db = authz
[root@kvmcentos ~]#realm = Bunch_Of_My_Repos
Task:
Передаваемая информация не шифруется. Этот способ устарел и я не рекомендую его использовать.
Чтобы вы примерно понимали что это за файл я вам приведу пример.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# cat /svn/myrepo/conf/passwd
[users]
[root@kvmcentos ~]# harry = harryssecret
[root@kvmcentos ~]# sally = sallyssecret
[root@kvmcentos ~]# cat /svn/myrepo/conf/passwd
This file is an example password file for svnserve.
[root@kvmcentos ~]### Its format is similar to that of svnserve.conf. As shown in the
[root@kvmcentos ~]### example below it contains one section labelled [users].
[root@kvmcentos ~]### The name and password for each user follow, one account per line.
[users]
[root@kvmcentos ~]#harry = harryssecret
[root@kvmcentos ~]#sally = sallyssecret
james = qaz
Task:
В файле svnserve.conf раскоментируем строку password-db = passwd, в файл authz добавим запись для пользователя harry если общая политика ему не подходит.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# vim /svn/myrepo/conf/svnserve.conf
...
[general]
anon-access = none
[root@kvmcentos ~]#auth-access = write
password-db = passwd
authz-db = authz
[root@kvmcentos ~]#realm = Bunch_Of_My_Repos
Task:
Запустим службу svnserve.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# svnserve -d
[root@kvmcentos ~]# svn list svn://harry@kvm-tcentos/svn/myrepo
Authentication realm: <svn://kvm-tcentos:3690> bbe1dc47-235c-4cf4-b253-af3d81a943a3
Password for 'root': *************
Authentication realm: <svn://kvm-tcentos:3690> bbe1dc47-235c-4cf4-b253-af3d81a943a3
Username: james
Password for 'james': ***
-----------------------------------------------------------------------
ATTENTION! Your password for authentication realm:
<svn://kvm-tcentos:3690> bbe1dc47-235c-4cf4-b253-af3d81a943a3
can only be stored to disk unencrypted! You are advised to configure
your system so that Subversion can store passwords encrypted, if
possible. See the documentation for details.
You can avoid future appearances of this warning by setting the value
of the 'store-plaintext-passwords' option to either 'yes' or 'no' in
'/root/.subversion/servers'.
-----------------------------------------------------------------------
Store password unencrypted (yes/no)? yes
file1
file2
file3
Task:
В том же каталоге где и svnserve.conf (<путь к репозиторию>/conf/) создаем файл authz и вносим в него конфигурацию.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# vim /svn/myrepo/conf/authz
[root@kvmcentos ~]# cat /svn/myrepo/conf/authz
agents = james, piter
[/]
*=r
[/secret]
@agents = rw
*=
[/secret/public]
* = rw
Task:
Системный пользователь, который является членом группы agents.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# svn list svn+ssh://james@tipcentos/svn/myrepo
james@linuxbox's password:
file1
file2
file3
secret/
[root@kvmcentos ~]# svn list svn+ssh://james@tipcentos/svn/myrepo/secret
james@linuxbox's password:
file1
file2
file3
public/
[root@kvmcentos ~]# svn list svn+ssh://james@tipcentos/svn/myrepo/secret/public
james@linuxbox’s password:
file3
Source:
# https://www.youtube.com/playlist?list=PLtSGboPf3g50Aejrp6KjQsqqjxvAO4aKw
# https://www.youtube.com/playlist?list=PLdEqf7lxtAH--exov42yypdvOi7bDqoBQ
# https://losst.ru/proverka-linux-na-virusy
# https://www.youtube.com/watch?v=t6wO3qsxrSo&list=PL76C3E97EB0FDB323&index=18&t=0s
# https://linuxconfig.org/how-to-install-xinetd-service-in-redhat
Task:
Установить Visualstudio в Linux.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# rpm --import https://packages.microsoft.com/keys/microsoft.asc
root@kvmubuntu:~# sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
root@kvmubuntu:~# dnf check-update
root@kvmubuntu:~# dnf install code -y
root@kvmubuntu:~# code
Source:
# https://code.visualstudio.com/docs/setup/linux
Task:
Рассмотрим легкий способ анонимной и конфиденциальной переписки на основе i2p + XMPP (протокол обмена сообщениями). Мы создаем свой XMPP сервер на нашем localhost и кинем все его хосты внутри сети i2p, который выделит нам криптографический адрес, по которому наш собеседник может вступить с нами в контакт.
- Всю реализацию буду делать внутри виртуальной машины. Cначала установим сервис i2p. рассмотреть на убунту и центес 8.
- После установки создаем серверный I2P туннель - это виртуальный адрес, по которому наш XMPP сервер будет доступен.
- Узнаем какой у нас будет криптографический адрес через браузер 127.0.0.1:7070. это и будет домен для вашего XMPP сервера, его надо будет сохранить.
- Устанавливаем сервер XMPP под cвою ОС.
- Устанавливаем модуль mod_darknet в директорию модулей prosody.
- В самом низу prosody.cfg.lua нужно прописать такой код (Замените xxx.b32.i2p на свой адрес, который мы сохраняли ранее):
- Генерируем сертификаты шифрования всталяя теже значения домена, которые мы сохраняли ранее
- Добавляем админский аккаунт
- После этого мы можем законектиться к нашему серверу через pidgin-клиент. Если вы подключаетесь локально к серверу, то в настройках клиента указываем подключение к серверу 127.0.0.1 порт 5222. Если подключаетесь к серверу удаленно через I2P, то указывайте в настройках прокси Socks5 127.0.0.1:4447 При подключении нас предупредят, сертификаты шифрования самописные, так как мы сами их сгенерировали.
- После этого мы можем подлючить второго собеседника через вторую виртуальную машину. Также на ней установим шлюз i2p, который будет являться нашим локальным прокси i2p.
- Вернемся в первую машину и создадим для нашего собеседника аккаунт на сервере
- Во второй машине проверяем. Указываем тут домен нашего сервера, порт 5222, укажем, что трафик должен идти через прокси типа SOCKS 5, который находится на localhost 127.0.0.1, порт - 4447. При подключении нас также предупредят,что сертификаты шифрования самописные, если все сделали правильно. Остается только запросить авторизацию наших собеседников для того, чтобы создать чат.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# add-apt-repository ppa:purplei2p/i2pd
root@kvmubuntu:~# apt-get update
root@kvmubuntu:~# apt-get install i2pd
[root@kvmcentos ~]# curl -s https://copr.fedorainfracloud.org/coprs/r4sas/miniupnpc/repo/epel-8/r4sas-miniupnpc-epel-8.repo -o /etc/yum.repos.d/miniupnpc-epel-8.repo
[root@kvmcentos ~]# curl -s https://copr.fedorainfracloud.org/coprs/supervillain/i2pd/repo/epel-8/supervillain-i2pd-epel-8.repo -o /etc/yum.repos.d/i2pd-epel-8.repo
[root@kvmcentos ~]# yum install epel-release -y
[root@kvmcentos ~]# yum install i2pd -y
[root@kvmcentos ~]# systemctl enable i2pd
[root@kvmcentos ~]# systemctl start i2pd
[root@kvmcentos ~]# find / -name tunnels.conf
...
/etc/i2pd/tunnels.conf
[root@kvmcentos ~]# cat /etc/i2pd/tunnels.conf
...
[IRC-IRC2P]
#[IRC-ILITA]
#[SMTP]
#[POP3]
[root@kvmcentos ~]# see more examples at https://i2pd.readthedocs.io/en/latest/user-guide/tunnels/
[root@kvmcentos ~]# vim /etc/i2pd/tunnels.conf
[root@kvmcentos ~]# cat /etc/i2pd/tunnels.conf
[IRC-IRC2P]
...
#[IRC-ILITA]
#[SMTP]
#[POP3]
#see more examples at https://i2pd.readthedocs.io/en/latest/user-guide/tunnels/
[prosody-s2s]
type=server
host=127.0.0.1
port=5269
inport=5269
keys=prosody.dat
[prosody-c2s]
type=server
host=127.0.0.1
port=5222
inport=5222
keys=prosody.dat
[root@kvmcentos ~]# systemctl restart i2pd
[root@kvmcentos ~]# yum list | grep prosody
prosody.x86_64         0.11.5-1.el8       epel
[root@kvmcentos ~]# yum install prosody -y
Устанавливаем lua библиотеку bit32
[root@kvmcentos ~]# yum list | grep lua
    ...
    lua5.1-basexx.noarch                                 0.4.0-2.el8 epel                                             
    lua5.1-binaryheap.noarch                             0.4-1.el8 epel                                             
    lua5.1-bitop.x86_64                                  1.0.2-5.el8 epel                                             
    lua5.1-compat53.x86_64                               0.7-3.el8 epel                                             
    lua5.1-cqueues.x86_64                                20190813-3.el8 epel
    lua5.1-fifo.noarch                                   0.2-2.el8 epel                                             
    lua5.1-http.noarch                                   0.3-5.el8 epel                                             
    lua5.1-lpeg.x86_64                                   1.0.2-1.el8 epel                                             
    lua5.1-lpeg-patterns.noarch                          0.5-4.el8 epel                                             
    lua5.1-luaossl.x86_64                                20190731-1.el8 epel                                           
    lua5.1-luv.x86_64                                    1.36.0.0-1.el8 epel
    lua5.1-luv-devel.x86_64                              1.36.0.0-1.el8                                    epel
    lua5.1-mmdb.noarch                                   0.2-2.el8                                         epel    lua5.1-mpack.x86_64                                  1.0.8-3.el8                                       epel   
    ...
[root@kvmcentos ~]# yum install lua5.1-basexx lua5.1-binaryheap lua5.1-compat53 lua5.1-bitop lua5.1-cqueues lua5.1-fifo lua5.1-http lua5.1-lpeg lua5.1-lpeg-patterns lua5.1-luaossl lua5.1-luv lua5.1-luv-devel lua5.1-mmdb lua5.1-mpack -y
[root@kvmcentos ~]# find / -name modules
...
/usr/lib64/prosody/modules
[root@kvmcentos ~]# cd /usr/lib64/prosody/modules
[root@kvmcentos ~]# wget https://raw.githubusercontent.com/majestrate/mod_darknet/master/mod_darknet.lua
[root@kvmcentos ~]# ls -l
...
-rw-r--r--. 1 root root 8478 июн 6 02:57 mod_darknet.lua
[root@kvmcentos ~]# vim /etc/prosody/prosody.cfg.lua
[root@kvmcentos ~]# cat /etc/prosody/prosody.cfg.lua
interfaces = { "127.0.0.1" };
admins = { "admin@xxx.b32.i2p" };
modules_enabled = {
    "roster"; "saslauth"; "tls"; "dialback"; "disco"; "posix"; "private"; "vcard";  "ping";  "register"; "admin_adhoc"; "darknet";
};
modules_disabled = {};
allow_registration = false;
darknet_only = true;
c2s_require_encryption = true;
s2s_secure_auth = false;
authentication = "internal_plain";
-- On Debian/Ubuntu
daemonize = true;
pidfile = "/var/run/prosody/prosody.pid";
log = {
    error = "/var/log/prosody/prosody.err";
    "*syslog";
}
certificates = "certs";
VirtualHost "xxx.b32.i2p";
ssl = {
    key = "/etc/prosody/certs/xxx.b32.i2p.key";
    certificate = "/etc/prosody/certs/xxx.b32.i2p.crt";
}
[root@kvmcentos ~]# openssl genrsa -out /etc/prosody/certs/xxx.b32.i2p.key 2048
Generating RSA private key, 2048 bit long modulus (2 primes)
....+++++
....+++++
e is 65537 (0x010001)
[root@kvmcentos ~]# openssl req -new -x509 -key /etc/prosody/certs/xxx.b32.i2p.key -out /etc/prosody/certs/xxx.b32.i2p.crt -days 3650
[root@kvmcentos ~]# chown root:prosody /etc/prosody/certs/*.b32.i2p.{key,crt}
[root@kvmcentos ~]# chmod 640 /etc/prosody/certs/*.b32.i2p.{key,crt}
[root@kvmcentos ~]# systemctl enable prosody
[root@kvmcentos ~]# systemctl start prosody
[root@kvmcentos ~]# prosodyctl adduser admin@xxx.b32.i2p
root@kvmubuntu:~# add-apt-repository ppa:purplei2p/i2pd
root@kvmubuntu:~# apt-get update
root@kvmubuntu:~# apt-get install -y i2pd
root@kvmubuntu:~# apt-get install -y pidgin
[root@kvmcentos ~]# prosodyctl adduser C@xxx.b32.i2p
Source:
# https://www.youtube.com/playlist?list=PLLqKATfceKNsptsrNP63TukGKETztvf1r
Task:
Система безопасности PAM
Конфигурационные файлы для различных программ находятся в /etc/pam.d/.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# ls /etc/pam.d
atd gdm-launch-environment polkit-1 sudo-i
chfn gdm-password postlogin su-l
chsh gdm-pin remote system-auth
cockpit gdm-smartcard runuser systemd-user
config-util liveinst runuser-l vlock
crond login smartcard-auth vmtoolsd
cups other sshd xserver
fingerprint-auth passwd sssd-shadowutils
gdm-autologin password-auth su
gdm-fingerprint pluto sudo
Task:
выяснить, какие модули PAM присутствуют в системе.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# find / -name pam_*.so
find: ‘/proc/12490’: No such file or directory
find: ‘/proc/12491’: No such file or directory
find: ‘/run/user/1000/gvfs’: Permission denied
/usr/lib64/security/pam_cap.so
...
/usr/lib64/security/pam_gnome_keyring.so
/usr/lib64/security/pam_gdm.so
/opt/VBoxGuestAdditions-6.1.4/other/pam_vbox.so
Task:
Запретим пользователю tuser с сервера с IP tipcentos подключаться по SSH к нашему серверу. 
В конце файла /etc/security/access.conf вписываем такую строку: - : tuser : tipcentos. 
Узнать IP можно с помощью ifconfig.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# su - tuser
root@kvmubuntu:~# ifconfig
....
inet tipcentos
root@kvmubuntu:~# exit
root@kvmubuntu:~# vim /etc/security/access.conf
root@kvmubuntu:~# cat /etc/security/access.conf
...
# Login access control table.
#-:ALL:ALL
-:tuser:tipcentos
root@kvmubuntu:~# cat /etc/pam.d/sshd
#%PAM-1.0
auth substack password-auth
auth include postlogin
account required pam_sepermit.so
account required pam_nologin.so
account include password-auth
password include password-auth
# pam_selinux.so close should be the first session rule
session required pam_selinux.so close
session required pam_loginuid.so
# pam_selinux.so open should only be followed by sessions to be executed in the user context
session required pam_selinux.so open env_params
session required pam_namespace.so
session optional pam_keyinit.so force revoke
session optional pam_motd.so
session include password-auth
session include postlogin
root@kvmubuntu:~# vim /etc/pam.d/sshd
root@kvmubuntu:~# cat /etc/pam.d/sshd
#%PAM-1.0
auth substack password-auth
auth include postlogin
account required pam_sepermit.so
account required pam_nologin.so
account required pam_access.so
account include password-auth
password include password-auth
# pam_selinux.so close should be the first session rule
session required pam_selinux.so close
session required pam_loginuid.so
# pam_selinux.so open should only be followed by sessions to be executed in the user context
session required pam_selinux.so open env_params
session required pam_namespace.so
session optional pam_keyinit.so force revoke
session optional pam_motd.so
session include password-auth
session include postlogin
Task:
Теперь пользователь tuser не сможет подключиться к нашему серверу по SSH. 
В файле access.conf также есть много других примеров, которые можно использовать в своей ситуации. 
проверить подключение на другом компе. Чтобы разрешить это, можно просто закомментить строку в файле.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# ssh tuser@tipcentos
...
Connection closed by tipcentos port 22
root@kvmubuntu:~# vim /etc/security/access.conf
root@kvmubuntu:~# cat /etc/security/access.conf
...
# Login access control table.
#-:ALL:ALL
#-:tuser:tipcentos
Task:
С помощью pam_limits.so для пользователя tuser сделаем следующие ограничения: максимальный размер файла – 20 Мб; приоритет для пользовательских процессов – 15.
Строки в конце файла /etc/security/limits.conf: tuser hard fsize 20000; tuser hard priority 15.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# vim /etc/security/limits.conf
root@kvmubuntu:~# cat /etc/security/limits.conf
# /etc/security/limits.conf
...
#@student - maxlogins 4
tuser hard fsize 20000
tuser hard priority 15
# End of file
root@kvmubuntu:~# ssh tuser@tipcentos
root@kvmubuntu:~# ls -lh
root@kvmubuntu:~# yes > file.txt
File size limit exceeded (стек памяти сброшен на диск)
root@kvmubuntu:~# ls -lh
итого 20M -rw-rw-r-- 1 tuser tuser 20M мар 25 23:17 file.txt
Task:
Использование симметричного шифрования.
Давайте зашифруем и расшифруем данные с помощью симметричного метода. Для этого выполним команду gpg с опцией -c, которая сообщает, что нужно использовать симметричный режим шифрования. Далее указываем файл, который необходимо зашифровать. По умолчанию применяется алгоритм CAST5, который можно изменить с помощью опции --cipher-algo. Посмотреть доступные алгоритмы можно в выводе команды gpg --version (строка Cipher:).
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# vim myfile.txt
[root@kvmcentos ~]# cat myfile.txt
    --------SECRTET!!-------
    ---------=)------------
[root@kvmcentos ~]# ls -l
    -rw-r--r--. 1 root   root     49 апр 15 22:42  myfile.txt
[root@kvmcentos ~]# gpg -c myfile.txt
[root@kvmcentos ~]# ls -l
    -rw-r--r--. 1 root   root     49 апр 15 22:42  myfile.txt
    -rw-r--r--. 1 root   root    103 апр 15 22:44  myfile.txt.gpg
[root@kvmcentos ~]# cat myfile.txt.gpg
      %  A   V O  κQ  S  gj Vyv  cƒ ]  $[)8 ]l  S w Z   ȝ   < n R  y `W7' F ⬚ m   
Task:
У меня есть Другая система Убунту, перенесем туда файл. После передачи файла в удаленную/другую систему его необходимо расшифровать. Для этого в команде gpg с помощью опции -o указываем имя для файла, которое будет после расшифровки, а с помощью опции -d указываем зашифрованный файл, который будем расшифровывать.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# ls -l
    -rwxrwx--- 1 linux linux   103 апр 16 05:44  myfile.txt.gpg
[root@kvmcentos ~]# cat myfile.txt.gpg
      %  A   V O  κQ  S  gj Vyv  cƒ ]  $[)8 ]l  S w Z   ȝ   < n R  y `W7' F ⬚ m   
[root@kvmcentos ~]# gpg -o myfile -d myfile.txt.gpg
[root@kvmcentos ~]# ls -l
    -rw-r--r-- 1 root  root     49 апр 16 06:04  myfile
    -rwxrwx--- 1 linux linux   103 апр 16 05:44  myfile.txt.gpg
[root@kvmcentos ~]# cat myfile
    --------SECRTET!!-------
    ---------=)------------
Task:
Использование асимметричного шифрования начинается с генерации пары ключей — открытого и секретного. Для этого используется команда gpg с опцией --gen-key:
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --gen-key
Task:
Указываем идентификационный номер для ключа, по которому его можно будет отличить от других. Обычно это имя и e-mail адрес владельца ключа. Не всегда процесс генерации ключа идет гладко, чтобы это исправить нужно еще один консоль открыть и сделать активность в системе. Это для тех у кого консольная система. А если у вас графический интерфейс, можете просто мышкой потыкать. После этого должно пойти процесс генерации. После этого в каталоге ~/.gnupg/ будут созданы соответствующие файлы.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# ls -liR /usr/
[root@kvmcentos ~]# ls -l ~/.gnupg/
Task:
Посмотреть ключи можно командой gpg с опцией --list-keys.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --list-keys
    gpg: проверка таблицы доверия
    gpg: marginals needed: 3  completes needed: 1  trust model: pgp
    gpg: глубина: 0  достоверных:   1  подписанных:   0  доверие: 0-, 0q, 0n, 0m, 0f, 1u
    gpg: срок следующей проверки таблицы доверия 2022-04-16
    /root/.gnupg/pubring.kbx
    ------------------------
    pub   rsa2048 2020-04-16 [SC] [   годен до: 2022-04-16]
          CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
    uid         [  абсолютно ] Admin3 <testAdmin3@mail.ru>
    sub   rsa2048 2020-04-16 [E] [   годен до: 2022-04-16]
Task:
Перед использованием вашего публичного ключа другими пользователями его необходимо экспортировать. 
По умолчанию ключ экспортируется в бинарном формате, что не всегда удобно.
С помощью опции --armor мы получим наш публичный ключ на консоль, откуда его можно скопировать и отправить по почте или выложить на свой сайт.
В удаленной системе импортируем публичный ключ, чтобы мы его могли использовать. 
Для этого текст публичного ключа сохраняем в текстовый файл и передаем в качестве аргумента команде gpg. 
вставляем скопированный публичный ключ.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --armor --export Admin3 > box-key
[root@kvmcentos ~]# cat box-key
    -----BEGIN PGP PUBLIC KEY BLOCK-----
    mQENBF6X83gBCACxdea4V0yruICk52BJ4/+i2h7iTLHSBINl4rDFWtFhYYDIjFAs
    ...
    ms4UCJxlkE2uoZ/VNMKoxFCLWdEsK3mI+f8BtCr2SmQwObY=
    =ooVe
    -----END PGP PUBLIC KEY BLOCK-----
[root@kvmcentos ~]# ls -l
    -rw-r--r-- 1 root  root   1753 апр 16 09:02  box-key
[root@kvmcentos ~]# gpg --gen-key
[root@kvmcentos ~]# gpg --import box-key
Task:
После импорта можно убедиться, что ключ действительно был импортирован. 
должен быть Dmitry и Eugeny. Для этого используется команда gpg --list-keys. 
A После импорта ключа его необходимо активировать, а для этого необходимо перейти в режим редактирования этого ключа. 
Вы попадете в специальный интерфейс.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --list-keys
    gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
    gpg: проверка таблицы доверия
    gpg: marginals needed: 3  completes needed: 1  trust model: pgp
    gpg: глубина: 0  достоверных:   1  подписанных:   0  доверие: 0-, 0q, 0n, 0m, 0f, 1u
    gpg: срок следующей проверки таблицы доверия 2022-04-16
    /home/linux/.gnupg/pubring.kbx
    ------------------------------
    pub   rsa3072 2020-04-16 [SC] [годен до: 2022-04-16]
          C0A7FE019BB0D430C465CBCA05A2E96C7147C8B8
    uid         [  абсолютно ] Client1 <testClient1@mail.ru>
    sub   rsa3072 2020-04-16 [E] [годен до: 2022-04-16]
    pub   rsa2048 2020-04-16 [SC] [годен до: 2022-04-16]
          CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
    uid         [ неизвестно ] Admin3 <testAdmin3@mail.ru>
    sub   rsa2048 2020-04-16 [E] [годен до: 2022-04-16]
[root@kvmcentos ~]# gpg --edit-key Admin3
Task:
Для начала нужно вывести отпечаток ключа и сравнить его с отпечатком ключа из целевой системы. 
Можно позвонить к пользователю, попросить чтоб он сообщил отпечаток ключа и сравнить по телефону. 
F379 B9FC CC0E 825B 476E  E68B 6610 EC5A D37E 27AC - отпечаток ключа пользователя Eugeny. 
Если они совпадают, то все нормально, ключ можно верифицировать.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
gpg> fpr
gpg> sign
    Действительно подписать? (y/N) y
gpg> check
Task:
На другом компьютере нужно будет проделать то же самое. 
Единственное отличие — имя ключа будет другим. получатель публикует ключ, копирует его.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --armor --export Client1 > box-key
[root@kvmcentos ~]# ls -l
    -rw-r--r--. 1 root   root   2448 апр 16 02:10  box-key
    -rw-r--r--. 1 root   root     49 апр 15 22:42  myfile.txt
    -rw-r--r--. 1 root   root    103 апр 15 22:44  myfile.txt.gpg
[root@kvmcentos ~]# gpg --import box-key
[root@kvmcentos ~]# gpg --edit-key Client1
gpg> fpr
gpg> sign
    Действительно подписать? (y/N) y
gpg> check
gpg> quit
Task:
Зашифруем файл myfile для пользователя Dmitry. 
Зашифрованный файл получит имя myfile.gpg. r - кто получатель, e - ecrypt операция шифрования
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# vim myfile
[root@kvmcentos ~]# cat myfile
    ---secret---
[root@kvmcentos ~]# gpg -o myfilenew.gpg -e -r Client1 myfile
[root@kvmcentos ~]# ls -l
    -rw-r--r--. 1 root   root   2448 апр 16 02:10  box-key
    -rw-r--r--. 1 root   root     13 апр 16 02:15  myfile
    -rw-r--r--. 1 root   root    478 апр 16 02:21  myfilenew.gpg
[root@kvmcentos ~]# cat myfilenew.gpg
      X   J   
              +  -$6ٌ )r+9e  |>N & 21ʸX  HJMuS =    o  _  oi h  :J  Q  U Y[   5I  `
          { 6U    y$ n      TS >    NJ Tc%   5{  =FW xv Zr     N*  9 ڻ  r(h x  [ŀ(ў*  ~ x  |Sր  u {
                               ^   8YA   R&nI     y l9  !  yO/J X 9   %u    q 2  ã% k'u i   ؍       g X v bE5IP9 < "   ' ?b]  x   _`Y Ԡ  I  M 6 B \ C h   Q B 4@ ;O xbԽ  e  x/8\L's    *  )EU  x~ ά  `ȟ      BB   M  , > &gkb ǻ 
     N Խ    s  b  -ɘ% 
                     F;.܍5  zD\    
                                    Kc|=O  :  s 
Task:
После этого зашифрованный файл можно свободно передавать по открытым каналам передачи данных.
Файл сможет расшифровать только пользователь Dmitry с помощью своего секретного ключа. Передаем
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# scp myfilenew.gpg linux@tip.104:/home/linux 
[root@kvmcentos ~]# ls -l
    итого 112
    -rw-r--r-- 1 root  root   1753 апр 16 09:02  box-key
    -rw-r--r-- 1 linux linux   478 апр 16 09:55  myfilenew.gpg
[root@kvmcentos ~]# gpg -o myfile -d myfilenew.gpg
[root@kvmcentos ~]# ls -l
    итого 116
    -rw-r--r-- 1 root  root   1753 апр 16 09:02  box-key
    -rw-r--r-- 1 root  root     13 апр 16 09:57  myfile
    -rw-r--r-- 1 linux linux   478 апр 16 09:55  myfilenew.gpg
[root@kvmcentos ~]# cat myfile
    ---secret---
Task:
Создание сертификата отзыва
Посмотрим ID публичного ключа, который мы отправим на публичный сервер ключей.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --list-keys
    /root/.gnupg/pubring.kbx
    ------------------------
    pub   rsa2048 2020-04-16 [SC] [   годен до: 2022-04-16]
          CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
    uid         [  абсолютно ] Admin3 <testAdmin3@mail.ru>
    sub   rsa2048 2020-04-16 [E] [   годен до: 2022-04-16]
    pub   rsa3072 2020-04-16 [SC] [   годен до: 2022-04-16]
          C0A7FE019BB0D430C465CBCA05A2E96C7147C8B8
    uid         [   полное   ] Client1 <testClient1@mail.ru>
    sub   rsa3072 2020-04-16 [E] [   годен до: 2022-04-16]
Task:
С помощью опции --keyserver указываем публичный сервер ключей, с помощью опции --send-key сообщаем, что ключ необходимо отправить на сервер.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --keyserver pgp.mit.edu --send-key CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
Task:
После этого любой желающий может получить ваш публичный ключ с сервера ключей, просто указав его ID. 
Для получения ключа с сервера используется опция --recv-keys. ID ключа также можно выяснить по e-mail адресу владельца или его имени.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --keyserver pgp.mit.edu --recv-key CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
[root@kvmcentos ~]# gpg --keyserver pgp.mit.edu --search-key testAdmin3@mail.ru
Task:
Представим ситуацию, что ваш секретный ключ скомпрометирован или просто потерян. 
Следовательно, больше нет смысла шифровать для вас данные публичным ключом из связки с этим личным ключом и его нужно отозвать. 
Генерируем сертификат отзыва. После выполнения команды будет создан файл eugeny.asc, это и есть сертификат отзыва.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg -o Admin3.asc --gen-revoke Admin3
[root@kvmcentos ~]# ls -l
    -rw-r--r--. 1 root   root    478 апр 16 02:53  tip.104
    -rw-------. 1 root   root    548 апр 16 03:16  Admin3.asc
    -rw-r--r--. 1 root   root   2448 апр 16 02:10  box-key
    drwxr-xr-x. 2 root   root     45 апр  9 21:40  docs
    -rw-r--r--. 1 root   root     13 апр 16 02:15  myfile
    -rw-r--r--. 1 root   root    478 апр 16 02:21  myfilenew.gpg
Task:
Далее сертификат отзыва необходимо импортировать в вашу базу данных ключей. Публичный ключ отозван (revoked).
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --import Admin3.asc
[root@kvmcentos ~]# gpg --list-keys
    /root/.gnupg/pubring.kbx
    ------------------------
    pub   rsa2048 2020-04-16 [SC] [    отозван: 2020-04-16]
          CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
    uid         [   отозван  ] Admin3 <testAdmin3@mail.ru>
    pub   rsa3072 2020-04-16 [SC] [   годен до: 2022-04-16]
          C0A7FE019BB0D430C465CBCA05A2E96C7147C8B8
    uid         [ неизвестно ] Client1 <testClient1@mail.ru>
    sub   rsa3072 2020-04-16 [E] [   годен до: 2022-04-16]
Task:
Загружаем отозванный ключ на публичный сервер ключей.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --keyserver pgp.mit.edu --send-key CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
Task:
В удаленной системе, в случае желания получить ваш публичный ключ, будет принят сертификат отзыва. 
Теперь отозванный ключ нельзя будет использовать для шифрования данных.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --keyserver pgp.mit.edu --recv-key CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
[root@kvmcentos ~]# gpg --list-keys
    gpg: Внимание: небезопасный владелец домашнего каталога '/home/linux/.gnupg'
    gpg: проверка таблицы доверия
    gpg: marginals needed: 3  completes needed: 1  trust model: pgp
    gpg: глубина: 0  достоверных:   1  подписанных:   0  доверие: 0-, 0q, 0n, 0m, 0f, 1u
    gpg: срок следующей проверки таблицы доверия 2022-04-16
    /home/linux/.gnupg/pubring.kbx
    ------------------------------
    pub   rsa3072 2020-04-16 [SC] [годен до: 2022-04-16]
          C0A7FE019BB0D430C465CBCA05A2E96C7147C8B8
    uid         [  абсолютно ] Client1 <testClient1@mail.ru>
    sub   rsa3072 2020-04-16 [E] [годен до: 2022-04-16]
    pub   rsa2048 2020-04-16 [SC] [отозван: 2020-04-16]
          CDEA2870E05BF3969EFC7CA18EAEFED2A8D76C1E
    uid         [   отозван  ] Admin3 <testAdmin3@mail.ru>
[root@kvmcentos ~]# gpg -o myfile.gpg -e -r Admin3 myfile
Task:
Цифровая подпись файлов
Подписать файл myfile можно командой, указанной ниже. Подписанный файл будет сохранен под именем myfile.sig.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --gen-key
[root@kvmcentos ~]# gpg -o myfile.sig -s myfile
[root@kvmcentos ~]# ls -l
    -rw-r--r--. 1 root   root    478 апр 16 02:53  tip.104
    -rw-------. 1 root   root    548 апр 16 03:16  Admin3.asc
    -rw-r--r--. 1 root   root   2448 апр 16 02:10  box-key
    -rw-r--r--. 1 root   root     13 апр 16 02:15  myfile
    -rw-r--r--. 1 root   root    478 апр 16 02:21  myfilenew.gpg
    -rw-r--r--. 1 root   root    354 апр 16 03:38  myfile.sig
Task:
Проверить подпись в удаленной системе можно с помощью команды gpg с опцией --verify.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --verify myfile.sig
Task:
Расшифровка файла myfile.sig.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]#  gpg -o myfile -d myfile.sig
Task:
подписать текстовые файлы, в этом случае подпись будет добавлена в конец файла. Файл получит расширение asc.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --clearsign myfile
[root@kvmcentos ~]# ls -l
    -rw-r--r-- 1 root  root    723 апр 16 10:50  myfile.asc
[root@kvmcentos ~]# cat myfile.asc
    -----BEGIN PGP SIGNED MESSAGE-----
    Hash: SHA512
    - ---secret---
    -----BEGIN PGP SIGNATURE-----
    iQGzBAEBCgAdFiEEwKf+AZuw1DDEZcvKBaLpbHFHyLgFAl6YDjIACgkQBaLpbHFH
    ...
    RYFDq2Hc
    =YJ6J
    -----END PGP SIGNATURE-----
Task:
Также есть возможность получить цифровую подпись в отдельный файл. 
Впоследствии файл с подписью и оригинальный файл будут использоваться для того, чтобы верифицировать подпись.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg -o myfile.sig --detach-sig myfile
[root@kvmcentos ~]# gpg --verify myfile.sig myfile
Task:
Уровень доверия к владельцам ключа
Уровень доверия показывает, насколько сильно вы доверяете владельцу указанного ключа. Изменить его можно, войдя в режим редактирования.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# gpg --edit-key Client1
gpg> trust
Task:
Надежное удаление файлов
Для надежного удаления файлов используется программа shred, входящая в пакет coreutils. Потребность в удалении файла может возникнуть после создания его зашифрованной версии. Место на диске, где находится файл, перезаписывается в несколько проходов, и восстановить его практически невозможно.
Пример удаления файла. По умолчанию программа shred 25 раз перезаписывает то место, где находился файл.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# shred -u -v myfile
[root@kvmcentos ~]# ls -l
    -rw-r--r--. 1 root   root    478 апр 16 02:53  tip.104
    -rw-------. 1 root   root    548 апр 16 03:16  Admin3.asc
    -rw-r--r--. 1 root   root   2448 апр 16 02:10  box-key
    -rw-r--r--. 1 root   root     88 апр 16 02:17  myfile.gpg
    -rw-r--r--. 1 root   root    478 апр 16 02:21  myfilenew.gpg
    -rw-r--r--. 1 root   root    310 апр 16 03:53  myfile.sig
Source:
# https://scabere.livejournal.com/62886.html?ysclid=lis5xg9t99308663826
Task:
Для подготовки стенда:
1. Необходимо скачать архив по ссылке: courses-shop.zip (Зеркало: courses-shop.zip Яндекс.Диск)
2. Распаковать данный архив и перейти в появившуюся директорию courses-shop-prod в терминальной оболочке вашей ОС. Выполнить команду (при запущенном сервисе docker): docker-compose up -d. По адресу http://localhost:1337 появится приложение лабораторного стенда.
Возможные проблемы:
1. На некоторых компьютерах приложение может долго ожидать подключения к базе данных. Это зависит от мощностей вашего компьютера.
2. По той же причине бот (администратор приложения) может не запуститься, если база данных запускалась дольше 15 секунд. В таком случае вы можете перезагрузить сервис бота из папки приложения после загрузки базы данных командой:
docker-compose restart bot
Необходимо находиться в директории приложения, в одном месте с файлом docker-compose.yml
Проанализируйте защищенность механизмов аутентификации административной панели и проэксплуатируйте найденные уязвимости.
В качестве подтверждения успешной эксплуатации предоставьте флаг (секретную строку в формате 32 букв и цифр) из кода страницы панели администратора.
Вопрос для самопроверки на протяжении работы с данным лабораторным стендом:
Что опасного в этой информационной системе может сделать злоумышленник? Какие риски он мог бы реализовать?
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# firefox https://disk.yandex.ru/d/bXfeC1DM4vrUsw
root@kvmubuntu:~# unzip Downloads/courses-shop.zip
root@kvmubuntu:~# cd courses-shop-prod
root@kvmubuntu:~# docker-compose up -d
root@kvmubuntu:~# firefox https://portswigger.net/burp/releases/professional-community-2023-9-4?requestededition=community&requestedplatform=
root@kvmubuntu:~# chmod ugo+x burpsuite_community_linux_v2023_9_4.sh
root@kvmubuntu:~# ./burpsuite_community_linux_v2023_9_4.sh
root@kvmubuntu:~# /home/tuser/BurpSuiteCommunity/BurpSuiteCommunity &
root@kvmubuntu:~# firefox https://github.com/empty-jack/YAWR/blob/master/brute/passwords/realyBest.txt 
Source:
# https://portswigger.net/burp/documentation/desktop/getting-started/download-and-install
# https://losst.pro/zapusk-skripta-sh-v-linux
Task:
Проанализируйте существующие поддомены основного домена компании cyber-ed.ru. Выявите домен, который похож на название домена для задания, и изучите его DNS TXT записи.
В качестве подтверждения успешной эксплуатации предоставьте флаг (секретную строку в формате 32 букв и цифр несвязного текста) из DNS записи типа TXT (Чтобы получить TXT записи для домена, выполните команду nslookup -q=TXT domain.name).
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# google-chrome https://crt.sh/?q=cyber-ed.ru
root@kvmubuntu:~# nslookup -q=TXT task.cyber-ed.ru
Server:		tip.1
Address:	tip.1#53
Non-authoritative answer:
task.cyber-ed.ru	text = "FLAG=ОТВЕТ"
Authoritative answers can be found from
Skills:
# Виртуализация.
Task:
Установить Hyper-V в Windows Server 2012 c помощью Shell.
# Виртуализация.
Decision:
PS C:\Windows\system32> Get-Module -ListAvailable
ModuleType Version    Name                                ExportedCo
---------- -------    ----                                ----------
...
Binary     1.1        Hyper-V                             {Add-VMDvd
...
PS C:\Windows\system32> Import-Module -Name Hyper-V
Task:
Развернуть виртуальную тестовую машину Redos в Hyber-v с помощью Powershell.
# Виртуализация.
Decision:
PS C:\Windows\system32> Get-VM
Name State CPUUsage(%) MemoryAssigned(M) Uptime   Status
---- ----- ----------- ----------------- ------   ------
Alt  Off   0           0                 00:00:00 Работает нормально
PS C:\Windows\system32> $ram=1*1024*1024*1024
PS C:\Windows\system32> $ram
1073741824
PS C:\Windows\system32> $hdd=10*1024*1024*1024
PS C:\Windows\system32> $hdd
10737418240
PS C:\Windows\system32> NEW-VM -Name Redos -MemoryStartupBytes $ram -NewVHDPath 'C:\Data\VM\Redos\Redos.vhdx'-NewVHD
SizeBytes $hdd -Path 'C:\Data\VM\Redos'
Name State CPUUsage(%) MemoryAssigned(M) Uptime   Status
---- ----- ----------- ----------------- ------   ------
Redos Off   0           0                 00:00:00 Работает нормально
PS C:\Windows\system32> Get-VM
Name State CPUUsage(%) MemoryAssigned(M) Uptime   Status
---- ----- ----------- ----------------- ------   ------
Alt  Off   0           0                 00:00:00 Работает нормально
Redos Off   0           0                 00:00:00 Работает нормально
PS C:\Windows\system32> Start-VM -name Redos
PS C:\Windows\system32> Get-VM
Name State   CPUUsage(%) MemoryAssigned(M) Uptime   Status
---- -----   ----------- ----------------- ------   ------
Alt  Off     0           0                 00:00:00 Работает нормально
Redos Running 0           1024              00:00:16 Работает нормально
PS C:\Windows\system32> Stop-VM Redos
Подтверждение
Hyper-V не удается завершить работу виртуальной машины Redos, так как служба интеграции по завершению работы недоступна.
 Во избежание потенциальной потери данных вы можете приостановить виртуальную машину или сохранить ее состояние. Другим
 вариантом является отключение виртуальной машины, но при этом возможна потеря данных.
[Y] Да - Y  [N] Нет - N  [S] Приостановить - S  [?] Справка (значением по умолчанию является "Y"): y
PS C:\Windows\system32> Get-VM
Name State CPUUsage(%) MemoryAssigned(M) Uptime   Status
---- ----- ----------- ----------------- ------   ------
Alt  Off   0           0                 00:00:00 Работает нормально
Redos Off   0           0                 00:00:00 Работает нормально
Task:
Установить и настроить дистрибутив Redos в виртуальной машине.
# Виртуализация.
Decision:
- выбираем Install - выбрать размер разделов - поменяем систему разметки LVM на Standart Portition - нажимаем на click here to create them autmaticaly - установщик автоматически разделит диск - уменьшить размер корневого раздела / и раздел /home - Меняю у них размеры - Done - интернет настроить в Network & Host Name - Ethernet переключаем тумблер - Done - software Slection - minmal install- Done - запуск
Task:
Установить виртуальный сервер AltLinux в Hyper-V.
# Виртуализация.
Decision:
PS C:\Windows\system32> $ram=1*1024*1024*1024
PS C:\Windows\system32> $ram
1073741824
PS C:\Windows\system32> $hdd=10*1024*1024*1024
PS C:\Windows\system32> $hdd
10737418240
PS C:\Windows\system32> NEW-VM -Name Alt -MemoryStartupBytes $ram -NewVHDPath 'C:\Data\VM\Alt\Alt.vhdx'-NewVHD
SizeBytes $hdd -Path 'C:\Data\VM\Alt'
PS C:\Windows\system32> Start-VM -name Alt
PS C:\Windows\system32> Get-VM
Name State   CPUUsage(%) MemoryAssigned(M) Uptime   Status
---- -----   ----------- ----------------- ------   ------
Alt  Off     0           0                 00:00:00 Работает нормально
Task:
Не тот адрес у принтера Epson WorkForce Pro WF-5690. у него был адрес 169.254... (это смотришь в самом принтере, возле значка wifi). А нужен адрес 10.38.(свой адрес). Поэтому не все компьютеры, которые подключены к принтеру не видят его. И из-за этого выдавало ошибку, что не подключен принтер к компьюетру.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
Нужно поменять айпи адрес. ->С компа заходим в сеть -> ищем наш принтер ->правой кнопкой просмотр веб-стр -> небезопасно -> вводим админский логин и пароль  -> заходим в network/wifi basi-c -> заполняем printer name: EPS5690-31 -> location: 31 (то есть кабинет) -> obtain ipadr: manual  -> ip adr:10.38.(свой адрес) (именно на этот адрес мы сейчас меняем)  -> subnet mask:255..(свой адрес)..  -> default gateway:10.38...,  -> DNS sever setting: manual  -> primary dns server:10.77.(свой адрес).  -> secondary dns server:10.77..(свой адрес).  -> dns host name setting: manual  -> dns domain name setting:manual  -> dns domain name: пишем доменное имя -> register the network interface addr to dns:disable  -> proxy serve setting: do not  use  -> ipv6 setting:enable  -> ipv6 privarty extention:disable -> продолжить  -> ок -> перезагрузим принтер ->Теперь должен быть правильный адрес и долно все работать
Task:
Компьютер не видит сетевой принтер Kyocera FS-6525 MFP.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
Нужно поменять ip-адрес в самом принтере. Вводим админ и пароль, мастер установки, вводим нужный адрес 10.38...., маски - 255.255...., и основной шлюз - 10.38..., ок, перезагружаемся, включаем и выключаем
Task:
Sharp AR-6020 был подключен к моноблоку локально через usb. В кабинете появился новый сотрудник, а значит надо подключить новый ноутбук сотрудника к принтеру Sharp AR-6020. Можно подключать через соседнего компа.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
Для этого в ноутбуке откроем любую папку -> ищем через \\ в адресной строке папку нужного компьютера, который подключен к нашему принтеру  ->В нашем случае - ищем моноблок ->И в папке мы должны будем увидеть нужный принтер. -> В моем случае папка была пустая,так как Моноблок ограничивал доступ к нашему принтеру.  ->  в моноблоке зайти в панель управления  -> устройства и принтеры ->свойства нашего принтера ->доступ ->поставить галочки на общий доступ -> И обратно, подходим к нотбуку -> в адресной строке компьюетра \\ -> появится принтер  ->Правой кнопкой мыши и подключаемся -> Все, принтер после этого заработает на двух компьютерах - мононблок и ноутбук.
Task:
Настроить новый принтер Epson WorkForce Pro WF-5690
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
включ без кабеля, настраиваем дата и время и язык. подкл кабель, а4, без факса, устанавл дрйвера - soft/epsonwf64, устанвл prtDRV, перезагр, возле часов появится ярлык EPSON, прав кнопка, обновл дрйвера, ок, настройка принтера, прав кнопка, сервис, обвнол ПО, на верх галочки дб, настнавл, 2х галочек больше нету, выход,Сначала делаем на компе своем прошивку через Epson software, обязательно выбираем правильный принтер. обновляем, распечает листовку (2, 3), чтобы узнать какой IP адрес стоит у принтера. Настройки - статус сети - состояние сети - печать (4 лист). IP адреса постоянно меняются, поэтому нужно новый поставить в серверной. был адрес tIp1, general information  9с:АЕ:... Идем в сервер - диспетчер сервера DHCP - резервирование - создать рез-ние - и что еще было ... - идем обратно в наш кабиент - у принтера меняем tdomain.ru имя, ищем у себя на компе ту сеть - просмотр Web, страницы устройства: adminstrat settle - change - tPassword, contacts add  - name: библиотеки и студенты, адр tIp2\общ папка\библиотека\scan, tIp2\студент\scan 
Task:
Нужно создать еще одну сетевую папку для общего доступа в системе Windows Server 2012 r2.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
- создайте папку
- Давайте теперь назначим на эту папку разрешения - кликаем по ней правой кнопкой мыши - выбираем пункт "Свойства"
- Ставим галочку напротив надписи: открыть общий доступ к этой папке - добавить пользователей которые будут иметь доступ к этой папке с определенными правами - для того что бы выбрать конкретных пользователей из Active Directory нажмите вкладку "Разрешения"
- Мы попали в настройки разрешения общего доступа, чтобы выбрать пользователя который будет иметь доступ, нажмите "Добавить".
- Например, в AD мы создавали тестового пользователя с именем "Тест". Итак назначим учетной записи Тест полный доступ к этой папке, для этого введите имя "Тест" в поле выбираемых объектов после чего кликаем "Проверить имена". Так же добавляем еще один параметр для общего доступа, для этого нажмите ПКМ по папке и перейдите по пунктам: "Общий доступ" – "Отдельные люди" В появившимся окне в поле для ввода имени вводим "Тест" и кликаем "Добавить" (желательно в данной папке выставить пользователям права на Чтение и запись).
- Как только пользователь определился в чек-боксе разрешить выставим "Полный доступ к данной папке" и нажмем "Ок" Идентичную операцию проделываем с Администраторами
- Самое главное это путь к сетевой папке, для чего он нужен я расскажу чуть ниже, сейчас просто выберете "Свойства" сетевой папки и запомните "Сетевой путь"
- Итак, можно проверить сетевую папку в другом компьютере (другого пользователя)
Task:
Сделать резервное копирование диска через Acronis.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
Для начала нам нужнa программа Stop SMS Uni Boot — Загрузочные образы CD & USB . Сборки имеют достаточное количество программ для работы с разделами HDD, восстановления системы, создания настроенного образа системы и для решения других проблем.
Установить образ на флешку можно через Rufus - Запускаемся через флешку - Тут в меню нужно выбрать HDD++ - Acronis - True image premium - Далее выбираем резервное копирование - диски - Выбираем нужный диск - Выбираем путь в обзоре, куда мы хотим сохранить копию диска - В следующем шаге параметра выбираем метод резервного копирования с режимом полное резервное копирование. По умолчанию стоит «инкрементное». Можно оставить этот метод. Но я выберу «полное». - Можно приступить, после чего пойдет загрузка.
Task:
устанавить винду 8 на жесткий диск через Acronis, Bootice Rus, WinNTSetup. После обновлю до винды 10.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
У меня уже есть загрузочная флешка с нужными программами Acronis, Bootice Rus, WinNTSetup (ссылка на загрузочные образы — https://usbtor.ru/viewtopi-c.php?t=1728 ) и ISO образ с виндой 8.1.  - запуститься с загрузочной флешки в Boot Menu через bios. -  Откроем выбор дополнительных программ -Акронис в меню Hdd ++ - Acronis - Acronis Disk Director - Очистим диск - Инициализировать - Создать том - Выбираем размер создаваемого тома - Выбираем тип тома: Основной: активный - Если нужен второй том, тогда после создания основного тома создаем еще один том и выбираем логический тип тома. Но мне не нужен второй том, поэтому я пропускаю данную функцию - Завершить и применить ожидающие операции - Перезагрузимся - также с флешки и откроем 78setup -тут же нажмем Windows NT Setup - правильно выбрать диск, на который будет установлен загрузчик, в моем случае, это новый том Q - отформатируем его - Еще мы видим, что МБР горит желтым - 78setup - Booti-ce Rus - Physi-cal disk - правильный диск назначения (в моем случае это том Q) - в управлении MBR ставим галочку на Windows NT - Инсталяция/конфигурация - выбираем Windows NT 6.x MBR - 78setup - WIndows NT Setup -путь к установочным файлам Windows - прописываем тот путь где находится сам файл с Wim образом windows. - диск на который будет установлена ОС - выбираем нужный диск. В моем случае диск Q.- Установка. - перезапускаемся - установка винды 8.1 -Настраиваем часовой пояс - Придумываем имя компа - Имя пользователя, если нужно пароли - Ждем завершение настроек
Task:
Создание образа-копии компакт-диска
у нас есть компакт-диск с дистрибутивом Ubuntu, и мы хотим создать файл ISO-образа, который потом можно будет использовать для создания нескольких копий.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
Вставив компакт-диск в привод CD-ROM и определив имя устройства (пусть это будет /dev/cdrom), мы сможем создать файл ISO-образа следующим способом:
root@kvmubuntu:~# dd if=/dev/cdrom of=ubuntu.iso
  119104+0 records in
  119104+0 records out
  60981248 bytes (61 MB, 58 MiB) copied, 2.66461 s, 22.9 MB/s
Task:
Создание образа из коллекции файлов
Создать файл ISO-образа, включающий содержимое некоего каталога с помощью программы enisoimage. сначала создадим каталог (~/folder) со всеми необходимыми файлами для включения в образ
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# ls folder
  1.txt  3.txt
root@kvmubuntu:~# genisoimage -o folder.iso -R -J ~/folder
  I: -input-charset not specified, using utf-8 (detected in locale settings)
  Total translation table size: 0
  Total rockridge attributes bytes: 323
  Total directory bytes: 474
  Path table size(bytes): 10
  Max brk space used 0
  181 extents written (0 MB)
root@kvmubuntu:~# ls -l folder.iso
  -rw-rw-r-- 1 s s 370688 Nov 18 20:14 folder.iso
Task:
Исключить обновление определенного пакета.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[root@kvmcentos ~]# dnf update
...
================================================================================
Пакет                Архитектура    Версия          Репозиторий          Размер
================================================================================
Обновление:
sublime-text         x86_64         4126-1          sublime-text          20 M
Результат транзакции
================================================================================
[root@kvmcentos ~]# cat /etc/dnf/dnf.conf
[main]
gpgcheck=1
installonly_limit=3
clean_requirements_on_remove=True
best=True
skip_if_unavailable=False
[root@kvmcentos ~]# vim /etc/dnf/dnf.conf
[root@kvmcentos ~]# cat /etc/dnf/dnf.conf
[main]
gpgcheck=1
installonly_limit=3
clean_requirements_on_remove=True
best=True
skip_if_unavailable=False
## Exclude following Packages Updates ##
exclude=sublime-text
[root@kvmcentos ~]# dnf update
  Последняя проверка окончания срока действия метаданных: 0:33:57 назад, Пн 21 фев 2022 12:18:38.
  Зависимости разрешены.
  Отсутствуют действия для выполнения.
  Выполнено!
Task:
чтобы увеличить звук проигрывателя.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
- пуск -> K-lite codec -> Media Player Classi-c -> вид -> настройки -> встроенные фильтры -> аудиопереключатель можно поставить галочку на нормализацию -> убрать галочку на восстанавливать громкость -> настроить усиление по больше.
Task:
восстановление системы даже под обычной загрузки.
# Администрирование локальных, виртуальных и облачных серверов.
Decision: 
- пробуем в командной строке открыть доступ к папке с файлами, которые следует заменить С:\windows\System32\config.С флешки эту папку нужно открыть и внутри удалить/вырезать 5 файлов DEFAUT,SAM, SECURITY,SOFTWARE,SYSTEM,и с regpack переношу эти же файлы в конфиг и перезагружаюсь
Task:
Установить Sublimetext/
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
root@kvmubuntu:~# rpm -v --import https://download.sublimetext.com/sublimehq-rpm-pub.gpg
root@kvmubuntu:~# dnf config-manager --add-repo https://download.sublimetext.com/rpm/stable/x86_64/sublime-text.repo
root@kvmubuntu:~# dnf -y install sublime-text
Source:
# https://www.sublimetext.com/docs/linux_repositories.html#dnf
Task:
устанавливаем касперский.
# Администрирование локальных, виртуальных и облачных серверов.
Decision: 
kes - setup
Указать имя сервера, записываем имя компа thost
netagent - setup
чтобы активировать касперский заходим через сервер в kasp Sec Center, комп, клиент компr, созд (пр кнопкой мыши), Маст добавл, клиент комп, thost
Task:
Одна сеть работает с 1С, вторая сеть работает с ФИС. Фис взаимодествует с 1С, когда, например, нужно выгрузить из 1Ски сканированные заявления в ФИС. Но две сети не видели друг другa. Нужно использовать локальную сеть с VipNET координатором и через командную строку тут уже нужно будет посмотреть маршрут и прописать маршрут до ФИСа указав шлюз тот, по которому нету координатора
tip - это tip сети фис или тот адрес который в браузере ввожу,
tmask - tmask того адреса 0 или 255 в конце.
tip.1 - адрес того шлюза где нет випнета
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
C:\WINDOWS\system32>route -f
C:\WINDOWS\system32>route print
===========================================================================
IPv4 таблица маршрута
===========================================================================
Активные маршруты:
  Отсутствует
Постоянные маршруты:
  Отсутствует
C:\WINDOWS\system32>route add -p tIp2 mask 255.255.255.255 tIp3
C:\WINDOWS\system32>route print
===========================================================================
IPv4 таблица маршрута
===========================================================================
Активные маршруты:
  Отсутствует
Постоянные маршруты:
  Сетевой адрес            Маска    tip.1      Метрика
     tIp2  255.255.255.255   tIp3       1
C:\WINDOWS\system32>route print
===========================================================================
IPv4 таблица маршрута
===========================================================================
Активные маршруты:
Сетевой адрес           tmask      tip.1       Интерфейс  Метрика
===========================================================================
Постоянные маршруты:
  Сетевой адрес            Маска    tip.1      Метрика
     tIp2  255.255.255.255   tIp3       1
C:\WINDOWS\system32>route add -p tIp1 mask 255.255.255.255 tIp5 metric 35
C:\WINDOWS\system32>route print
===========================================================================
IPv4 таблица маршрута
===========================================================================
Активные маршруты:
Сетевой адрес           tmask      tip.1       Интерфейс  Метрика
 tIp1  255.255.255.255         On-link        tIp5   4261
===========================================================================
Постоянные маршруты:
  Сетевой адрес            Маска    tip.1      Метрика
     tIp2  255.255.255.255   tIp3       1
 tIp1  255.255.255.255       tIp5      35
C:\WINDOWS\system32>route change tIp1 mask 255.255.255.255 tIp4 metric 35
C:\WINDOWS\system32>route print
===========================================================================
IPv4 таблица маршрута
===========================================================================
Активные маршруты:
Сетевой адрес           tmask      tip.1       Интерфейс  Метрика
 tIp1  255.255.255.255        tIp4       tIp5   4261
===========================================================================
Постоянные маршруты:
  Сетевой адрес            Маска    tip.1      Метрика
     tIp2  255.255.255.255   tIp3       1
C:\WINDOWS\system32>route add -p tIp1 mask 255.255.255.255 tIp4 metric 35
C:\WINDOWS\system32>route print
===========================================================================
IPv4 таблица маршрута
===========================================================================
Активные маршруты:
Сетевой адрес           tmask      tip.1       Интерфейс  Метрика
 tIp1  255.255.255.255        tIp4       tIp5   4261
===========================================================================
Постоянные маршруты:
  Сетевой адрес            Маска    tip.1      Метрика
     tIp2  255.255.255.255   tIp3       1
 tIp1  255.255.255.255        tIp4      35
Task:
Я случайно добавил не тот адрес, чтобы удалить его со строки
Decision:
C:\WINDOWS\system32>route delete tip, КОТОРОЙ МЫ ХОТИМ УДАЛИТЬ mask tmask tip.1
Task:
Если не работает сеть в компе
Decision:
- смотрим IP в свойствах сети (должно быть 10.10.., а не 169 или 125), перезагруж, если таже проблема осталась гуглим - команда для сброса настроек IP (должны быть 3 команды):
C:\WINDOWS\system32> netsh WinSook reset
C:\WINDOWS\system32> netsh int ip reset c:\reset log.txt
C:\WINDOWS\system32> ipconfig /flush dns
Task:
Как пройти регистрацию?
# English
Decision:
-good afternoon. where are you flyng today?
-I'm flying to Georgia
-may I see you passport please?
-yes, here you are.
-I'm sorry but / unfortunately, your flight has been delayed until p.m.
-Oh, well, that's not too bad.
-are you checking any bags today?
-yes, I have one suitcase to check and one bag to carry on.
-have you left your bags unattended at any time?
-no, I've always had my bags with me.
-ok. that's good. right now, you have a middle seat. would you prefer a window seat or an aisle seat?
-an aisle seat, please.
-ok, here's your boarding pass.
-thanks.
-your flight to Georgia departs from gate B25. the light boards at 5.30. have a nice flight.
-ok, thank you.
Task:
In a restaurant.
# English
Decision:
-good evening. do you have a reservation.
-yes, a table for two. My name is Dato.
-come this way. are you ready to order?
-yes, I'll have the tuna, please.
-would you like that with fries or a salad.
-fries, please.
-what would you like to drink.
-a glass of wine, please.
-here you are, enjoy your meal.
-i'm sorry, but i asked you tuna, not salmon.
-no problem, i'll change it.
-can i have th check please.
-sure.
-I think, there's a mistake in the check. I had a glass of wine, no a bottle.
-please forgive me. I'll give a new one.
Task:
Shopping.
# English
Decision:
-Hi. Can I help you?
-Do you have any (potatoes)?
-Yes I do.
-How much is it/are they?
-3 dolllars a kilo.
-I'd like 5 kilos, please.
-Here you are.
-Thanks.
Task:
Buying coffee.
# English
Decision:
-hello, can I have a coffee, please.
-would you like a cappuccino, americano, espresso.
-cappuccino please.
-small, medium, large.
-large, please.
-would you like some milk or sugar.
-no, thank you.
-here you are. Anything else?
-Yes, can i have a muffin please.
-blueberry, chocolate or banana.
-chocolate, please.
-eat in or take away?
-take away, please.
-that's 3,75$, please.
-here's 4$. keep the change.
-thank you.
Task:
Are you free on friday?
# English
Decision:
-are you free on friday. are you doing anything on friday.
-it depends on the situation, why.
-how about going to the cinema.
-sorry, i can't. i'm busy.
-oh, I see. what about this saturday.
-sounds great.
-what time shall i pick you up.
-at 6 in the evening.
-Great! Do you like italian food.
-sure.
-let's have dinner before we go.
-i'd love to.
-see you on saturday.







Task:
Be
# English
Decision:
- You talk about state, not action (Вы говорите о состоянии, а не о действии), You talk about state (not action) in the past (Вы говорите о состоянии (а не о действии) в прошлом)
- He is a job seeker (Он соискатель)
- am/is/are, was/were    
Task:
Present Simple
# English
Decision:
- You talk about facts or everyday, usual actions (Вы говорите о фактах или повседневных, обычных действиях), You talk in the future about schedules (Вы говорите в будущем о расписании)
- You were hungry yesterday (Ты вчера был голоден), He was at the employer's yesterday (Он был у работодателя вчера)
- Употребляется: постоянные ситуации, состояния, общие истины, законы природы, повторяющиеся, привычные действия, расписание (будущее значение), после if, when, till, untill, before, after (будущее значение)
- Слова подсказки: every+..., usually, sometimes, always, rarely, never, often, on Mondaws, in the morning/evening/afternoon, at night
- Образование: V/Vs, do/does+V
Task:
Present Continuous
# English
Decision:
- You talk about the action which is happening now (Вы говорите о действии, которое происходит сейчас), You complain about smth (Вы жалуетесь на что-то) 
- She is eating an apple now (Она сейчас ест яблоко), You're always eating apples (Ты всегда ешь яблоки)
- Употребляется: временные ситуации, изменение или развитие ситуации, действия, происходящие в момент говорения, фиксированные договоренности в будущем, часто повторящиеся ситуации
- Слова подсказки: now, at the moment, at present, nowadays, today, tonight, always, still
- Образование: am/is/are+Ving
Task:
Past Simple
# English
Decision:
- Что сделал, You talk about a finished action in the past (Вы говорите о законченном действии в прошлом)
- you ate apples yesterday (ты вчера съел яблоки)
- Ved/v2, did+V
Task:
Past Continuous
# English
Decision:
- Что делал, You talk about an action which was happening at a certain time in the past (Вы говорите о действии, которое происходило в определенное время в прошлом)
- When I called (что сделал) her, you were eating (что делал) an apple (Когда я позвонил ей, ты ела яблоко)
- Don't use these verbs in PC: like, love, belive, have, know, prefer, understand, want, need. Use Past Simple
- was/were+Ving
Task:
Present Perfect
# English
Decision:
- The action in the past has a result now (Действие в прошлом имеет результат сейчас), You give the news or new information (Вы сообщаете новости или новую информацию), A period of time continues from the past until now (Период времени продолжается от прошлого до настоящего времени)
- You have eaten everything. You are sick. (Ты съел все. ты болен.), You have just eaten five apples! (Ты только что съел пять яблок!), You have eaten five apples this week (На этой неделе ты съел пять яблок)
- Слова подсказки: just, ever, never, yet, already, always, now ong, recently, this month/week/year, since, for
- Образование: have/has+Ved/V3     
Task:
Present Perfect continuous
# English
Decision:
- Употребляется: действия,которые началис в прошлом  и продолжаются до сих пор (до настоящего времени), в течении прошлых действий определенной продолжительности, имеющий видимый результат или влияние на настоящее время, акцент на продолжительность
- Слова подсказки: how long, for, since
- Образование: have been + Ving
Task:
Future Simple
# English
Decision:
- You decide to do smth at the moment of speaking (Вы решаете сделать что-то в момент выступления), You talk about plans (Ты говоришь о планах), The situation now is showing us what is going to happen in the future (Ситуация сейчас показывает нам, что произойдет в будущем), we can use both Be going to and Future Simple to predict the future (мы можем использовать как Be going to, так и Future Simple для прогнозирования будущего), we use Be going to when something now tells us what is going to happen in the future (мы используем Be going to, когда что-то сейчас говорит нам, что произойдет в будущем), we use Future Simple to say things we think, guess or know about the future.we may not have an evidence in the present telling us what the Future is going to be (мы используем Future Simple, чтобы сказать то, что мы думаем, догадываемся или знаем о будущем.у нас может не быть доказательств в настоящем, говорящих нам, каким будет будущее)
- I'm hungry, I'll eat an apple. (Я голоден, я съем яблоко), She's going to eat an apple (Она собирается съесть яблоко), See those clouds? It's going to rain (Видишь эти облака? Будет дождь), I think the weather will be nice later. (Я думаю, что позже погода будет хорошей), they're playing very well. they're going to win (они играют очень хорошо. они собираются победить), you'll never finish that book (ты никогда не закончишь эту книгу)
- Will+V, Be going to+V   
Task:
Future Continuous
# English
Decision:
- we can use when the action will be happening at a certain time or during a certainperiod of time n the future (мы можем использовать, когда действие будет происходить в определенное время или в течение определенного периода времени в будущем)
- you will be sleeping on the plane (ты будешь спать в самолете)
- Will be+Ving, would be + Ving     
Task:
First Conditions
# English
Decision:
- we can use when to talk about a possible situation in the future and its result (мы можем использовать, когда говорить о возможной ситуации в будущем и ее результате)
- if you step on my foot, it will hurt (если ты наступишь мне на ногу, будет больно), if you step on my foot, it's going to hurt (если ты наступишь мне на ногу, будет больно)
- condition (if) + present simple (V/Vs,do/does+V) result, will/be going to, modals (модальный глагол), imperatives (повелительное наклонение)
Task:
Second Conditions
# English
Decision:  
- we can use when to talk about an unreal present or future situation and its result (мы можем использовать, когда говорить о нереальной настоящей или будущей ситуации и ее результате)
- if I had a job, I would rent a flat (если бы у меня была работа, я бы снял квартиру), if he didn't have a headache, he would go to the party (если бы у него не болела голова, он бы пошел на вечеринку)
- condition (if) + past simple (Ved/v2,did+V,Что сделал) result, would+V, could/might+V, would='d
Task:
There is, Was will be, Is going to be
# English
Decision:
- You say that smth or somebody is or isn't somewhere (Если что-то где-то лежит, весит, стоит, находится, это все заменяет одна конструкция: there is/are)
- There is an apple on the table, There was an apple on the table
- there+be+smth   
Task:
used to
# English
Decision:
- раньше это действие происходило, а теперь - нет; We use used to only for the past. You can’t say “I use to…” (present) (Мы используем "раньше" только для прошлого; Вы не можете сказать: "Я привык..." (настоящее время)); We don’t use used to for actions that happened only once (Мы не используем used to для действий, которые произошли только один раз); We can always use Past Simple instead of used to (Мы всегда можем использовать Past Simple вместо привычного)
- I went to Italy in 2012. not I used to go to Italy in 2009 (Я ездил в Италию в 2012 году. Раньше я не ездил в Италию в 2009 году), I used to have a dog called Tilly. = I had a dog called Tilly (Раньше у меня была собака по имени Тилли. = У меня была собака по кличке Тилли)
Task:
be able
# English
Decision:   
- вообще переводится как "быть способным"; Запомните, что в случае, когда вам удалось что-то сделать всего один раз, could использовать нельзя, а в отрицаниях нет разницы, Можно использовать оба варианта;
- Future: You’ll be able to get a taxi outside the station (Ты сможешь взять такси у станции); Perfect: He has never been able to sing (Он никогда не умел петь); Past: Смог (один раз), I was able to find some useful books (Я смог найти несколько полезных книг); I couldn’t find the book = I wasn’t able to find the book; I’d like: She’d like to be able to swim (Она бы хотела уметь плавать); Тянучки: He enjoys being able to swim (Ему нравится уметь плавать); Полутянучки: I love being able to swim / to be able to swim (Мне нравится уметь плавать); После обычных глаголов: I want to be able to swim (Я хочу уметь плавать)
- be able to V    
Task:
Passive Voice
# English
Decision:
- Name Passive voice страдательный залог; Rule We use the passive when we don’t know or it isn’t important who does the action (Мы используем пассивный, когда мы не знаем или не важно, кто совершает действие)
- I am loved (Меня любят), The dishes are washed (Посуда помыта)
- be + V3/Ved
Task:
Special Features
# English
Decision:   
- Passive Voice can be used with, If you have to say who did the action, use by.
- It must be done today, The letter should be sent now, The students are taught by a teacher.
- modals (modal + be + V3/ed), going to (is/am/are going to + be + V3/ed), verbs like, want, need, have to, etc. (want + to be + V3/ed) (с любыми нетянучками)
Task:
Future in the Past
# English
Decision:  
- Bob thought that he would be a doctor (Боб думал, что будет доктором)
- will - would
Task:
countable / uncountable
# English
Decision:
- many / a lot of/lots of / much - много
- a few / some / a little - немного, несколько
- few / little - мало
- not any - вообще нет
Task:
А
# English
Decision:
- с исчисляемыми сущ в ед числе (a dog)
- с неисчисляемыми сущ, когда имеем ввиду порции (I'll buy you an ice-cream)
- В паре прил+сущ (a big bag)
- когда упоминаем о чем то впервые (I read an interesting book)
- в значении "какой-нибудь", "какой-то" (she saw a man outside)
Task:
THE
# English
Decision:
- когда этот предмет уже упоминался раньше (yesterday I bought a car. the car works very well)
- когда в самом предложении уточняется, какой именно предмет имеется ввиду (the coffee you bought wasn't good)
- когда говорящим понятно, о каком объекте идет речь, даже если оно не упоминался ранее. В этом случае артикль можно заменть на слова этот, мой, твой (look at the people)
- когда говорим о чм то уникальном, единственном в своем роде (the sun, the world)
Task:
Which step have you reached today?
# English
Decision:
- I won't do it
- I can't do it
- I want to do it
- How do I do it?
- I'll try to do it
- I can do it
- I will do it
- Yes, I did it
Task: 
Say and tell В чем разница? 
# English
Decision:
- когда просто говорим что-то, то используем глагол say (She said (that) she would call Jim);
- когда говорим что-то кому-то, то говорим say to smb или tell smb (She told me (that) she would call Jim.);
Task:
Who-questions
# English
Decision:
- who lives with Ricardo (Кто живет с Рикардо )
- who does Ricardo live with (С кем живет Рикардо )
Task:
Правильное составление предложений
# English
Decision:
verb+preposition+Ving - глагол+предлог+Ving
GO+preposition=...
- for: a walk / a swim / a run
- on: a date / a vacanation / a cruise
- to: church / school / bed
- to the: toilet / hospital / cinema
GO...
- go: home, downtown, shopping, swimming, dancing, fishing, sailing (парусный спорт)
- go to: church, sleep, school, extremes (крайности), University, bed, prison (тюрьма), war, Madrid, Asia
- go on: holidays, a cruise, a trip (поездка), a date, a journey (путешествие), strike (удар), stage (этап)
- go fo: a walk, a swim, a drive, a run, a dip (макать)
- go to a: party, conference, concert, restaurant, bar, festival
- go to the: bathroom, doctor, bank, supermarket, airport
Task:
Вы хотите использовать ВМ для запуска веб-сервера и размещения базы данных (БД). Как вам лучше сконфигурировать дисковую подсистему с точки зрения быстродействия и стоимости?
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
Разместить веб-сервер на HDD, потому что он грузится в оперативную память при запуске ОС, а базу данных — на SSD, потому что к ней идёт постоянное обращение.
Task:
Вы разрабатываете веб-приложение на ВМ на ноутбуке и хотите перенести ВМ в облако.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
Загрузить образ в бакет Yandex Object Storage.
Task:
Для проверки состояния заданы следующие параметры: тип — HTTP, интервал выполнения — 10 секунд, время ожидания — 5 секунд, пороги работоспособности и неработоспособности — 2. ВМ пройдёт проверку, если...
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
дважды ответит с кодом 200 через 4,5 секунды
Task:
Чтобы максимально защитить группу ВМ фиксированного размера от сбоев, нужно разрешить
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
и уменьшение, и превышение целевого размера группы
Task
Чтобы сервис не создавал ВМ на каждый всплеск активности пользователей, нужно правильно:
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
настроить промежуток измерения нагрузки, задать целевое значение метрики
Task:
Вы хотите поместить в облако БД, которая обслуживает работающий микросервис с постоянной, но не очень высокой нагрузкой. Какой тип ВМ стоит выбрать при создании кластера?
Decision:
standard
Task:
Будет ли разрешён доступ к объекту, если запрос проходит проверку IAM, подпадает под правило Deny политики доступа и разрешается ACL?
Decision:
Нет. Доступ даётся только при условии, что нет ни одного правила, которое бы запрещало доступ.
Task:
Имеет ли смысл положить в объектное хранилище файл с очень большой базой данных SQLite, если к ней идет много запросов на чтение и лишь немного на запись?
Decision:
Нет. Объекты в хранилище не изменяются. Чтобы внести в объект изменения, нужно закачать в хранилище его новую версию. Для очень большого объекта, который будет изменяться, пусть даже нечасто, так лучше не делать.
Task:
Типы исключений
Decision:
TypeError: can only concatenate str (not "list") to str - если попытаемся сложить список со строкой или строку с множеством.
TypeError - если попытаемся вычесть число из строки.
FileNotFoundError: [Errno 2] No such file or directory: '1231231' - если попытаемся открыть несуществующий файл.
IndexError: list index out of range - если попытаемся обратится к несуществующему индексу у строки или у списка.
KeyError: 'b' - если попытаемся обратится к несуществующему ключу у словаря.
NameError - если попытаемся обратится к несуществующей переменной.
ZeroDivisionError - если попытаемся число поделить на 0.
Task:
В чем отличие списка от кортежа?
Decision:
Список - изменяем, кортеж - нет.
Task:
Как происходит процесс присваивания в Python?
Decision:
Данные связываются ссылками на объекты.
Task:
Каким образом алгоритм сортировки по ведрам сортирует данные от меньшего к большему?
Decision:
Распределяет данные по небольшим контейнерам, сортирует эти контейнеры, а затем скрепляет по порядку.
Task:
Каким образом алгоритм пузырьковой сортировки сортирует данные от большего к меньшему?
Decision:
Путем сравнения каждого индекса массива со следующим по порядку. Если значение на следующем индексе больше, меняет их местами.
Task:
Какая маска подсети Ip 10.20.0.0/23?
Decision:
Если 24 - последняя цифра отходит 255.255.255.0. В нашем случае - 255.255.254.0.
Task:
В вашем распоряжении находится подсеть 192.168.1.0/30. Какие Ip адреса доступны для присвоения устройствам?
Decision:
Маска 30 означает, что подряд 30 единиц 11111111.11111111.11111111.11111100. значит ответ 192.168.1.1, 192.168.1.2.
Task:
Скорость передачи по технологии GPRS
Decision:
до 115 кбит/с. 
Task:
диапазоны 4 частот Сети 2G
Decision:
850, 900, 1800, 1900 МГц
Task:
Виды телефонов
Decision:
Однодиапазонные, Двухдиапазонные, Трёхдиапазонные, Четырёхдиапазонные, Single-band, Dual-band, Tri-band, Quad-band
Task:
принцип пакетной передачи данных
Decision:
Они объединяют в себе высокоскоростной доступ к услугам интернет и технологию передачи голосового трафика
Task:
диапазон частот UMTS
Decision:
2110-2200 МГц (зачастую ширина канала 5 МГц)
Task:
Скорость передачи данных в режиме UMTS 
Decision:
не более 2 Мбит/с (для неподвижного абонента), а при движении абонента, в зависимости от скорости движения, может опуститься до 144 Кбит/с.
Task:
Скорость передачи данных с применением стандарта LTE
Decision:
на нисходящем соединении, может достигать 326 Мбит/с, на исходящем 172 Мбит/с. 
Task:
Диапазон частот Российских операторов работающих в сетях 4G по протоколу LTE
Decision:
2600 МГц, 1800 МГц и 800 МГц.
Task:
скорость передачи данных в LTE-сетях
Decision:
326.4 Мбит/с и зависит от используемой оператором ширины диапазона частот
Task:
принцип TDM
Decision:
разделение времени передачи на несколько временных слотов и назначения каждого слота определенному сигналу. Каждый сигнал передается в назначенный ему временной слот последовательно. Этот процесс повторяется циклически, что позволяет передавать все сигналы по одному и тому же каналу.
Task:
особенность TDM
Decision:
возможность одновременной обработки нескольких сигналов без каких-либо помех
Task:
Отличие роутера от маршрутизатора
Decision:
Маршрутизаторы могут также выполнять функции роутера, но они не обязательно должны быть роутерами. Однако, сегодня многие производители и пользователи используют термины «роутер» и «маршрутизатор» взаимозаменяемо, поскольку устройства, которые выполняют функции обоих, могут называться как роутерами, так и маршрутизаторами.
Task:
Отличие коммутатора от маршрутизатора
Decision:
Отличие в уровне адресации подключенных устройств. Коммутатор работает с физическими (MAC) адресами. Маршрутизатор же может произвести пересылку данных на основании логических (IP) адресов, что позволяет организовать взаимодействие между сетями. Грубо говоря, коммутатор - некое подобие разветвителя, в то время как маршрутизатор - специальное сетевое устройство, пересылающее пакеты данных.
Task:
Отличие запросов Get и Post
Decision:
Запрос Get передает данные в Url через ссылку, Post передает данные в теле запроса.
Task:
Принцип Dos Атаки
Decision:
сетевые запросы на сетевом уровне осуществляются с одного компьютера и нацелены на конкретный виртуальный сервер или домен.
Task:
типы сертификатов
Decision:
Пользовательские, Let’s Encrypt
Task:
Какие правовые документы определяют требования к защите персональных данных?
Decision:
GDPR, Федеральный закон №152-ФЗ Российской Федерации, приказ ФСТЭК России от 18.02.2013 № 21.
Task:
Чем Dos Атака отличается от DDos?
Decision:
DoS-атаки используют всего один хост для перегрузки системы, есть косвенные признаки, по которым их можно отличить от DDoS. Они менее эффективны и более заметны: когда запросы приходят с одного IP-адреса источника, системному администратору становится очевидна их нелегитимность. Как следствие — DoS-атаки гораздо проще подавить, ведь достаточно использовать брандмауэр.
Task:
Как создать простое зашифрованное сообщение с помощью командной строки?
Decision:
Использовать OpenSsl для шифрования потока текста в текстовый файл, который содержит зашифрованный текст Aes-256 с использованием ключа доступа.
Task:
Когда нужно использовать Terraform модули?
Decision:
Когда есть повторяющийся код. Это более удобное решение нескольких ресурсов.
Task:
принцип работы групп безопасности
Decision:
Запрещено всё, что не разрешено напрямую.
Task:
типы записей DNS
Decision:
A, AAAA, CNAME, MX, PTR, TXT, SRV, NS, SOA.
Task:
Коды сообщений или ошибок http
Decision:
1xx: информационные, 100 продолжайте, 102 идёт обработка.
2xx: успешно, 200 хорошо.
308 постоянное перенаправление.
4xx: ошибка клиента, 400 неправильный, некорректный запрос, 404 не найдено.
5xx: ошибка сервера, 500 внутренняя ошибка сервера, 502 плохой, ошибочный шлюз.
Translation of the Decision:
1xx: Informational, 100 Continue, 102 Processing.
2xx: Success, 200 OK.
308 Permanent Redirect.
4xx: Client Error, 400 Bad Request, 404 Not Found.
5xx: Server Error, 500 Internal Server Error, 502 Bad Gateway.
Task:
Чем Nginx отличается от Apache?
Decision:
асинхронный принцип работы Nginx.
Task:
преимущества подхода Infrastructure as Code?
Decision:
изменения, вносимые в спецификации, легко проконтролировать.
для спецификаций можно хранить историю версий и при необходимости можно быстро извлечь и использовать нужную версию.
описания отдельных объектов IT-инфраструктуры можно многократно использовать в разных инсталляциях, это ускоряет подготовку к развёртыванию и повышает надёжность за счет использования проверенных решений.
Task:
Принцип работы SElinux
Decision:
SELinux расширяет возможности стандартной системы безопасности (на основе прав доступа к файлам). Она позволяет ограничить доступ процессу, который запускается от имени пользователя, у которого прав больше, чем нужно данному процессу. Чтобы понять наглядно принцип работы SELinux, рассмотрим контекст безопасности — сочетание сущности, роли, домена и категории (не обязательно).
Task:
Чем приватный отличается от публичного ключа?
Decision:
Мы можем сгенерировать два ключа - приватный и публичный. После чего закинуть публичный ключ на все свои сервера и подключаться к ним без пароля, используя приватный ключ. Это говорит о том, что приватный ключ нужно беречь.
Админ закидывает публичный ключ на сервера, в домашнюю директорию пользователей, к которым будет подключаться. И при следующем подключении демон ssh увидит наличие подходящего ключа у пользователя и аутентифицирует его.
Task:
Как сгенерировать ssh ключа?
Decision:
Для начала нужно сгенерировать ключи, это делается на стороне клиента, т.е. у администратора. Для генерации ключей используется команда ssh-keygen. По умолчанию ключи и в целом настройки клиента ssh хранятся в домашней директории пользователя, в скрытой директории .ssh. А ключи, по умолчанию, называются id_rsa. По хорошему, когда у нас много серверов, мы можем создать различные ключи и для подключения к разным серверам использовать разные ключи. Тут нажмём enter, чтобы использовать название по умолчанию. Дальше у нас спрашивается пароль для ключа. Так как ssh ключи позволяют заходить на сервера без пароля, они могут быть очень опасны, если попадут в руки злоумышленникам. Поэтому мы можем защитить приватные ключи паролем. При использовании ключа нам нужно будет вводить пароль от ключа, но, если у нас украдут этот ключ, без пароля хакеры ничего не сделают. Для нашего примера мы не будем использовать пароль, чтобы было нагляднее. Поэтому нажимаем два раза Enter и ключ создаётся. Мы видим, что создались два файла - id_rsa и id_rsa.pub - приватный и публичный ключ соответственно. Также внизу есть эдакая картинка, визуализирующая ключ. На самом деле это больше нужно для ключей хоста - вы можете настроить так, чтобы при подключении к серверам вы видели ключ хоста в таком виде. Если вдруг ключ хоста изменится или кто-то встанет посреди трафика, ключ будет другой и визуально вы сразу заметите разницу.
У нас есть ключи, теперь мы можем закинуть наш публичный ключ на какой-нибудь сервер и проверить. Используем эту же виртуалку и пользователя root. Самый простой способ закинуть ключ - команда ssh-copy-id.
Если не использовать никакие опции, она найдёт дефолтный ключ id_rsa.pub и закинет его. При этом, чтобы закинуть ключ, ssh подключается на этот сервер к пользователю, поэтому он попросит пароль пользователя. После чего добавит ключ и предложит нам проверить.
На этот раз никакого пароля не потребовалось, мы можем аутентифицироваться по ключу.
Посмотрим появившиеся файлы, для начала у клиента. В директории .ssh у нас 3 файла - два ключа и файл known_hosts.
Ключи представляют из себя текстовые файлы с непонятным набором символов. А в файле known_hosts указаны адреса, к которым мы подключались, а также отпечатки их ключей. Именно по этому файлу наш клиент будет понимать, изменились ли у сервера ключи или нет.
На сервере, в домашней директории пользователя, к которому я закинул ключ, также появилась директория .ssh с файлом authorized_keys
В этот файл будут попадать публичные ключи пользователей, т.е. это результат команды ssh-copy-id. На самом деле, хоть и не понятно в терминале, в этом файле сейчас одна строчка с одним ключом. Этот тот же id_rsa.pub. Если кто-то ещё добавит ключ, то он будет на второй строчке, т.е. один ключ - одна строчка.
Task:
Есть консольная программа для Linux, которая должна вывести результат работы в терминал. Но после запуска никакого вывода не происходит и вы снова видите системное приглашение консоли. Перечислите порядок действий для выявления причин и инструменты, которыми воспользуетесь для решения данной проблемы.
Decision:
Если код закрыт, то надо перенаправить весь вывод на стандартный. перенаправление потока ошибок stderr на стандартный вывод stdout.
А если открыт, то уже смотреть по самому коду скрипта или исполняемого файла. Проверить штатность поведения - код возврата. если не 0, то посмотрел бы в dmesg на предмет segfault. Может оно просто тихо падает. Потом попробовал бы почитать man, запустил бы с ключом --help или -h. Исключив segfault, запустил бы её через strace, чтобы посмотреть, что она вообще пытается сделать.
Task:
Пример Rpo/Rto
Decision:
Раз в день в 1:00 делаете бэкап. в 12:00 сгорает сервер. Поставил новый компьютер, установил ОС, программы и восстанавили бэкап. в 17:00 - полное восстановление.
Время от последнего бэкапа - Rpo, а время до восстановления - rto. Если организация хочет Rpo 1 час - бэкап надо делать каждый час, а для 1 часа нужно автоматическое создание серверов. Можно сделать реплику потерю данных Rpo на другой сервер.
Task:
характеристики микросервисов
Decision:
Все разбито на маленькие компоненты. Например, есть компонент для веб-сервера, есть компонент, который показывает другу страницу и есть компонент, который обращается к базе данных.
Если что-то ломается, это не страшно, когда есть другие микросервисы.
Все данные должны сохраняться в какой-нибудь БД, а не в микросервисах.
Task:
Пример работы DNS
Decision:
Ввожу адрес. компьютер понимает только Ip адреса. Поэтому ему надо перевести ваш Url запрос в Ip. Компьютер сначала локально проверят хост файл. в линуксе это reslove. Если в файле прописан жанный адрес, то ответ отправляется пользователю, если нет то проверяется в Dns Серверах на регистрацию адреса. ВОзращается все это по протоколку http.
Task:
Чем Active Directory отличается от Dns?
Decision:
Active Directory использует DNS как механизм поиска контроллеров домена и других объектов.
Task:
Пример работы инкапсуляции Модель OSI
Decision:
Представим ситуацию, что вы сидите у себя дома за компьютером, а в соседней комнате у вас свой локальный веб-сервер. И вот вам понадобилось скачать файл с него. Вы набираете адрес страницы вашего сайта. Сейчас вы используете протокол HTTP, которые работает на прикладном уровне. Данные упаковываются и спускаются на уровень ниже.
Полученные данные прибегают на уровень представления. Здесь эти данные структурируются и приводятся в формат, который сможет быть прочитан на сервере. Запаковывается и спускается ниже.
На этом уровне создается сессия между компьютером и сервером.
Так как это веб сервер и требуется надежное установление соединения и контроль за принятыми данными, используется протокол TCP. Здесь мы указываем порт, на который будем стучаться и порт источника, чтобы сервер знал, куда отправлять ответ. Это нужно для того, чтобы сервер понял, что мы хотим попасть на веб-сервер (стандартно — это 80 порт), а не на почтовый сервер. Упаковываем и спускаем дальше.
Здесь мы должны указать, на какой адрес отправлять пакет. Соответственно, указываем адрес назначения (пусть адрес сервера будет 192.168.1.2) и адрес источника (адрес компьютера 192.168.1.1). Заворачиваем и спускаем дальше.
IP пакет спускается вниз и тут вступает в работу канальный уровень. Он добавляет физические адреса источника и назначения, о которых подробно будет расписано в последующей статье. Так как у нас компьютер и сервер в локальной среде, то адресом источника будет являться MAC-адрес компьютера, а адресом назначения MAC-адрес сервера (если бы компьютер и сервер находились в разных сетях, то адресация работала по-другому). Если на верхних уровнях каждый раз добавлялся заголовок, то здесь еще добавляется концевик, который указывает на конец кадра и готовность всех собранных данных к отправке.
И уже физический уровень конвертирует полученное в биты и при помощи электрических сигналов (если это витая пара), отправляет на сервер.
Task:
Пример работы деинкапусуляции Модель OSI
Decision:
На физическом уровне принимаются электрические сигналы и конвертируются в понятную битовую последовательность для канального уровня.
На канальном уровне проверяется MAC-адрес назначения (ему ли это адресовано). Если да, то проверяется кадр на целостность и отсутствие ошибок, если все прекрасно и данные целы, он передает их вышестоящему уровню.
На сетевом уровне проверяется IP адрес назначения. И если он верен, данные поднимаются выше. Не стоит сейчас вдаваться в подробности, почему у нас адресация на канальном и сетевом уровне. Это тема требует особого внимания, и я подробно объясню их различие позже. Главное сейчас понять, как данные упаковываются и распаковываются.
На транспортном уровне проверяется порт назначения (не адрес). И по номеру порта, выясняется какому приложению или сервису адресованы данные. У нас это веб-сервер и номер порта — 80.
На этом уровне происходит установление сеанса между компьютером и сервером.
Уровень представления видит, как все должно быть структурировано и приводит информацию в читабельный вид.
И на этом уровне приложения или сервисы понимают, что надо выполнить.
Task:
Чем роутер отличается от маршрутизатора?
Decision:
роутер и маршрутизатор — это одно и то же устройство. Однако под маршрутизатором часто подразумевают устройство для создания в первую очередь проводной сети, в то время как роутер — для беспроводной.
Task:
Чем коммутатор отличается от маршрутизатора?
Decision:
Свитч проще с технической точки зрения и обладает ограниченной функциональностью.
Маршрутизаторы сложнее устроены и могут анализировать объём информации, определять IP-адреса.
Коммутаторы работают исключительно с MAC-адресами.
Маршрутизаторам свойственен сетевой уровень модели OSI.
Маршрутизаторы отличаются подключением к интернету.
Для работы коммутатора и маршрутизатора нужен порт LAN, но последнее устройство также использует и WAN-порт.
Task:
Компьютер включен, загружен, подключен к сети, работает корректно, но не «пингуется», в чем может быть причина?
Decision:
Брандмауэр (firewall) блокирует ICMP-трафик.
Task:
Исправление ошибок в коде
Decision:
Занесите ошибку в трекер:
Что делал пользователь.
Что он ожидал увидеть.
Что случилось на самом деле.
Поищите сообщение об ошибке в сети. Если у вас есть сообщение об ошибке, то вам повезло. Или оно будет достаточно информативным, чтобы вы поняли, где и в чем заключается ошибка, или у вас будет готовый запрос для поиска в сети.
Найдите строку, в которой проявляется ошибка. Если ошибка вызывает падение программы, попробуйте запустить её в IDE под отладчиком и посмотрите, на какой строчке кода она остановится. это может дать вам информацию о природе бага.
Найдите точную строку, в которой появилась ошибка. Как только вы найдете строку, в которой проявляется ошибка, вы можете пройти назад по коду, чтобы найти, где она содержится. Иногда это может быть одна и та же строка. Но чаще всего вы обнаружите, что строка, на которой упала программа, ни при чем, а причина ошибки — в неправильных данных, которые появились ранее. Если вы отслеживаете выполнение программы в отладчике, то вы можете пройтись назад по стектрейсу, чтобы найти ошибку. Если вы находитесь внутри функции, вызванной внутри другой функции, вызванной внутри другой функции, то стектрейс покажет список функций до самой точки входа в программу (функции main()). Если ошибка случилась где-то в подключаемой библиотеке, предположите, что ошибка все-таки в вашей программе — это случается гораздо чаще. Найдите по стектрейсу, откуда в вашем коде вызывается библиотечная функция, и продолжайте искать.
Выясните природу ошибки.
Ошибка на единицу. Вы начали цикл for с единицы вместо нуля или наоборот. Или, например, подумали, что метод .count() или .length() вернул индекс последнего элемента. Проверьте документацию к языку, чтобы убедиться, что нумерация массивов начинается с нуля или с единицы. Эта ошибка иногда проявляется в виде исключения Index out of range.
Состояние гонки. Ваш процесс или поток пытается использовать результат выполнения дочернего до того, как тот завершил свою работу. Ищите использование sleep() в коде. Возможно, на мощной машине дочерний поток выполняется за миллисекунду, а на менее производительной системе происходят задержки. Используйте правильные способы синхронизации многопоточного кода: мьютексы, семафоры, события и т. д.
Неправильные настройки или константы. Проверьте ваши конфигурационные файлы и константы. Я однажды потратил ужасные 16 часов, пытаясь понять, почему корзина на сайте с покупками виснет на стадии отправки заказа. Причина оказалась в неправильном значении в /etc/hosts, которое не позволяло приложению найти ip-адрес почтового сервера, что вызывало бесконечный цикл в попытке отправить счет заказчику.
Неожиданный null. Бьюсь об заклад, вы не раз получали ошибку с неинициализированной переменной. Убедитесь, что вы проверяете ссылки на null, особенно при обращении к свойствам по цепочке. Также проверьте случаи, когда возвращаемое из базы данных значение NULL представлено особым типом.
Некорректные входные данные. Вы проверяете вводимые данные? Вы точно не пытаетесь провести арифметические операции с введенными пользователем строками?
Присваивание вместо сравнения. Убедитесь, что вы не написали = вместо ==, особенно в C-подобных языках.
Ошибка округления. Это случается, когда вы используете целое вместо Decimal, или float для денежных сумм, или слишком короткое целое (например, пытаетесь записать число большее, чем 2147483647, в 32-битное целое). Кроме того, может случиться так, что ошибка округления проявляется не сразу, а накапливается со временем (т. н. Эффект бабочки).
Переполнение буфера и выход за пределы массива. Проблема номер один в компьютерной безопасности. Вы выделяете память меньшего объема, чем записываемые туда данные. Или пытаетесь обратиться к элементу за пределами массива.
Программисты не умеют считать. Вы используете некорректную формулу. Проверьте, что вы не используете целочисленное деление вместо взятия остатка, или знаете, как перевести рациональную дробь в десятичную и т. д.
Конкатенация строки и числа. Вы ожидаете конкатенации двух строк, но одно из значений — число, и компилятор пытается произвести арифметические вычисления. Попробуйте явно приводить каждое значение к строке.
33 символа в varchar(32). Проверяйте данные, передаваемые в INSERT, на совпадение типов. Некоторые БД выбрасывают исключения (как и должны делать), некоторые просто обрезают строку (как MySQL). Недавно я столкнулся с такой ошибкой: программист забыл убрать кавычки из строки перед вставкой в базу данных, и длина строки превысила допустимую как раз на два символа. На поиск бага ушло много времени, потому что заметить две маленькие кавычки было сложно.
Некорректное состояние. Вы пытаетесь выполнить запрос при закрытом соединении или пытаетесь вставить запись в таблицу прежде, чем обновили таблицы, от которых она зависит.
Особенности вашей системы, которых нет у пользователя. Например: в тестовой БД между ID заказа и адресом отношение 1:1, и вы программировали, исходя из этого предположения. Но в работе выясняется, что заказы могут отправляться на один и тот же адрес, и, таким образом, у вас отношение 1:многим.
Task:
Для работы с API Gateway можно использовать
Decision:
Консоль управления, Yandex Cloud REST API.
Task:
задачи очереди
Decision:
Передачи данных.
Task:
Что должен сделать сервис при том или ином типе пути?
Decision:
dummy - Выдать статический ответ.
cloud-functions - Вызвать функцию сервиса Yandex Cloud Functions.
http - Отправить http-запрос.
object-storage - Обратиться к сервису Yandex Object Storage.
Task:
Что происходит с сообщением, когда получатель начал обрабатывать сообщение?
Decision:
Остаётся в очереди, но скрывается от других.
Task:
концептуальные ограничения есть у сервиса
Decision:
Функции не могут бесконечно выполнять какую-то задачу.
При вызове у функции нет информации о результате прошлых запусков.
Task:
Ключевые отличия serverless-режима YDB от managed-режима
Decision:
Оплата идёт за фактические запросы к базе данных, а не за резервирование мощностей.
Можно перенести своё приложение из AWS.
Task:
Что учитывается при тарификации YDB в serverless-режиме
Decision:
стоимость использования CPU.
хранение данных.
ввод и вывод данных.
Task:
Преимущества балансировки
Decision:
Абстрактность имён.
Устойчивость к отказам.
Повышение производительности.
Task:
Какие хосты входят в кластер Data Proc?
Decision:
Master Node.
Compute Node.
Data Node.
Task:
Для OLAP-сценариев работы с БД характерно
Decision:
большинство запросов — это операции чтения.
данные добавляются в БД большими порциями.
на выходе данные фильтруют или агрегируют.
Task:
Контейнеризация отличается от виртуализации
Decision:
контейнеры используют меньше ресурсов, чем виртуальные машины: несколько контейнеров могут использовать одну хостовую ОС, тогда как для каждой виртуальной машины нужна отдельная ОС.
Task:
ключевые особенности разработки приложений при использовании serverless-сервисов
Decision:
Нет необходимости создавать и обслуживать виртуальные машины.
Нет необходимости отслеживать утилизацию оборудования и добавлять или удалять ресурсы, чтобы инфраструктура обходилась дешевле и справлялась с повышенной нагрузкой.
Можно писать приложения для Cloud Functions на любом удобном для вас языке программирования, для которого есть среда исполнения.
Вы сможете написать и запустить приложение в интернете, обладая меньшими знаниями о серверах и операционных системах, чем при использовании виртуальных машин.
Task:
ограничения serverless-функций
Decision:
Функции не хранят своего состояния.
Функция не может быть бесконечной.
Task:
Какие действия должен выполнять пользователь для реализации третьего уровня защищённости при работе с персональными данными в облаке в соответствии с приказом ФСТЭК России от 18.02.2013 № 21?
Decision:
Настраивать средства аутентификации внутри виртуальных машин.
Контролировать доступ к виртуальным машинам.
Обеспечивать антивирусную защиту виртуальных машин.
Защищать данные от раскрытия и модификации при их передаче через интернет.
Регистрировать события безопасности.
Task:
В чём заключается основная идея принципа наименьших привилегий, используемого для обеспечения информационной безопасности инфраструктуры?
Decision:
Каждый элемент должен иметь доступ только к той информации и ресурсам, которые необходимы для их функционирования.
Task:
Каких целей информационной безопасности можно достичь с помощью сервиса KMS?
Decision:
Целостность.
Конфиденциальность.
Task:
В чём преимущество экспорта детализации в CSV-файл?
Decision:
Обработку CSV-файлов можно автоматизировать.
Task:
Предположите, какую базу данных вы бы выбрали для приложения —  многопользовательской онлайн-стратегии в средневековом сеттинге, где можно развивать замки и захватывать территории противников?
Decision:
стоит учитывать несколько факторов: возможность легко масштабировать систему; структура данных — если вы планируете активно развивать свое приложение, то она вряд ли будет жёсткой; необходимость реализации транзакций; отсутствие (или очень небольшое число) сложных аналитических запросов; работа под смешанной нагрузкой.
Task:
Вы используете Yandex Object Storage для хранения архива аудиозаписей. Какой класс хранилища стоит выбрать?
Decision:
Холодное
Task:
Типы репликаций
Decision:
репликация моментального снимка, репликация транзакций, репликация слиянием.
Task:
Чем Реляционная бд отличается от Нереляционной бд?
Decision:
Реляционные предназначены для хранения структурированных данных, способных представлять объекты из окружающего физического мира. К примеру, в такую БД можно включить сведения о конкретном человеке или о товарах, добавленных потенциальным покупателем в корзину. Такие данные можно группировать в специальных таблицах.
Нереляционные базы хранящаяся информация напрямую зависит от особенностей самой базы данных. К примеру, в случае с документоориентированной БД информация может быть представлена в виде иерархии и описывать различные объекты с разными параметрами.
В этом заключается главное отличие NoSQL от SQL и ее же преимущество. Такие базы дают возможность хранить почти неограниченные по объему данные в виде одной сущности. В SQL для хранения большого объема данных необходимо создание множества отдельных, но связанных между собой таблиц.
Task:
особенности ClickHouse, которые ускоряют работу с аналитическими запросами
Decision:
Поддержка приближенных вычислений.
Шардирование БД.
Распараллеливание выполнения запросов.
Task:
Технологии работы с большими данными основаны на необходимости
Decision:
горизонтальной масштабируемости используемых вычислительных ресурсов.
обеспечения отказоустойчивости систем.
распределенного хранения и обработки данных.
Task:
Как работают базовые станции?
Decision:
-
Task:
Какие бывают стандарты?
Decision:
-
Task:
Как проиходит голосовая коммутация?
Decision:
Запуск сигнала. вы набрали номер, начался вызов: от вышки сотовой связи идёт запрос на контроллер базовых станций (2G или 3G). Он передаёт ваш вызов на коммутатор MSC.
Анализ данных. Коммутатор запускает процесс анализа ваших данных у «трёх богатырей» — HLR, VLR и AUC.
Разрешение на вызов.  коммутатор обращается к биллингу через IN-платформу. В ответ на этот запрос биллинг определяет доступность услуги у абонента, стоимость вызова, наличие средств, пакетов SMS и минут на счёте, и только после этого либо разрешает, либо запрещает запрос. Чтобы абонент понял причину запрета, биллинг передаёт код, по которому коммутатор проигрывает голосовое сообщение. Например: «Недостаточно средств для совершения вызова».
Task:
Процесс коммутации.
Decision:
Процесс соединения абонентов коммуникационной сети через транзитные узлы.
Task:
Как проиходит пакетная сессия в деталях?
Decision:
Запрос. абонент захотел выйти в интернет и начал открывать YouTube на своём телефоне. Телефон всё быстро просёк и отправил запрос на базовую станцию: «ВНИМАНИЕ! Мой хозяин хочет выйти в интернет». Базовая станция моментально передала это сообщение на контроллер базовых станций, а оттуда он попал на #SGSN.
Процедура Attach. SGSN проводит процедуру авторизации абонента, серьёзные дяди-технари называют её #Attach. Она позволяет получить всю нужную информацию об абоненте с его сим-карты. Далее SGSN сверяет эти данные в #HLR (база данных абонентов) и формирует абонентский профиль, который содержит всю важную информацию. Например, отображает точку доступа для выхода в сеть (APN) или параметра качества сервиса и т. д.
Направление запроса. После того как процедура Attach прошла, SGSN выбирает, куда нужно идти дальше, чтобы выйти во внешний мир. За это отвечает идентификатор сети пакетной передачи данных APN, в которой есть #DNS — это система, которая определяет, на какой IP нужно сделать запрос, чтобы выйти в интернет.
Разрешение передачи данных.  SGSN направляет запрос на #GGSN (Gateway GPRS Service Node). Этот узел маршрутизирует ваш трафик, чтобы всё было чётко. В зависимости от настроек профиля абонента сверяется с биллингом для уточнения у абонента подключённых пакетов, денег на счёте и наличия блокировок. Если передача данных разрешена, то GGSN отправляет запрос во внешний интернет по тому адресу, который указал абонент.
Task:
Как частоты влияют на передач данных?
Decision:
Высокая частота всегда хуже огибает препятствие и меньше рассеивается, поэтому зона покрытия будет меньше и базовая станция должна располагаться ближе к телефону.
Task:
Что нужно для использования сотовой связи?
Decision:
Мобильный телефон с IMEI, Sim-карта с IMSI.
Task:
Принцип звонка по телефону.
Decision:
Телефон связывается с ближайщей БС и просит выделить канал для разговора. Базовая станция отправляет запрос на контроллер БС. Контроллер управляет очереддностью соединений, рапределяет радиокналы, собирает статистику и переключает абонента между БС. Контроллер передает данные в центр коммутации мобильной связи, он же просто коммутатор. Основная функция коммутаторов установить соединение между абнонетами сети. Второй коммутатор отправляет вызов своим БС, чтобы понять, где последний раз регистрировался абонент. И перенаправляет звонок на соответствующий контроллер. Контроллер передает сигнал на БС. БС связывается с мобильным телефоном и происходит соединение.
Task:
Принцип передачи файла по сотовому.
Decision:
В начале телефон связывается с ближайшей к вам базовой станцией, базовая станция отправляет запрос на контроллер. Контроллер отправляет запрос на SGSN. На SGSN возложены функции установления сессии пакетной передачи данных, маршрутизации пакетов, начисления платы за предоставленные услуги. Если пакеты маршрутизируются за пределы сети оператора, то они попадают в GGSN. Маршрутизаторы вне нашей сети.
Task:
Принцип запуска базовой станции.
Decision:
Обосновать, что станция нужна, Подготовка к запуску станции, Строительство и ввод в эксплуатацию, Эксплуатация и подключение абонентов.
Task:
Какой принцип работы Https на примере Chrome?
Decision:
Tcp соединение с сервером.
Публичный ключ с клиентом.
Ключ сессии с сервером.
Зашифрованные данные с клиентом.
Task:
Какой принцип работы Tcp на примере Chrome, Gmail, Ssh ?
Decision:
Синхронизация с сервером.
Синхронизация ACK с клиентом.
ACK с сервером.
отправляется пакет и ждет ответ
Task:
Какой принцип работы Udp на примере Веб конференции?
Decision:
Запрос с сервером.
Ответ клиенту.
Udp не ждет ответа. Udp используется для трансляции.
Task:
Какой принцип работы Http на примере Chrome?
Decision:
Tcp соединение с сервером.
Запрос с сервером.
Ответ клиенту.
Task:
Какой принцип работы Ip?
Decision:
Компьютерам, серверам и роутерам в интернете нужно понимать, куда отправлять данные.
Чтобы узнать IP-адрес вашего устройства, можно открыть терминал и ввести ipconfig в Windows или ifconfig в macOS и Linux.
Чаще всего это четыре числа, которые разделены между собой точками (такой формат поддерживается в протоколе IPv4).
IP адрес всегда состоит из двух частей: номера хоста (устройства 192.168.1) и номера сети (.23).
Task:
Создайте таблицу de13ma.XXXX_SALARY_HIST, где XXXX - ваш идентификатор. В таблице должна быть SCD2 версия таблицы de.HISTGROUP (поля PERSON, CLASS, SALARY, EFFECTIVE_FROM, EFFECTIVE_TO). Возьмите в работу таблицы
de13ma.XXXX_SALARY_HIST и de.SALARY_PAYMENTS. Напишите SQL скрипт, выводящий таблицу платежей сотрудникам. В таблице должны быть поля PAYMENT_DT, PERSON, PAYMENT, MONTH_PAID, MONTH_REST. Результат выполнения сохраните в таблицу de13ma.XXXX_SALARY_LOG.
1. MONTH_PAID - суммарно выплачено в месяце,
2. MONTH_REST - осталось выплатить за месяц.
Проверяется в первую очередь понимание как соединять фактовую таблицу с SCD2 таблицей (нельзя все расчеты сделать над DE.SALARY_PAYMENTS, ведь работнику могут недоплатить или переплатить).
В ответе приложите SQL-скрипт, таблица de13ma.XXXX_SALARY_LOG должна быть заполнена.
# Написание Sql запросов.
Decision:
root@kvmubuntu:~# cat Sql-Gabn_SALARY_LOG6.sql
create table de13ma.gabn_SALARY_HIST as (
	select 
		PERSON,
		CLASS,
		SALARY,
		dt as effective_from,
		coalesce((
			lead(dt) 
			over (
				partition by person 
				order by dt) - interval '1 day')::date,  
			to_date('9999-12-31', 'YYYY-MM-DD')) as effective_to
	from de.HISTGROUP);
--select * from de13ma.gabn_SALARY_HIST;
--select * from de.SALARY_PAYMENTS;
create table de13ma.gabn_SALARY_LOG as (
	select --*--,
		dgsh.person as PERSON,
		dsp.dt as PAYMENT_DT,
		dsp.payment as PAYMENT,
		--sum(dsp2.payment) as MONTH_PAID,
		--sum(dsp.payment) over (order by dsp.dt between dgsh.effective_from and dgsh.effective_to) as MONTH_PAID,
		sum(dsp.payment) over (partition by dsp.payment order by dsp.dt) as MONTH_PAID,
		dgsh.salary-sum(dsp.payment) as MONTH_REST--,
		--dgsh.salary
	from de13ma.GABN_SALARY_HIST as dgsh
	inner join de.SALARY_PAYMENTS as dsp 
		on dgsh.person=dsp.person 
	--inner join de.SALARY_PAYMENTS as dsp2 
	--	on dsp.dt >= dsp2.dt
	where dsp.dt between dgsh.effective_from and dgsh.effective_to
	group by dgsh.person,
		dsp.dt,
		dsp.payment,
		dgsh.salary--,
		--dgsh.effective_from,
		--dgsh.effective_to
	order by dgsh.person,
		dsp.dt);
select * from de13ma.gabn_SALARY_LOG;
Task:
На основании таблиц DE.LOG и DE.IP постройте структурированную таблицу посещений DE13MA.XXXX_LOG ( DT DATE, LINK VARCHAR( 50 ), USER_AGENT VARCHAR( 200 ), REGION VARCHAR( 30 ) ). Также постройте отчет DE13MA.XXXX_LOG_REPORT ( REGION VARCHAR( 30 ), BROWSER VARCHAR( 10 ) ) – в каких областях какой браузер является наиболее используемым.
Под USER_AGENT подразумевается вся строка описания клиента, под BROWSER – только название браузера (Opera, Safari…). XXXX означает ваши 4 уникальные буквы.
Важные замечания (вплоть до причины незачета задания):
1. Не используйте регулярные выражения там, где можно обойтись без них.
2. То, что вы видите в выводе клиента – это не всегда именно то, что содержится в базе данных.
# Написание Sql запросов.
Decision:
root@kvmubuntu:~# cat Sql-Gabn_LOG3.sql
create table DE13MA.GABN_LOG as (
	select 
		to_date (substring (dl.data from '\d{8}'), 'YYYYMMDD') as DT,
		cast (split_part (substring (replace (substring (dl.data, strpos (dl.data, 'http://')), chr(9), '+'), 1, strpos (replace (substring (dl.data, strpos(dl.data, 'http://')), chr(9), '|'), '/5.0') -1), '+', 1) as VARCHAR(50)) LINK,
		cast (split_part (replace (substring (dl.data from 1), chr(9), '+'), '+', 8 ) as VARCHAR(200)) USER_AGENT,
		cast (split_part (di.data, chr(9), 2) as VARCHAR(30)) REGION
	from de.log as dl
	left join de.ip as di
	on
		substring (dl.data, 1, strpos (dl.data, chr(9))) = 
			substring (di.data, 1, strpos (di.data, chr(9))));
select * from DE13MA.GABN_LOG;
root@kvmubuntu:~# cat Sql-Gabn_LOG_REPORTS3.sql
create table DE13MA.GABN_LOG_REPORT as (SELECT
		region, 
		browser--, 
		--cnt
	FROM (select
		t1.* , 
		ROW_NUMBER() OVER (PARTITION BY region ORDER BY cnt DESC) as numb
	FROM (select 
			cast (split_part (di.data, chr(9), 2) as VARCHAR(30)) REGION, 
			cast (split_part (substring (replace (substring (dl.data, strpos(dl.data, 'http://')), chr(9), '+'), 1, strpos (replace (substring (dl.data, strpos (dl.data, 'http://')), chr(9), '|'), '/5.0') -1), '+', 4) as VARCHAR(10)) BROWSER,
			count(1) as cnt
		from de.log as dl
		--order by dl.data
		left join de.ip as di
		--on dl.data=di.data;
		on 
			substring (dl.data, 1, strpos (dl.data, chr(9))) =
				substring (di.data, 1, strpos (di.data, chr(9)))	
		--order by region
		group by region, browser) 
		as t1)
	as t2
	WHERE numb = 1);
select * from DE13MA.GABN_LOG_REPORT;
Task:
Создайте структуру базы данных по одной из предложенных тематик.
К базе данных предъявляются следующие требования:
1. должно быть не менее 4 сущностей (включая технические объекты);
2. должна быть хотя бы одна связь один-ко-многим
3. должна быть хотя бы одна связь многие-ко-многим;
4. все отношения приведены к 3НФ.
Предметная область:
1. Продажа автомобилей.
2. Приют для животных.
3. Железнодорожные перевозки.
4. Служба доставки.
5. Организация марафона.
Требования к оформлению:
ER-диаграмму необходимо составлять на app.dbdesigner.net, на проверку нужно присылать ссылку на диаграмму. Также необходимо сделать таблицу в Google Sheets с примерами данных в таблицах.
Возьмите в работу ER-диаграмму, разработанную вами. Разработайте DDL для нее. Создайте файл Sql-Ddl2.sql, в котором должно быть:
1. DDL создания всех таблиц, с правильным указанием имен, типов и ограничений целостности.
2. Для каждой таблицы приведите 2-3 команды INSERT для наполнения данных. Обращайте внимание на типизацию вставляемых данны
# Написание Sql запросов.
Decision:
root@kvmubuntu:~# cat Sql-Ddl2.sql
CREATE TABLE de13ma.gabn_dz2_brands (
id_brand SERIAL PRIMARY KEY,
title VARCHAR (255)
);
INSERT INTO de13ma.gabn_dz2_brands (title) VALUES 
('Nissan'),
('Chevrolet'),
('Datsun'),
('Hyundai'),
('Lada');
CREATE TABLE de13ma.gabn_dz2_transmittion_box (
id_box SERIAL PRIMARY KEY,
title VARCHAR (255)
);
INSERT INTO de13ma.gabn_dz2_transmittion_box (title) VALUES 
('Автомат'),
('Механика'),
('Вариатор');
CREATE TABLE de13ma.gabn_dz2_country_partner (
id_country SERIAL PRIMARY KEY,
title VARCHAR (255)
);
INSERT INTO de13ma.gabn_dz2_country_partner (title) VALUES 
('Russia'),
('Japane'),
('USA'),
('South Korea');
CREATE TABLE de13ma.gabn_dz2_clients (
id_client SERIAL PRIMARY KEY,
fio VARCHAR (255),
phone VARCHAR (255),
city VARCHAR (255)
);
INSERT INTO de13ma.gabn_dz2_clients 
(fio, phone, city) 
VALUES 
('David', '88886666000', 'Kutaisi'),
('Angelina', '88880000665', 'Irkutsk'),
('Leonid', '88886666111', 'Irkutsk');
CREATE TABLE de13ma.gabn_dz2_cars (
id_car SERIAL PRIMARY KEY,
id_brand INT REFERENCES de13ma.gabn_dz2_brands(id_brand),
model VARCHAR (255),
price NUMERIC,
releases TIMESTAMP,
id_box INT REFERENCES de13ma.gabn_dz2_transmittion_box(id_box),
id_country INT REFERENCES de13ma.gabn_dz2_country_partner(id_country)
);
INSERT INTO de13ma.gabn_dz2_cars (id_brand, model, price, releases, id_box, id_country) VALUES 
(1, 'Windgroad', 250000, '2006-09-12 12:12:12', 1, 2),
(2, 'Aveo', 450000, '2013-09-12 12:12:12', 3, 3),
(3, 'On-do', 300000, '2015-09-12 12:12:12', 2, 2),
(4, 'Solaris1', 750000, '2017-09-12 12:12:12', 1, 4),
(4, 'Solaris2', 900000, '2020-09-12 12:12:12', 1, 4),
(5, 'Vesta', 850000, '2021-09-12 12:12:12', 3, 1);
CREATE TABLE de13ma.gabn_dz2_sale (
id_sale SERIAL PRIMARY KEY,
id_car INT REFERENCES de13ma.gabn_dz2_cars(id_car),
id_client INT REFERENCES de13ma.gabn_dz2_clients(id_client),
dates TIMESTAMP
);
INSERT INTO de13ma.gabn_dz2_sale (id_car, id_client, dates) VALUES 
(1, 1, '2006-09-12 12:12:12'),
(2, 2, '2014-09-12 12:12:12'),
(3, 1, '2015-09-12 12:12:12'),
(4, 2, '2017-09-12 12:12:12'),
(5, 3, '2020-09-12 12:12:12'),
(6, 1, '2021-09-12 12:12:12');
SELECT * from de13ma.gabn_dz2_sale;
Task:
Выборка данных.
# Написание Sql запросов.
Decision:
starter=# SELECT * FROM travelers LIMIT 25;
starter=# SELECT surname FROM travelers OFFSET 15;
starter=# SELECT name, email FROM travelers FETCH FIRST 20 ROW ONLY;
starter=# SELECT name, surname FROM travelers ORDER BY name ASC;
starter=# SELECT name, email FROM travelers WHERE gender = 'Female';
starter=# SELECT * FROM travelers WHERE name IN ('Mark', 'Trisha', 'Raymond');
starter=# SELECT country, email FROM travelers WHERE name BETWEEN 'A' AND 'S';
starter=# SELECT email, surname FROM travelers WHERE email LIKE '%.net';
Task:
Базовая арифметика.
# Написание Sql запросов.
Decision:
starter=# SELECT min(price) FROM booking_n WHERE name LIKE '%sia';
starter=# SELECT max(price) FROM booking_n WHERE surname BETWEEN 'S' AND 'X';
starter=# SELECT avg(price) from booking_n;
starter=# SELECT sum(price) FROM booking_n;
Task:
Дата и время.
# Написание Sql запросов.
Decision:
starter=# SELECT * FROM NOW();
starter=# SELECT EXTRACT (SECOND FROM NOW());
Task:
Первичный ключ.
# Написание Sql запросов.
Decision:
starter=# ALTER TABLE travelers ADD login VARCHAR(25);
starter=# ALTER TABLE travelers DROP login;
Task:
Ограничения.
# Написание Sql запросов.
Decision:
starter=# ALTER TABLE travelers ADD CONSTRAINT id_unique UNIQUE(id);
starter=# ALTER TABLE travelers ADD CONSTRAINT gender_check CHECK(gender = 'Female' OR gender = 'Male');
Task:
UPSERT и обновление таблиц.
# Написание Sql запросов.
Decision:
starter=# UPDATE booking_n SET name  = 'Max' WHERE id = 1;
starter=# UPDATE booking_n SET departure_from  = 'Russia', arriving_to = 'Kazakhstan' WHERE id = 1;
starter=# INSERT INTO booking_n (id,name,surname,departure_from,arriving_to,price) VALUES (1,'John','Doe','USA','UK','$200') ON CONFLICT (id) DO NOTHING;
starter=# INSERT INTO booking_n (id,name,surname,departure_from,arriving_to,price) VALUES (1,'John','Doe','USA','UK','$200') ON CONFLICT (id) DO UPDATE SET departure_from = 'EXCLUDED.departure_from;
Task:
Внешние ключи.
# Написание Sql запросов.
Decision:
starter=# ALTER TABLE booking_n ADD new_booking_id BIGSERIAL REFERENCES booking(id);
Task:
соединение таблиц
Таблица "Прайс-лист":
Товар |	Цена
Стол красный | 5000
Стол синий | 6000
Стул черный | 1500
Кресло зеленое | 4500
Кресло оранжевое | 6500
Остатки номенклатуры:
Товар | Количество
Кресло оранжевое | 15
Стул черный | 20
Стул коричневый | 1
Итоговая таблица:	
Товар	Количество | Цена
# Написание Sql запросов.
Decision:
starter=# SELECT * FROM travelers LEFT JOIN booking_n ON travelers.id = booking_n.id;
Товар | Количество | Цена	
Стол красный |  | 5000	
Стол синий |  | 6000	
Стул черный | 20 | 1500	
Кресло зеленое | 4500	
Кресло оранжевое | 15 | 6500	
starter=# SELECT * FROM travelers RIGHT JOIN booking_n ON travelers.id = booking_n.id;
Товар | Количество | Цена	
Кресло оранжевое | 15 | 6500	
Стул черный | 20 | 1500	
Стул коричневый | 1 | 	
Внутреннее:
Товар | Количество | Цена	
Стул черный | 20 | 1500	
Кресло оранжевое | 15 | 6500	
starter=# SELECT * FROM travelers FULL JOIN booking_n ON travelers.id = booking_n.id;		
Стул черный | 20 | 1500	
Кресло оранжевое | 15 | 6500	
Стол красный |  | 5000	
Стол синий |  | 6000	
Кресло зеленое |  | 4500	
Стул коричневый | 1 | 	
starter=# SELECT * FROM travelers CROSS JOIN booking_n ON travelers.id = booking_n.id;
Товар Л | Цена | Товар П | Количество
Стол красный | 5000 | Кресло оранжевое | 15
Стол красный | 5000 | Стул черный | 20
Стол красный | 5000 | Стул коричневый | 1
Стол синий | 6000 | Кресло оранжевое | 15
Стол синий | 6000 | Стул черный | 20
Стол синий | 6000 | Стул коричневый | 1
Стул черный | 1500 | Кресло оранжевое | 15
Стул черный | 1500 | Стул черный | 20
Стул черный | 1500 | Стул коричневый | 1
Кресло зеленое | 4500 | Кресло оранжевое | 15
Кресло зеленое | 4500 | Стул черный | 20
Кресло зеленое | 4500 | Стул коричневый | 1
Кресло оранжевое | 6500 | Кресло оранжевое | 15
Кресло оранжевое | 6500 | Стул черный | 20
Кресло оранжевое | 6500 |	Стул коричневый | 1
Task:
Экспорт в CSV.
# Написание Sql запросов.
Decision:
starter=# SELECT * FROM travelers WHERE id < 50;
starter=# \copy (SELECT * FROM travelers WHERE id < 50) TO 'C:\Users\david\Documents\EngineerOfThe2ndCategory\Sberbank\Basics of the PostgreSQL language'  DELIMITER ','  CSV HEADER;
starter=# \copy (SELECT * FROM travelers WHERE id < 50) TO 'C:/Users/david/Documents/EngineerOfThe2ndCategory/Sberbank/Basics of the PostgreSQL language/sample.csv'  DELIMITER ','  CSV HEADER;
Task:
Строковые функции.
# Написание Sql запросов.
Decision:
select UPPER('Vasya') up_name, LOWER('Vasya') lo_name,
      '!'||'    Vasya     '||'!' no_trim,
      '!'||TRIM('    Vasya     ')||'!' tr_name, 
      '!'||LTRIM('    Vasya     ')||'!' ltr, 
      '!'||RTRIM('    Vasya     ')||'!' rtr,
      'Vasya'||' '||'Petrov' name
select substr('123456',2) sub_1,
      substr('123456',2,3) sub_2,
      substr('123456',-2) sub_3,
      substr('123456',4,-2) sub_4
select replace('HeLLo worlld','ll','!!') rep, length('123456') len
Task:
База данных "Курьерская служба".
There is a company delivering orders - a Courier Service.
The order table contains information about the order that the courier will deliver.
FIO –recipient's full name;
address – delivery address;
courier – code of the employee who delivered the shipment, null by default;
price –delivery cost;
The order tracking trace table contains the history of various order statuses.
state – order status code: 1 – new; 2– accepted at the warehouse; 3– delivered; 4–not delivered
datetime– date and time of the status;
The courier table contains information about employees (couriers and managers).
FIO – Full name of the courier
manager – the courier contains the manager code, null by default
# Написание Sql запросов.
Decision:
# sudo -i -u postgres
[postgres@i6 ~]$ psql
postgres=# CREATE DATABASE CourierService;
CREATE DATABASE
postgres=# \c courierservice
Вы подключены к базе данных "courierservice" как пользователь "postgres".
courierservice=# CREATE TABLE employees (
id SERIAL PRIMARY KEY,
manager_id INT REFERENCES employees(id),
full_name VARCHAR,
address VARCHAR,
phone VARCHAR,
hired_at TIMESTAMP,
fired_at TIMESTAMP
);
CREATE TABLE
courierservice=# CREATE TABLE order_states (
id SERIAL PRIMARY KEY,
state VARCHAR
);
CREATE TABLE
courierservice=# CREATE TABLE orders (
id SERIAL PRIMARY KEY,
customer VARCHAR,
address VARCHAR,
courier_id INT REFERENCES employees(id),
price NUMERIC
);
CREATE TABLE
courierservice=# CREATE TABLE trace (
id BIGSERIAL PRIMARY KEY,
state_id INT REFERENCES order_states(id),
order_id INT REFERENCES orders(id),
updated_at TIMESTAMP
);
CREATE TABLE
courierservice=# INSERT INTO employees (manager_id, full_name, address, phone, hired_at, fired_at)
VALUES ('1', 'Иванов Иван Иванович', 'Невский проспект, 11', '+790865454', '2022-05-04 12:10:57', '2022-05-006 13:10:57'),
('2', 'Иванова Анна Ивановна', 'Набережная реки Мойки, 48', '+790865454', '2022-05-04 12:10:57', '2022-05-006 13:10:57');
INSERT 0 2
courierservice=# SELECT * FROM employees;
id | manager_id |   full_name   |     address     | phone  |   hired_at   |   fired_at  
----+------------+-----------------------+---------------------------+------------+---------------------+---------------------
1 |     1 | Иванов Иван Иванович | Невский проспект, 11   | +790865454 | 2022-05-04 12:10:57 | 2022-05-06 13:10:57
2 |     2 | Иванова Анна Ивановна | Набережная реки Мойки, 48 | +790865454 | 2022-05-04 12:10:57 | 2022-05-06 13:10:57
(2 строки)
courierservice=# INSERT INTO order_states (state)
VALUES ('новый'),
('в доставке'),
('доставлен'),
('отменен');
INSERT 0 4
courierservice=# SELECT * FROM order_states;
id | state  
----+------------
1 | новый
2 | в доставке
3 | доставлен
4 | отменен
(4 строки)
courierservice=# INSERT INTO orders (customer, address, courier_id, price)
VALUES ('Иванов Алесандр Иванович', 'Баумана, 121', '2', '150'),
('Иванов Андрей Иванович', 'Ленина, 122', '2', '200'),
('Иванов Михаил Иванович', 'Ленина, 122', '1', '150');
INSERT 0 3
courierservice=# SELECT * FROM orders;
id |     customer     | address  | courier_id | price
----+--------------------------+--------------+------------+-------
1 | Иванов Алесандр Иванович | Баумана, 121 |     2 | 150
2 | Иванов Андрей Иванович | Ленина, 122 |     2 | 200
3 | Иванов Михаил Иванович | Ленина, 122 |     1 | 150
(3 строки)
courierservice=# INSERT INTO trace (state_id, order_id, updated_at)
VALUES ('4', '3', '2022-06-06 13:20:57'),
('2', '2', '2022-07-07 13:20:58'),
('3', '1', '2022-05-05 14:02:07');
INSERT 0 3
courierservice=# INSERT INTO trace (state_id, order_id, updated_at)
VALUES ('4', '3', '2022-06-06 13:20:57'),
('4', '3', '2022-07-05 13:25:28'),
('1', '3', '2022-06-05 14:01:07');
INSERT 0 3
courierservice=# SELECT * FROM trace;
id | state_id | order_id |   updated_at  
----+----------+----------+---------------------
1 |    4 |    3 | 2022-06-06 13:20:57
2 |    2 |    2 | 2022-07-07 13:20:58
3 |    3 |    1 | 2022-05-05 14:02:07
4 |    4 |    3 | 2022-06-06 13:20:57
5 |    4 |    3 | 2022-07-05 13:25:28
6 |    1 |    3 | 2022-06-05 14:01:07
(6 строк)
Task:
Выведите все доставленные заказы, которые не были приняты на склад.
# Написание Sql запросов.
Decision:
courierservice=# SELECT * FROM order_states;
id | state  
----+------------
1 | новый
2 | в доставке
3 | доставлен
4 | отменен
(4 строки)
courierservice=# SELECT * FROM orders;
id |     customer     | address  | courier_id | price
----+--------------------------+--------------+------------+-------
1 | Иванов Алесандр Иванович | Баумана, 121 |     2 | 150
2 | Иванов Андрей Иванович | Ленина, 122 |     2 | 200
3 | Иванов Михаил Иванович | Ленина, 122 |     1 | 150
(3 строки)
courierservice=# SELECT * FROM trace;
id | state_id | order_id |   updated_at  
----+----------+----------+---------------------
1 |    4 |    3 | 2022-06-06 13:20:57
2 |    2 |    2 | 2022-07-07 13:20:58
3 |    3 |    1 | 2022-05-05 14:02:07
(3 строки)
courierservice=# SELECT orders.*
FROM orders
JOIN trace t ON t.order_id=orders.id AND t.state_id=3
LEFT JOIN trace t2 ON t2.order_id=orders.id AND t2.state_id=2
WHERE t2.id IS NULL;
id |     customer     | address  | courier_id | price
----+--------------------------+--------------+------------+-------
1 | Иванов Алесандр Иванович | Баумана, 121 |     2 | 150
(1 строка)
Task:
Выведите курьеров доставивших больше заказов, чем их менеджеры.
# Написание Sql запросов.
Decision:
courierservice=# SELECT * FROM employees;
id | manager_id |   full_name   |     address     | phone  |   hired_at   |   fired_at  
----+------------+-----------------------+---------------------------+------------+---------------------+---------------------
1 |     1 | Иванов Иван Иванович | Невский проспект, 11   | +790865454 | 2022-05-04 12:10:57 | 2022-05-06 13:10:57
2 |     2 | Иванова Анна Ивановна | Набережная реки Мойки, 48 | +790865454 | 2022-05-04 12:10:57 | 2022-05-06 13:10:57
(2 строки)
courierservice=# SELECT * FROM orders;
id |     customer     | address  | courier_id | price
----+--------------------------+--------------+------------+-------
1 | Иванов Алесандр Иванович | Баумана, 121 |     2 | 150
2 | Иванов Андрей Иванович | Ленина, 122 |     2 | 200
3 | Иванов Михаил Иванович | Ленина, 122 |     1 | 150
(3 строки)
courierservice=# SELECT * FROM trace;
id | state_id | order_id |   updated_at  
----+----------+----------+---------------------
1 |    4 |    3 | 2022-06-06 13:20:57
2 |    2 |    2 | 2022-07-07 13:20:58
3 |    3 |    1 | 2022-05-05 14:02:07
(3 строки)
courierservice=# SELECT k.*
FROM employees k
WHERE k.manager_id
IS NOT NULL AND
(SELECT COUNT(*)
  FROM orders
  WHERE courier_id=k.id) >
(SELECT COUNT(*)
  FROM orders
  WHERE courier_id=k.manager_id);
Task:
Выведите менеджеров и стоимость всех доставленных их курьерами заказов, за последний месяц.
# Написание Sql запросов.
Decision:
courierservice=# SELECT * FROM trace;
id | state_id | order_id |   updated_at  
----+----------+----------+---------------------
1 |    4 |    3 | 2022-06-06 13:20:57
2 |    2 |    2 | 2022-07-07 13:20:58
3 |    3 |    1 | 2022-05-05 14:02:07
(3 строки)
courierservice=# SELECT * FROM orders;
id |     customer     | address  | courier_id | price
----+--------------------------+--------------+------------+-------
1 | Иванов Алесандр Иванович | Баумана, 121 |     2 | 150
2 | Иванов Андрей Иванович | Ленина, 122 |     2 | 200
3 | Иванов Михаил Иванович | Ленина, 122 |     1 | 150
(3 строки)
courierservice=# SELECT * FROM employees;
id | manager_id |   full_name   |     address     | phone  |   hired_at   |   fired_at  
----+------------+-----------------------+---------------------------+------------+---------------------+---------------------
1 |     1 | Иванов Иван Иванович | Невский проспект, 11   | +790865454 | 2022-05-04 12:10:57 | 2022-05-06 13:10:57
2 |     2 | Иванова Анна Ивановна | Набережная реки Мойки, 48 | +790865454 | 2022-05-04 12:10:57 | 2022-05-06 13:10:57
(2 строки)
courierservice=# SELECT k2.*, SUM(o.price) AS price
FROM trace t
JOIN orders o ON o.id=t.order_id
JOIN employees k ON k.id=o.courier_id
JOIN employees k2 ON k2.id=k.manager_id
WHERE t.state_id = 3 AND
  t.updated_at>date_sub(current_date(), INTERVAL 1 MONTH)
GROUP BY k2.id;
Task:
Выведите менеджеров, у которых не более трех курьеров.
# Написание Sql запросов.
Decision:
courierservice=# SELECT k.*, COUNT(k2.id)
FROM employees k
LEFT JOIN employees k2 ON k2.manager_id = k.id
WHERE k.manager_id IS NULL
GROUP BY k.id
HAVING COUNT(k2.id) < 4;
Task:
Выведите заказы и последний установленный у него статус. Оставить в отчете только статусы: новый и принят на склад.
# Написание Sql запросов.
Decision:
courierservice=# SELECT * FROM orders;
id |     customer     | address  | courier_id | price
----+--------------------------+--------------+------------+-------
1 | Иванов Алесандр Иванович | Баумана, 121 |     2 | 150
2 | Иванов Андрей Иванович | Ленина, 122 |     2 | 200
3 | Иванов Михаил Иванович | Ленина, 122 |     1 | 150
(3 строки)
courierservice=# SELECT * FROM trace;
id | state_id | order_id |   updated_at  
----+----------+----------+---------------------
1 |    4 |    3 | 2022-06-06 13:20:57
2 |    2 |    2 | 2022-07-07 13:20:58
3 |    3 |    1 | 2022-05-05 14:02:07
(3 строки)
courierservice=# SELECT o.*,
  (SELECT state_id
  FROM trace WHERE order_id=o.id
  ORDER BY updated_at DESC LIMIT 1) AS status
FROM orders o
HAVING status IN (1, 2);
Source:
# https://www.asozykin.ru/?ysclid=lk9eaatbqj18673257
Task:
links   | email   | login | password - Keys
http://fds | fgd@fgd.ru | admin | fgdfgdf   - Values
# Разработка Хранилище паролей.
Decision:
tuser@kvmubuntu:~$ cat PasswordStorage.py
repeat="y"
while repeat == "y":
keys=['links', 'mails', 'logins', 'passwords']
print(keys)
#print(keys[1])
values=[]
#print(values)
link, email, login, password= input("Enter the link: "), input("Enter email: "), input("Enter login: "), input("Enter password: ")
values.append(link)
values.append(email)
values.append(login)
values.append(password)
print(values)
#print(values[2])
row={}
for i in range(len(keys)):
#print(keys[i])
#row[keys[i]] = None
row[keys[i]] = values[i]
print(row)
createfile = input("Create new file? (y/n): ")
if createfile == "y":
namefile = input("Name the file where the passwords will be stored: ")
with open(namefile,'w') as file:
#file.write(str(row))
for key, value in row.items():
#print("Key: " + key)
keyRow="| "+str(key)+" |"
file.write(keyRow)
file.write("\n")
for key, value in row.items():
valueRow="| "+str(value)+" |"
file.write(valueRow)
file.close()
elif createfile == "n":
namefile = input("Write the name of the file in which you want to make changes: ")
with open(namefile,'a') as file:
file.write("\n")
for key, value in row.items():
valueRow="| "+str(value)+" |"
file.write(valueRow)
file.write("\n")
file.close()
repeat = input("Do you want to continue? (y/n): ")
if repeat == "n":
break
while (repeat!="y" and repeat!="n"):
repeat = input("Please enter the correct answer (y/n): ")
tuser@kvmubuntu:~$ python PasswordStorage.py
['links', 'mails', 'logins', 'passwords']
Enter the link: 1
Enter email: 2
Enter login: 3
Enter password: 4
['1', '2', '3', '4']
{'links': '1', 'mails': '2', 'logins': '3', 'passwords': '4'}
Create new file? (y/n): y
Name the file where the passwords will be stored: testfile
Do you want to continue? (y/n): 1213wa
Please enter the correct answer (y/n): y
['links', 'mails', 'logins', 'passwords']
Enter the link: 11
Enter email: 22
Enter login: 33
Enter password: 4444444
['11', '22', '33', '4444444']
{'links': '11', 'mails': '22', 'logins': '33', 'passwords': '4444444'}
Create new file? (y/n): n
Write the name of the file in which you want to make changes: testfile
Do you want to continue? (y/n): n
tuser@kvmubuntu:~$ cat testfile
| links || mails || logins || passwords |
| 1 || 2 || 3 || 4 |
| 11 || 22 || 33 || 4444444 |
Task:
выполнить подключение к удаленной БД с помощью инструмента администрирования
# Администрирование баз данных.
Decision:
tuser@kvmubuntu:~$ mysql -host=ubuntu-VirtualBox
Task:
База данных "Практическое пособие разработчика 1c".
В качестве конфигурации для разработки использовать базу, полученную в результате решения тестового примера по книге Радченко М.Г.
Необходимо доработать конфигурацию так, чтобы обеспечить расчет вознаграждения мастеру за оказанные им услуги при проведении документа «Оказание услуг». Вознаграждение высчитывается как процент от общей суммы, предоставленных по данному документу услуг (без учёта проданных товаров) и составляет:
5%  сумма меньше 1 000 руб.
10%  сумма от 1 000 до 5 000 руб.
15%  сумма больше 5 000 руб.
Требуется разработать структуру данных для хранения накопленного вознаграждения.
Разработать отчет, позволяющий получить общие суммы вознаграждений по каждому мастеру за произвольно выбранный период.
Пример отчета:
Период: 01.01.2013 – 15.05.2013
Мастер  Сумма
Иванов Иван  1000
Петров Пётр  1500
Анализ производительности:
Добавим в диалог кнопку, которую программа будет для каждой строки документа получать из справочника цену товара, подставлять ее в строку и пересчитывать сумму. Добавим неовую комаанду Сделать с флажком Изменяет сохраняемые данные.
# Администрирование баз данных.
Decision:
  конфигруатор-документы-поступление товаров-формаДокументов-командная панель-команды-добавить-имя:сделать-флажок:изменяет сохраненные данные-перетаскиваем в командную панель команду-действие-добавить-
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
  Стр=Элементы.Товары.ТекущиеДанные;
  РасчетСтроки(Стр);
  //Стр=Элементы.Товары.ТекущиеДанные;
  //ПроцедурыДокументов.РассчетСтроки(Стр);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
  Стр=Элементы.Товары.ТекущиеДанные;
  РасчетСтроки(Стр);
  //Стр=Элементы.Товары.Стр;
  //ПроцедурыДокументов.РассчетСтроки(Стр);
КонецПроцедуры
&НаКлиенте
Процедура РасчетСтроки(ТекСтр)
  ТекСтр.Сумма=ТекСтр.Цена*ТекСтр.Количество;
КонецПроцедуры
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
  Стр=Элементы.Товары.ТекущиеДанные;
  Если Стр.Количество = 0 Тогда
    Сообщить("Ошибка");
  Иначе
    Стр.Цена=Стр.Сумма/Стр.Количество;
  КонецЕсли
КонецПроцедуры
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
  Стр=Элементы.Товары.ТекущиеДанные;
  Стр.Цена=ПолучитьЦену(Стр.Номенклатура);
  РасчетСтроки(Стр);
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПолучитьЦену(Товар)
  //Возврат Товар.Цена;  //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
  // Данный фрагмент построен конструктором.
  // При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!    
  Запрос = Новый Запрос;
  Запрос.Текст =
    "ВЫБРАТЬ
    |  Номенклатура.Цена
    |ИЗ
    |  Справочник.Номенклатура КАК Номенклатура
    |ГДЕ
    |  Номенклатура.Ссылка = &Ссылка";      
  Запрос.УстановитьПараметр("Ссылка", Товар);      
  РезультатЗапроса = Запрос.Выполнить();        
  ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();    
  Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    // Вставить обработку выборки ВыборкаДетальныеЗаписи
  КонецЦикла;                        
  //}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецФункции
&НаКлиенте
Процедура Сделать(Команда)
  Для каждого Стр Из Объект.Товары Цикл
    Стр.Цена=ПолучитьЦену(Стр.Номенклатура);
    РасчетСтроки(Стр);
  КонецЦикла;
КонецПроцедуры
Task:
Точка останова
понять, как работает механзим получения цены и номенклатуры из справочника (в форме документы, форма докмента)
# Администрирование баз данных.
Decision:
установить точку останова на интересующую строку содержимого этой процедуры. В нашем случае, поставим точку в первой строке (Стр=Элементы.Товары.ТекущиеДанные;) процедуры:
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
  Стр=Элементы.Товары.ТекущиеДанные;
  Стр.Цена=ПолучитьЦену(Стр.Номенклатура);
  РасчетСтроки(Стр);
КонецПроцедуры
запускаем в обычном пользовательском режиме - пробуем создать новую номенклатуру в поступлении товаров - увидим что в конфигураторе появится стреллочка - можем перемещаться по коду нажимая f11 или shift+f10
Task:
Сервис при программировании. Шаблоны текста
Включить шаблоны
# Администрирование баз данных.
Decision:
Меню:Конфигуратор-Сервис-Параметры
Task:
Увидеть шаблоны
# Администрирование баз данных.
Decision:
Меню-сервис-Шаблоны текста
Task:
Выбрать шаблоны
# Администрирование баз данных.
Decision:
Действия-настройка шаблонов
Task:
Создание ролей и описание прав пользоавтелей
# Администрирование баз данных.
Decision:
справочник номенклатура - создадим новый элемент справочника - в документе выбрать этот товар в табличную часть - запишем документ (т.е. купим товар) - вернемся в справочник номенклатура - удалим его совсем - В результате будет битая ссылка. Это не правильно.
  пометить на удаление товар - главное меню - все функции - стандартные - удаление помеченных объектов
Task:
Создадим в нашей конфигурации роль для себя - "полные права"
# Администрирование баз данных.
Decision:
  Конфигурация-общие-роли-Имя:ПолныеПрава-добавить-права:отметить все элементы-действия:установить все права-
Task:
Мы ведь собираемся создавать новые объекты, и у старых появятся со временем новые реквизиты и табличные частицы поэтому еще добавим
# Администрирование баз данных.
Decision:
  -флажок:устанавливать права для новых объектов-флажок:Устанавливать права для реквизитов и табличчных частей по умолчанию-
Task:
Для роли ПОЛНЫЕ ПРАВА, чтобы пользователь не смог удалять элемент справочника из базы без проверки ссылочной целстности базы.
# Администрирование баз данных.
Decision:
  -справочники,документы-снять флажок-интерактивное удаление-меню-конфигурация-обновить конфигурацию БД
Task:
Добавим нового пользователя
# Администрирование баз данных.
Decision:
  меню-администрирование-пользователи-добавить-Имя:Администратор-прочие-флажок:полные права
Теперь можно выйти и войти под учеткой. И удалить новый товар не получится, такая функция просто исчезнет с меню "Еще"
Task:
Активные пользователи
посмотреть работающих сейчас пользователей БД
# Администрирование баз данных.
Decision:
  меню-администрирование-активные пользователи.
Попросить их выйти из БД можно, воспользовавшись механизмом конфигурации или службой администирования серверов, которая инсталируется в каталог программных файлов (1СV7 servers.msc) и позваляет отключать соединения с БД.
Task:
Журнал регистрации
Настроим конфигуратор так, чтобы журнал велся, регистрировать некие события в нем
# Администрирование баз данных.
Decision:
  меню-администрирование-настройка журнала регистрации-флажок:регистрировать ошибки, предупреждения, информацию, примечания
Task:
События пользователя
# Администрирование баз данных.
Decision:
  меню-администрирование-журнал регистрации
Task:
Выгрузка и загрузка БД
Выгрузить из конфигурации. В момент выгрузки в БД не должны работать пользователи.
# Администрирование баз данных.
Decision:
  меню-администрирование-выгрузить БД-расширение .dt
Task:
Загрузить в конфигурацию
# Администрирование баз данных.
Decision:
меню-администрирование-загрузить БД-расширение .dt
Task:
Конфигурация БД
в базе сидит огромное предприятие, все работают и одному пользователю повезло залезть туда, где вы допустили ошибку. одному ему она мешает, а остальные даже о ней не догадываются. Чтобы всех с БД не выгонять, нужно:
# Администрирование баз данных.
Decision:
  исправить ошибку - обновить динамически- и одного попросить выйти из программы - заново войти
Task:
Тестирование и исправление БД
Когда мы удалили элементы, осталась битая ссылка. Нужно это исправлять. Когда нет пользователей в БД можно выполнить тестирование и исправление БД.
# Администрирование баз данных.
Decision:
  меню-администрирование-тестирование и исправление-поставим везде флажки-в двух колонках отметим создавать объекты-выполнить
Запустим конфигуратор - посмотрим, что изменилось в элементе, которую мы оставили с битой ссылкой
Task:
Лечение файловой БД
Если после сбоя совсем все плохо и вас даже не пускают в конфигуратор, можно восппользоваться программой проверки физической целостности файла БД называется chdbfl.exe. он позваоляет восстановить БД
# Администрирование баз данных.
Decision:
  указывается расположение БД - исправлять ошибки - выполнить
Task:
Константы
Решили мы продать конфигурацию предприятию, которое торгует услугами. И нет у них складов, и просят они убрать эти склады.
# Администрирование баз данных.
Decision:
Для того чтобы убрать надо убрать из главного окна, убрать из всех документов, из всех отчетов. Проще не убрать, а скрыть по флажку. Этот флажок и бдет храниться в константе.
  конфигурация-добавить константу-УчетПоСкладам-тип:булево-Представление:использовать стандартные команды-конфигурацияобщие-подсистемы-сервис-состав:открыть-флаг:УчетПоСкладам
Task:
Функциональные опции
В примере учет по складам мы можем установить конфигурацию разным предприятиям. Некоторые из них имеют несколько складов, и учет в разрезе складов им обяазательно нужен. Некоторые могу завести этот один склад и во всех документах его выбирать, а во всех отчетах ео видеть, но не хотят. Поэтому нужно предусмотреть режим, при котором с панели навигации должна убраться ссылка открытия справочника "Склады", а из документов поле ввода для выбора склада.
# Администрирование баз данных.
Decision:
  Конфигурация-общие-функциональные опции-добавить-имя:УчетПоСкладам-хранение:указывыаем нашу константу УчетПоСкладам-состав-помечаем флажками там где есть связь со складом
Decision:
В пользовательском интерфейсе вся информация о складах исчезнет
Task:
Создание механизма компоновки данных
Добавим в нашу конфигурацию отчет, который позволит распечать список справочника "номенклатура". Мы хотим напечатать не весь справочник, а с нужной сортировкой.
# Администрирование баз данных.
Decision:
  Конфигурация-отчеты-добавить-имя,синонимы:ПрайсЛист-подсистемы-продажи-основные-открыть схему компоновки данных-добавить набор данных запрос-
  -конструктор запроса-таблицы-справочники-номенклатура > - код >, изготовитель >, наименование >, цена > - ок - поле - флажок "Цена" - поменяем на "Цена продажи"
Task:
Группировка отчета
Нужно описать какие в отчете будут группировки.вывести все строки, которые есть в справочнике
# Администрирование баз данных.
Decision:
  Конфигурация-отчеты-добавить-имя,синонимы:ПрайсЛист-подсистемы-продажи-основные-открыть схему компоновки данных-настройки-новая группировка-ок-
Task:
Если бы нам нужно было бы сгруппировать данные, например, по поставкам НДС и посчитать, например, количество, качество товаров с с каждой ставкой , мы бы вместо пустой добавили группировку "Ставка НДС"
Decision:
  -выбранные поля-код, наименование, цена-другие настройки-флаг:заголово-Прайс лист-
Task:
Свойства пользовательских настроек
B отчете мы разрешим управлять пользователю.
# Администрирование баз данных.
Decision:
-отчет-свойства элемента пользовательских настроек-выбор поля:колонки,быстрый доступ-отбор:быстрый доступ-порядок:быстрый доступ-условное офомление:обычный-группировки-обычный
Task:
Соединение таблиц в запросе
# Написание Sql запросов.
Decision:
  Запрос - простое соединение - конструктор запроса - Справочники - Контрагенты, Организации> - Нименование(Контрагенты),ИНН(Организации))> - ок
ВЫБРАТЬ
  Контрагенты.Наименование КАК Наименование,
  Организации.ИНН КАК ИНН
ИЗ
  Справочник.Контрагенты КАК Контрагенты,
  Справочник.Организации КАК Организации
Decision:
  Запрос - Безусловное соединение - конструктор запроса - Справочники - Контрагенты> БанковскиеСчетаОрганизаций> - Наименование (Контрагенты, БанковскиеСчетаОрганизаций)> - Объединение/Псевдонимы - Имя полей - Контрагент, Банк - ок - выполнить
ВЫБРАТЬ
  БанковскиеСчетаОрганизаций.Наименование КАК Банк,
  Контрагенты.Наименование КАК Контрагент
ИЗ
  Справочник.Контрагенты КАК Контрагенты,
  Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
Task:
Объединение таблиц в запросе
Получить список всех продаж и товаров в хронологиическом порядке
# Написание Sql запросов.
Decision:
  Добавить запрос - Объединение (продажи и товары в хронологии) - конструктор запроса - таблицы и поля - база данных - документы - заказ клиента> - номер, дата, партнер, сумма документа> - объединение/псевдонимы - запрос - добавить - Таблицы и поля - РасходныйОрдерНаТовары> - номер, дата - поля -добавить - 0 - объединение/псевдонимы - запрос2 - 0 - ок
ВЫБРАТЬ
  ЗаказКлиента.Номер КАК Номер,
  ЗаказКлиента.Дата КАК Дата,
  ЗаказКлиента.Партнер КАК Партнер,
  ЗаказКлиента.СуммаДокумента КАК СуммаДокумента
ИЗ
  Документ.ЗаказКлиента КАК ЗаказКлиента
ОБЪЕДИНИТЬ ВСЕ
ВЫБРАТЬ
  РасходныйОрдерНаТовары.Номер,
  РасходныйОрдерНаТовары.Дата,
  0,
  0
ИЗ
  Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
  Конструктор заппроса - порядок - дата> - возрастание - ок
ВЫБРАТЬ
  ЗаказКлиента.Номер КАК Номер,
  ЗаказКлиента.Дата КАК Дата,
  ЗаказКлиента.Партнер КАК Партнер,
  ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
  ЗаказКлиента.Ссылка КАК Ссылка
ИЗ
  Документ.ЗаказКлиента КАК ЗаказКлиента
ОБЪЕДИНИТЬ ВСЕ
ВЫБРАТЬ
  РасходныйОрдерНаТовары.Номер,
  РасходныйОрдерНаТовары.Дата,
  0,
  0,
  РасходныйОрдерНаТовары.Ссылка
ИЗ
  Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
УПОРЯДОЧИТЬ ПО
  Дата
Task:
СКД - Разработка отчетов. Создание отчета - фиксированный макет
Нужно создать отчет остатки товаров, который должен показывать остатки номенклатуры в разрезе в виде таблицы с группировкой по складам
# Администрирование баз данных.
Task:
Сначала выведем на форму элемент, который позволит нам показать результат отчета пользователю
# Администрирование баз данных.
Decision:
  Конфигурация - Отчеты - добавить - ОстаткиТоваров_Вариант1 - Формы - Форма отчета - открыть - добавить реквизит - ТабДок - Выбрать тип - +Табличный документ - перетаскиваем ТабДок из реквизитов в форму - Положение Заголовка - Нет - Команды - добавить - СформироватьОтчет - Представление - Выбрать картинку - СформироватьОтчет - отображение - Картинка и текст - перетаскиваем СформироватьОтчет из реквизитов в командную панель - форма - использование - положение командной панели - авто - ФормаСформироватьОтчет - основные - +КнопкаПоУмолчанию
Task:
Теперь нужно создать макет
# Администрирование баз данных.
Decision:
  Конфигурация - Отчеты - ОстаткиТоваров_Вариант1 - Макеты - Добавить - Остатки - тип макета - табличный документ - Склад, Товар, Количество остаток - Склад, Товар, КоличествоОстаток - свойства - Склад, Товар, КоличествоОстаток - макет - Заполнение - Параметр - Выделим первые три строки и макета с полями Склад, Товар, Количество остаток - Таблица - имена - назначить имя - ШапкаТаблицы - Выделим четвертую строку макета с полями Склад, Товар, КоличествоОстаток - Таблица - имена - назначить имя - СтрокаТаблицы
Task:
Разработать алгоритм, который позволит вывести нам результат в табличный документ и показать его на форме пользователю
# Написание Sql запросов.
Decision:
  Конфигурация - Отчеты - ОстаткиТоваров_Вариант1 - Подсистемы - Продажи - Конфигурация - Отчеты - ОстаткиТоваров_Вариант1 - ФормаОтчета - поле - Сформировать отчет - действия команды - Создать на клиенте и на сервере
&НаКлиенте
Процедура СформироватьОтчет(Команда)
  СформироватьОтчетНаСервере();
КонецПроцедуры
&НаСервере
Процедура СформироватьОтчетНаСервере()
  ОтчетОбъект= РеквизитФормыВЗначение("Отчет");
  ОтчетОбъект.СформироватьОтчет(ТабДок);
КонецПроцедуры
  Конфигурация - Отчеты - ОстаткиТоваров_Вариант1 - Открыть модуль объекта
Процедура СформироватьОтчет(ТабДок) Экспорт
  //1. Прочитать данные из базы
КонецПроцедуры
  Конструктор запроса с обработкой результата - таблицы и поля - РегистрыНакопления - ТоварныеЗапасыОстатки> - Склад, товар, КоличествоОстаток>
Процедура СформироватьОтчет(ТабДок) Экспорт
  ТабДок.Очистить();
  //1. Прочитать данные из базы
  Запрос = Новый Запрос;
  Запрос.Текст =
    "ВЫБРАТЬ
    | ТоварныеЗапасыОстатки.Склад КАК Склад,
    | ТоварныеЗапасыОстатки.Товар КАК Товар,
    | ТоварныеЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
    |ИЗ
    | РегистрНакопления.ТоварныеЗапасы.Остатки КАК ТоварныеЗапасыОстатки";
  РезультатЗапроса = Запрос.Выполнить();
  ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
  Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
  КонецЦикла;
КонецПроцедуры
...
  РезультатЗапроса = Запрос.Выполнить();
  Выборка = РезультатЗапроса.Выбрать();
  //2. Вывод результата в отчет
  Макет = ПолучитьМакет("Остатки");
  Область=Макет.ПолучитьОбласть("ШапкаТаблицы");
  ТабДок.Вывести(Область);
  Пока Выборка.Следующий() Цикл
    Область=Макет.ПолучитьОбласть("СтрокаТаблицы");
    Область.Параметры.Заполнить(Выборка);
    ТабДок.Вывести(Область);
  КонецЦикла;
...
  Выполнить - продажи - остатки товаров вариант1 - сформировать
Task:
Добавить в отчете поля для выбора даты, чтоб на указанную дату рассчитывался остаток
# Написание Sql запросов.
Decision:
  Конфигурация - Отчеты - ОстаткиТоваров_Вариант1 - данные - добавить реквизит - ДатаОстатков - тип - дата - форма отчета - перетаскиваем ДатаОстаков из реквизита в форму - Открыть модуль объекта - конструктор запроса - таблицы и поля - таблицы - параметры вирутальной таблицы - период - &ДатаОстатков - таблицы и поля - поля - ТоварныеЗапасыОстатки Склад - изменить текущий элемент - функции языка запросов - функции - прочие запросы - ПредставлениеССылки
ПРЕДСТАВЛЕНИЕССЫЛКИ(ТоварныеЗапасыОстатки Склад)
  ТоварныеЗапасыОстатки Товар - изменить текущий элемент - функции языка запросов - функции - прочие запросы - ПредставлениеССылки
ПРЕДСТАВЛЕНИЕССЫЛКИ(ТоварныеЗапасыОстатки Товар)
Процедура СформироватьОтчет(ТабДок) Экспорт
  ТабДок.Очистить();
  //1. Прочитать данные из базы
    //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
  // Данный фрагмент построен конструктором.
  // При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
  Запрос = Новый Запрос;
  Запрос.Текст =
    "ВЫБРАТЬ
    | ПРЕДСТАВЛЕНИЕССЫЛКИ(ТоварныеЗапасыОстатки.Склад) КАК Склад,
    | ПРЕДСТАВЛЕНИЕССЫЛКИ(ТоварныеЗапасыОстатки.Товар) КАК Товар,
    | ТоварныеЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
    |ИЗ
    | РегистрНакопления.ТоварныеЗапасы.Остатки(&ДатаОстатков, ) КАК ТоварныеЗапасыОстатки";
  ВыбраннаяДата=?(ЗначениеЗаполнено(ДатаОстатков), КонецДня(ДатаОстатков)+1, '00010101');
  Запрос.УстановитьПараметр("ДатаОстатков", ВыбраннаяДата);
  РезультатЗапроса = Запрос.Выполнить();
  Выборка = РезультатЗапроса.Выбрать();
  //2. Вывод результата в отчет
  Макет = ПолучитьМакет("Остатки");
  Область=Макет.ПолучитьОбласть("ШапкаТаблицы");
  ТабДок.Вывести(Область);
  Пока Выборка.Следующий() Цикл
    Область=Макет.ПолучитьОбласть("СтрокаТаблицы");
    Область.Параметры.Заполнить(Выборка);
    ТабДок.Вывести(Область);
  КонецЦикла;
КонецПроцедуры
  Выполнить - продажи - остатки товаров вариант1 - выбрать дату - сформировать
Task:
Создание отчета - Система компоновки данных (СКД)
Нужно создать отчет, используя СКД, остатки товаров, который должен показывать остатки номенклатуры в разрезе в виде таблицы с группировкой по складам
# Написание Sql запросов.
Decision:
  Конфигурация - Отчеты - добавить - ОстаткиТоваров_Вариант2 - подсистемы - продажи - основные - открыть схему компоновки данных - Добавить набор данных - запрос - конструктор запроса - РегистрыНакопления - ТоварыеЗапасыОстатки> - Склад, товар, КоличествоОстаток>
ВЫБРАТЬ
  ТоварныеЗапасыОстатки.Склад КАК Склад,
  ТоварныеЗапасыОстатки.Товар КАК Товар,
  ТоварныеЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
ИЗ
  РегистрНакопления.ТоварныеЗапасы.Остатки КАК ТоварныеЗапасыОстатки
  Настройки - открыть конструктор запроса - Список - Склад, Товар, КоличествоОстаток> - выполнить - продажи - остатки товаров вариант2
Task:
Пользователю нужно указать период
# Администрирование баз данных.
Decision:
  Еще - Изменить вариант - Параметры - Период - свойства элемента пользовательских настроек - включать в пользовательские настройки - режим редактирования - быстрый доступ
Task:
Консоль отчетов
# Администрирование баз данных.
Decision:
  Конфигуратор - сервис - параметры - запуск 1с - +Толстый клиент - Выполнить - файл - открыть - управляемая консоль отчетов - добавить - схему компоновки данных - конструктор - добавить набор данных запрос - конструктор запросов - товарныеЗапросыОстатки>> - ok - Настройки - открыть конструктор запросов - количествоОстаток>> - ок - выполнить - конструктор - сохранить схему в файл
Task:
Ресурсы (Поля итога)
В отчете "Остатки товаров" нужно наастроит расчет итогов по количеству
# Администрирование баз данных.
Decision:
  Добавить схему компоновки данных - конструктор - добавить набор данных запрос - конструктор запроса - регистрыНакопления - товарныеЗапасыОстатки>>-ок-настройки-количествоОстаток>>- ok - выполнить - конструктор - ресурсы - количествоОстаток> - ок - выполнить
Task:
Поменяем структуру отчета
# Администрирование баз данных.
Decision:
  конструктор - настройки - добавить новую группировку - Склад - детальный записи перетаскимваем в Склад - ок - выполнить
Task:
Разработать отчет, который будет показывать информацию о продажах за период, период будет выбирать пользователь
# Администрирование баз данных.
Decision:
  Добавить схему компоновки данных - конструктор - добавить набор данных запрос - конструктор запроса - регистрыНакопление-ПродажиОбороты>-покупатель, товар, количествоОборот, суммаОборот> - ресурсы - количествоОборот, суммаОборот> - настройки - открыть конструтор запроса - список - КоличествоОборот>> - ок - выполнить - конструктор запроса - сохранить схему - конфигуратор - Отчеты - Создать - ПродажиТоваров_СКД - подсисема Продажи+ - основные - открыть схему компоновки данных - загрузитьсхему из файла - f5 - продажи - Продажи Товаров СКД - сформировать
Task:
Нужно сделать так, чтобы пользователь мог работать с периодом
# Администрирование баз данных.
Decision:
  Отчет - ПродажиТоваров_СКД - Натсройки - Начало приода, конец периода - Свойства элементов пользовательских настроек - Включать пользовательские настройки+ - параметры - добавить - Период - тип - Стандартный период+ - Начало, конец период - ограничение доступности+ - Начало, конец период - вырожение - &Период.ДатаНачала, &Период.ДатаОкончания - Настройки - период - Свойства элементов пользовательских настроек - Включать пользовательские настройки+ -выполнить - продажи - Продажи Товаров СКД - сформировать
Task:
Сложные отчеты: список, таблица, диаграмма
Разработаем отчет, который позволит получить данные оборота по купленным товарам за выбранный пользователем период и узнать количество и сумму купленных товаров в разреезе товаров, складов, организаций и других полей приходной накладной. Создадим отчет "Отчет о закупках" и добавим новый запрос данных.
# Администрирование баз данных.
Decision:
Конфигурация-отчеты-добавить-имя,синоним:ОтчетОЗакупках-подсистемы-закупки-основные-открыть схему компоновки данных-добавить набор данных:запрос-конструктор запроса БД:документы/поступление товаров/товары,Таблицы:поступлениеТоваров-переименовать-ПрихТовары:Номенклатура/количество/сумма/ссылка-
Task:
Отбор и параметры в запросе
Пользователю можно добаться до даты, имея "Ссылку", или, поставив условие "Отбор", или часть отобров можно прописать явно в запросе. Для этого есть есть предложение "ГДЕ" в закладке "Условия". И тогда написанные нами отборы пользователь не сможет отключить.
# Написание Sql запросов.
Decision:
  -условия-прихТовары,ссылка-дата-между-Дата1-Дата2-прихТовары,ссылка-пометкаНаУдаление-флаг-выбрать-НЕ ПрихТовары.Ссылка.ПометкаУдаления-ок-Запрос-
ВЫБРАТЬ
  ПрихТовары.Номенклатура,
  ПрихТовары.Количество,
  ПрихТовары.Сумма,
  ПрихТовары.Ссылка
ИЗ
  Документ.ПоступлениеТоваров.Товары КАК ПрихТовары
ГДЕ
  НЕ ПрихТовары.Ссылка.ПометкаУдаления
  И ПрихТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
  -ок-поля:ссылка-флажок-(переименовать)Документ-
Task:
Ресурсы запроса
Пользователь в отчете наверняка захочет увидет не только все строки всех документов, но и подвести итоги по товару, контрагенту, и другим полям, сколько всего было куплено товаров данного типа. Запрос должен просуммировать поля "количество" и "сумма".
# Администрирование баз данных.
Decision:
  -ресурсы-количество,сумма-количество,рассчитывать по-номенклатура-ок-сумма,рассчитывать по - количеству-ок-
Task:
Параметры компоновки
Воспользуемся механизмом стандартного выбора периода, который позволяет осуществлять выбор из списка со стандартными периодами. Для этого добавим новый параметр "период".
# Администрирование баз данных.
Decision:
  -Параметры-Добавить-Имя:Пеиод-тип:СтандартныйПериод-
Task:
Вариант отчета "список"
Настроим несколько вариантов отчета для нашего пользователя.
# Администрирование баз данных.
Decision:
  -Настройка-Открыть конструктор настроек-список-Номенклатура >, Количество >, Сумма > - Номенклатура > -
Task:
Установим период отчета по умолчанию
# Администрирование баз данных.
Decision:
  -Настройка-параметры-Флажок на период-Дата окончания: этот год-Другие настройки-Заголовок:Ведомость закупок-отчет-свойства элемента пользовательских настроек-Флажок:выбранные поля,отбор,порядок (обычный),условное оформление (обычный),группировка-Параметры-свойства элемента пользовательских настроек-флажок:включать в пользовательские настройки-ок-
Task:
Связанные поля
Получить отчет пользователю о закупках с отбором по одной организации
# Администрирование баз данных.
Decision:
в свойстве отбор - найти там документ (ссылка) - найти орагнанизацию - на нее поставить отбор.
Task:
Но можно это сделать за пользователя, чтобы все поля, которые ему нужны будут, были видны на вернем углу списка доступных полей.
# Администрирование баз данных.
Decision:
  конфигурация-отчетОЗакупках-схема компоновка даных-набор данных-конструктор запроса-таблицы:организация >,контрагент >,Склад >-В наборе данных-поле-переименуем добавленные нами заголовки-флагСклад:Ссылка.Склад,Организация,Контрагент-
Task:
Ограничение поля
Запретим пользователю залезать внутрь документа ссылки, т.е. убрать плюсик слева от поля "Документ", когда пользователь работает с отбором
# Администрирование баз данных.
Decision:
  -Ссылка документ:условие:флаг-
Task:
Кросс-таблица
Теперь когда появились поля Контрагент, организация, склад сделаем отчет типа таблица. Нам нужно изменить только вкладку настройки схемы компоновки данных. Чтобы сэкономить время скопируем наш вариант отчета
# Администрирование баз данных.
Decision:
  -настройки-копируем вариант отчета и переименуем: Шахматка-удаляем группировку номенклатура-добавить новую таблицу-Таблица--Строки-номенклатура-колонки-контрагент-выбранные поля-оставим только сумму-другие настройки-заголовок:Шахматка закупок-отчет-свойства элемента пользовательских настроек-везде поставим галочку кроме группировки, а в режиме редактирования поставим обычный у порядка и условного оформления- в таблице-свойства элемента пользовательских настроек-поставим галочки только в группировки строк и колонок
Task:
Функции языка запросов
Сгруппируем наш отчет о закупках, который мы по умолчанию формируем за 1 год, помесячно
# Администрирование баз данных.
Decision:
Для этого нужно довить в текст запроса поле, которое идентифицирует месяц, к которому принадлежит дата документа.
НАЧАЛАПЕРИОДА- функция, которая, получив от нас дату документа и название периода "месяц", сможет рассчитать дату начала месяца.
  конфигуратор-отчет о закупках-сехма компоновки данных-конструктор запросов-поля-добавить-функция,функция работы с датами, НАЧАЛОПЕРИОДА(Тащим вниз)-(Заместо дата)поле,все поля,прихтовары,ссылка,дата(Тащим вниз)-(Заместо период)функция,функция работы с датами,Месяц(Тащим вниз)-объединения и псевдонимы-назовем:периодМесяц-ок-набор данных-ПериодМесяц-оформление-формат поля-формат-конструктор фоматной строки-дата-формат даты(флаг)-ММММ.гггг-
Также если надо не помесячно указать в отчете, а по квартально, тогда нужно в формате данных указать - к "кв." гггг "г."
Task:
Диаграмма
Управленцам создадим графический вариант отображения данных.
# Администрирование баз данных.
Decision:
  конфигуратор-отчет о закупках-сехма компоновки данных-настройки-Скопироуем вариант с Шахматки и назовем его Диаграмма-Удаляем "таблица" полностью-вместо нее добавляем "Диаграмма"-точки:ПериодМесяц-Серии:номенклатура-диаграмма-свойства элемента пользовательских настроек-флажок:Группировки серий, Группировки точек-ок-другие настройки-Заголовок:диаграмма закупок
Task:
Внешние отчеты
Можно с самого начала разрабатывать отчет не как новую ветку в дереве объектов конфигурации
# Администрирование баз данных.
Decision:
  конфигуратор-файл-новый-внешний отчет-имя:НовыйВнешнийОтчет-файл-сохранить как-1c-Forus-NewExternalReport.erf
Task:
открыть для изменения этот отчет
# Администрирование баз данных.
Decision:
  конфигуратор-файл-открыть-1c-Forus-NewExternalReport.erf
Task:
Программноe выполнение запроса
В модуле формы документа "Поступление товаров" описан механизм получения цены из элементасправочника Номенклатура. Для этого использовалась объектная модель и обращение через точку к реквизиту выбранного элемента справочника номенклатуры.
В функции была одна трока кода и возврат результата:
&НаСервере
Функция ПолучитьЦену(Товар)
  Возврат Товар.Цена;
КонецФункции
Но можно сделать это и запросом, чтобы оптимизировать получение данных. Перепишем функцию так, чтобы она получала данные запросом.
Изменим функцию получитьЦену, удалим строе ее содержимое и напишем алгоритм получения цены с сервра по новому.
# Написание Sql запросов.
Decision:
  пр.кн.мыши-конструторзапроса с обработкой результата-обход результата-таблицы и поля,справочники,номенклатура>цена>-Условия,поля,номенклатура,ссылка-перетаскиваем в правое поле-запрос-
ВЫБРАТЬ
  Номенклатура.Цена
ИЗ
  Справочник.Номенклатура КАК Номенклатура
ГДЕ
  Номенклатура.Ссылка = &Ссылка
  -ок
Decision:
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
  Стр=Элементы.Товары.ТекущиеДанные;
  РасчетСтроки(Стр);
  //Стр=Элементы.Товары.ТекущиеДанные;
  //ПроцедурыДокументов.РассчетСтроки(Стр);
КонецПроцедуры
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
  Стр=Элементы.Товары.ТекущиеДанные;
  РасчетСтроки(Стр);
  //Стр=Элементы.Товары.Стр;
  //ПроцедурыДокументов.РассчетСтроки(Стр);
КонецПроцедуры
&НаКлиенте
Процедура РасчетСтроки(ТекСтр)
  ТекСтр.Сумма=ТекСтр.Цена*ТекСтр.Количество;
КонецПроцедуры
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
  Стр=Элементы.Товары.ТекущиеДанные;
  Если Стр.Количество = 0 Тогда
    Сообщить("Ошибка");
  Иначе
    Стр.Цена=Стр.Сумма/Стр.Количество;
  КонецЕсли
КонецПроцедуры
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
  Стр=Элементы.Товары.ТекущиеДанные;
  Стр.Цена=ПолучитьЦену(Стр.Номенклатура);
  РасчетСтроки(Стр);
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПолучитьЦену(Товар)
  //Возврат Товар.Цена;  //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
  // Данный фрагмент построен конструктором.
  // При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!    
  Запрос = Новый Запрос;
  Запрос.Текст =
    "ВЫБРАТЬ
    |  Номенклатура.Цена
    |ИЗ
    |  Справочник.Номенклатура КАК Номенклатура
    |ГДЕ
    |  Номенклатура.Ссылка = &Ссылка";      
  Запрос.УстановитьПараметр("Ссылка", Ссылка);      
  РезультатЗапроса = Запрос.Выполнить();        
  ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();    
  Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    // Вставить обработку выборки ВыборкаДетальныеЗаписи
  КонецЦикла;                        
  //}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецФункции
Task:
Способы чтения данных из базы
прочитать какую то информацию из базы, например, товары используя метод объект
# Написание Sql запросов.
Decision:
Файл->Внешняя обработка->Имя:СпособыЧтенияДанных->Форма обработки->Команды->Добавить->ОбъектнаяМодель,ТабличнаяМодель->Перетаскиваем команды в командную панель->ОбхектнаяМодель->ДействияКоманды->На клиенте и на сервере
&НаКлиенте
Процедура ОбъектнаяМодель(Команда)
  ОбъектнаяМодельНаСервере();
КонецПроцедуры
&НаСервере
Процедура ОбъектнаяМодельНаСервере()
  Выборка=Справочники.ТоварныеКатегории.Выбрать();
  Пока Выборка.Следующий() Цикл
    Сообщение=Новый СообщениеПользователю;
    Сообщение.Текст=Выборка.Наименование;
    Сообщение.Сообщить();
  КонецЦикла;
КонецПроцедуры
Output:
Объектная модель
  Женская обувь
  Кабели
  Кондиционеры
  Крупы
  Масло
  Мебель
  Мебель (наборы)
  Мебель (сборка)
  Молоко
  Мужская обувь
  Соки
  Спортивная обувь
  Телевизоры
  Хлебобулочные изделия
  Холодильники
  Электротовары
  Объектная модель доступа к данным. Ограничения.(1)
Task:
Если мы хотим поменять номенклатуру
# Написание Sql запросов.
Decision:
...
Процедура ОбъектнаяМодельНаСервере()
  Выборка=Справочники.ТоварныеКатегории.Выбрать();
  Пока Выборка.Следующий() Цикл
    ТоварОбъект=Выборка.ПолучитьОбъект();
    ТоварОбъект.Артикул="21414";
    ТоварОбъект.Записать();
    Сообщение=Новый СообщениеПользователю;
    Сообщение.Текст=Выборка.Наименование;
    Сообщение.Сообщить();
  КонецЦикла;
КонецПроцедуры
Task:
Получить данные из двух таблиц
# Написание Sql запросов.
Decision:
...
  Выборка=Справочники.ТоварныеКатегории.Выбрать();
  ВыборкаЦены=РегистрыСведений.ЦеныНоменклатуры.Выбрать();
  Пока Выборка.Следующий() Цикл
...
Task:
Попробуем прочитать из таблицы заказов по одному покупателю
# Написание Sql запросов.
Decision:
    ...
  КонецЦикла;  
  Покупатель=Справочники.Контрагенты.НайтиПоНаименованию("Саймон и Шустер");
  Отбор=Новый Структура("Партнер", Покупатель);
  ВыборкаЗаказы=Документы.ЗаказКлиента.Выбрать(,,Отбор);
КонецПроцедуры
Task:
Вывести информацию с помощью табличной модели
# Написание Sql запросов.
Decision:
  Табличная модель->Выполнить действия->Клиент,Сервер->Конструктор запроса->Таблицы и поля->Справочник->Товарные категории> -> Наименование>
&НаКлиенте
Процедура ТабличнаяМодель(Команда)
  ТабличнаяМодельНаСервере();
КонецПроцедуры
&НаСервере
Процедура ТабличнаяМодельНаСервере()
  //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
  // This fragment was built by the wizard.
  // Warning! All manually made changes will be lost next time you use the wizard.
  Запрос = Новый Запрос;
  Запрос.Текст =
    "ВЫБРАТЬ
    | ТоварныеКатегории.Наименование КАК Наименование
    |ИЗ
    | Справочник.ТоварныеКатегории КАК ТоварныеКатегории";
  РезультатЗапроса = Запрос.Выполнить();
  ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
  Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    // Insert selected data processing ВыборкаДетальныеЗаписи
    Сообщение=Новый СообщениеПользователю;
    Сообщение.Текст=ВыборкаДетальныеЗаписи.Наименование;
    Сообщение.Сообщить();
  КонецЦикла;
  //}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецПроцедуры
Output:
Табличная модель
  Молоко
  Масло
  Крупы
  Хлебобулочные изделия
  Соки
  Женская обувь
  Мужская обувь
  Спортивная обувь
  Кондиционеры
  Кабели
  Мебель (сборка)
  Мебель (наборы)
  Телевизоры
  Холодильники
  Электротовары
  Мебель
Task:
Консоль запросов
# Администрирование баз данных.
Decision:
  1с предприятие->Файл->Открыть->УправляемаяКонсольОтчетов 3.8.9->Текст запроса
ВЫБРАТЬ * ИЗ Справочник.ТоварныеКатегории
  Выполнить
Task:
Конструктор запросов
Из справочника ТоварныеКатегории выбрать все наименования товаров
# Администрирование баз данных.
Decision:
Конструктор->База данных->Справочники->ТоварныеКатегории>->Таблицы->Наименование>->Ок->Выполнить
Простые запросы
Task:
Самый простой запрос: константные значения в запросе
# Написание Sql запросов.
Decision:
ВЫБРАТЬ
5 КАК ПростоеЧисло,
"строка" КАК ПростаяСтрока
Decision:
  Конструктор->Поле->Добавить->5,"строка"->Объединение Псевдонимы->Поле1,Поле2->ПростоеЧисло,ПростаяСтрока->Ок->Выполнить
Output:
  ПростоеЧисло  ПростаяСтрока
  5       строка
Task:
Как прочитать значение константы
# Администрирование баз данных.
Decision:
  Добавить запрос->Запрос к константе->Конструктор->База данных->Константы->ВалютаУпрвленческогоУчета>->Таблицы->Значение>->ок->Выполнить
Decision:
  Значение
  USD
Task:
Как прочитать данные из справочников
# Администрирование баз данных.
Decision:
  Добавить запрос->Запрос к справочнику->Конструктор->База данных->Справочник->Контрагенты>->Наименование, КодПоОКПО,СтранаРегистрации>->ок->Выполнить
Task:
Как прочитать данные из документов
# Администрирование баз данных.
Decision:
  Добавить запрос->Запрос к документу->Конструктор->База данных->Документ->ЗаказКлиента>->Номер, Дата, Партнер, Склад, Валюта, Автор, СуммаДокумента>->ок->Выполнить
Task:
Как прочитать данные из табличных частей
# Администрирование баз данных.
Decision:
Добавить запрос->Запрос к табличной части->Конструктор->База данных->ЗаказКлиентаТовары>->НомерСтроки, Номенклатура, Цена, Количество, Сумма>->ок->Выполнить
Task:
Разыменование полей в запросе
# Администрирование баз данных.
Decision:
Добавить запрос->Запрос к табличной части (разыменование)->Конструктор->База данных->ЗаказКлиентаТовары>->Таблицы->НомерСтроки, Номенклатура, Цена, Количество, Сумма>->Таблицы->Ссылка->Контрагент>->ок->Выполнить
Фильтр в запросе
Task:
Найти контрагента по наименованию
# Администрирование баз данных.
Decision:
Добавить запрос->Условие в запросе->Конструктор->База данных->Контрагенты>->Ссылка, Наименование, КодПоОКПО>->Условие->Поля->Наименование>->ок->Параметры->Значение->Бакалея->Выполнить
Task:
Выбрать из справочника «Товары» только элементы (без групп)
# Администрирование баз данных.
Decision:
Добавить запрос->Товары без групп->Конструктор->База данных->Справочники->ТоварныеКатегории>->Наименование, ЭтоГруппа,Владелец->Условие->Поля->ЭтоГруппа>->ок->Параметры->Значение->Да->Выполнить
Task:
Найти товар по наименованию  по точному соответствию
  по неточному соответствию
# Администрирование баз данных.
Decision:
Добавить запрос->Запрос по наименованию (точное соответствие)->Конструктор->База данных->Справочник>->ТоварныеКатегории->Наименование,Владелец>Условие->Условие->Поля->ТоварныеКатегории->Наименование>->ок->Параметры->Значение->Молоко->Выполнить
Decision:
Добавить запрос->Запрос по наименованию (не точное соответствие)->Конструктор->База данных->Справочник>->ТоварныеКатегории->Наименование,Владелец>Условие->Условие->Поля->ТоварныеКатегории->Наименование>->ТоварныеКатегории.Наименование ПОДОБНО &Наименование->ок->Параметры->Значение->%Мебель%->Выполнить
Task:
Выбрать товар из группы «Электротовары» не включая/включая вложенные группы
# Администрирование баз данных.
Decision:
Добавить запрос->Выбор товаров из группы->Конструктор->База данных->Справочник>->ТоварныеКатегории->Наименование,Владелец>Условие->Условие->Поля->ТоварныеКатегории->Родитель>->ок->Параметры->Значение->Электротовары->Выполнить
Task:
Найти товары, для которых не заполнен реквизит кода
# Администрирование баз данных.
Decision:
Добавить запрос->Поиск товаров без кода->Конструктор запроса->База данных->Справочник>->ТоварныеКатегории->Наименование,код>Условие->Поля->ТоварныеКатегории->код>->ТоварныеКатегории.Владелец.КодОКВЭД = ""->ок->Выполнить
Task:
Найти товары, для которых заполнен реквизит код
# Администрирование баз данных.
Decision:
Копировать запрос->переименовать->Поиск товаров с кодом>Конструктор запроса->Условие->ТоварныеКатегории.Владелец.КодОКВЭД <> ""->ok->Выполнить
Группировка
Task:
Выбирать данные из всех заказов
# Написание Sql запросов.
Decision:
Добавить запрос->Все товары из заказов->Конструктор запроса->База данных->Документы>->ЗаказКлиента->Товары>Количество,Сумма,Номенклатура,Цена>ок->Выполнить
Decision:
ВЫБРАТЬ
  ЗаказКлиентаТовары.Количество КАК Количество,
  ЗаказКлиентаТовары.Сумма КАК Сумма,
  ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
  ЗаказКлиентаТовары.Цена КАК Цена
ИЗ
  Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
Task:
Нужно сделать так, чтобы по каждому товару была только одна запись. То есть мы хотим получить общим общий объем количества товаров и сумму и минимальную цену
# Написание Sql запросов.
Decision:
Конструктор запроса->Группировка->Номенклатура>Поле группировки->Количество,Сумма,Цена>Суммарные поля->Цена->Минимум->ок->Выполнить
Decision:
ВЫБРАТЬ
  СУММА(ЗаказКлиентаТовары.Количество) КАК Количество,
  СУММА(ЗаказКлиентаТовары.Сумма) КАК Сумма,
  ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
  МИНИМУМ(ЗаказКлиентаТовары.Цена) КАК Цена
ИЗ
  Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
СГРУППИРОВАТЬ ПО
  ЗаказКлиентаТовары.Номенклатура
Task:
Получить сводную информацию о продажах товаров за период по данным документов «РасходныйОрдерНаТовары»
# Написание Sql запросов.
Decision:
Добавить запрос->Продажа по документам->Конструктор запроса->База данных->Документы->РасходныйОрдерНаТовары->ТоварыПоРаспоряжениям>->Номенклатура,Количество>->ок->Выполнить
Decision:
ВЫБРАТЬ
  РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество КАК Количество,
  РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура КАК Номенклатура
ИЗ
  Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
Decision:
Конструктор запроса->Группировка->Номенклатура>Поле группировки->Количество>Суммарные поля->ок->Выполнить
Decision:
ВЫБРАТЬ
  СУММА(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество) КАК Количество,
  РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура КАК Номенклатура
ИЗ
  Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
СГРУППИРОВАТЬ ПО
  РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура
Task:
Получить количество продаж в разрезе покупателей
# Написание Sql запросов.
Decision:
Добавить запрос->Количество продаж по контрагентам->Конструктор запроса->РасходныйОрдерНаТовары>->Получатель,Ссылка>->
Decision:
ВЫБРАТЬ
  РасходныйОрдерНаТовары.Ссылка КАК Ссылка,
  РасходныйОрдерНаТовары.Получатель КАК Получатель
ИЗ
  Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
Decision:
Конструктор запроса->Группировка->Получатель>Поле группировки->Ссылка>Суммарные поля->ок->Выполнить
Decision:
ВЫБРАТЬ
  КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасходныйОрдерНаТовары.Ссылка) КАК Ссылка,
  РасходныйОрдерНаТовары.Получатель КАК Получатель
ИЗ
  Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
СГРУППИРОВАТЬ ПО
  РасходныйОрдерНаТовары.Получатель
Task:
По каждому товару определить максимальное количество
единиц, которое продавалось за одну продажу
Decision:
Добавить запрос->Максимальное количество за одну продажу->Конструктор запроса->База данных->Документы->РасходныйОрдерНаТовары->ТоварыПоРаспоряжениям>->Номенклатура,Количество>->Группировка->Номенклатура>Поле группировки->Количество>Суммарные поля->Максимум->ок->Выполнить
Decision:
ВЫБРАТЬ
  РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура КАК Номенклатура,
  МИНИМУМ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество) КАК Количество
ИЗ
  Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
СГРУППИРОВАТЬ ПО
  РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура
Task:
Получить среднюю сумму продаж по дням за период
# Написание Sql запросов.
Decision:
Добавить запрос->Продажи по документам (сумма)->Конструктор запроса->База данных->Документы->ЗаказКлиента>->Дата,СуммаДокумента>->Группировка->Дата>Поле группировки->СуммаДокумента>Суммарные поля->Среднее->Таблицы и поля->Поле->Дата->Редактировать->Функция языка запросов->Функции->Функции работы с датами->Начало периода->Перетащить его в нижнее поле->НАЧАЛОПЕРИОДА(ЗаказКлиента.Дата, ДЕНЬ)->ок->Выполнить
Decision:
ВЫБРАТЬ
  НАЧАЛОПЕРИОДА(ЗаказКлиента.Дата, ДЕНЬ) КАК Дата,
  ЗаказКлиента.СуммаДокумента КАК СуммаДокумента
ИЗ
  Документ.ЗаказКлиента КАК ЗаказКлиента
Task:
Сортировка данных
Выбрать все документы «Приход товара» в порядке убывания даты
# Написание Sql запросов.
Decision:
Добавить запрос->Приходы по убыванию->Конструктор запроса->База данных->Документы->ПриходныйОрдерНаТовары>->Дата,Номер,Склад>->Порядок->Дата->По убыванию->ок->Выполнить
Decision:
ВЫБРАТЬ
  ПриходныйОрдерНаТовары.Дата КАК Дата,
  ПриходныйОрдерНаТовары.Склад КАК Склад,
  ПриходныйОрдерНаТовары.Номер КАК Номер
ИЗ
  Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
УПОРЯДОЧИТЬ ПО
  Дата УБЫВ
Task:
Определить дату последнего поступления конкретного товара
# Написание Sql запросов.
Decision:
Добавить запрос->дата последнего поступления товара->Конструктор запроса->База данных->Документы->ПриходныйОрдерНаТовары->Товары>->Номенклатура,Ссылка,Дата->Порядок->Дата->По убыванию->Дополнительно->Выборка записей->перерыв->1->ок->Выполнить
Decision:
ВЫБРАТЬ ПЕРВЫЕ 1
  ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
  ПриходныйОрдерНаТоварыТовары.Ссылка.Дата КАК Дата,
  ПриходныйОрдерНаТоварыТовары.Ссылка.Ссылка КАК Ссылка
ИЗ
  Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
Task:
Итоги в запросе
Получить сводную информацию о продажах товаров за период по данным документов «Расход товара» в разрезе покупателей и заказов. По
каждому покупателю нужно вычислять итоговую сумму всех заказов
# Написание Sql запросов.
Decision:
Добавить запрос->Итоги по заказам->Конструктор запроса->База данных->Документы->ЗаказКлиента>->Партнер,Ссылка,СуммаДокумента>->Итоги->Партнер>Группировочное поле->СуммаДокумента>Итоговое поле->ок->Выполнить
Decision:
ВЫБРАТЬ
  ЗаказКлиента.Ссылка КАК Ссылка,
  ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
  ЗаказКлиента.Партнер КАК Партнер
ИЗ
  Документ.ЗаказКлиента КАК ЗаказКлиента
ИТОГИ
  СУММА(СуммаДокумента)
ПО
  Партнер
Task:
Получить все документы «Приход товара» в хронологическом порядке с подсчетом итогов количества документов за каждый день периода
# Написание Sql запросов.
Decision:
Добавить запрос->Приходы с итогами по дням->Конструктор запроса->База данных->Документы->ПриходныйОрдерНаТовары>->Дата,Номер,Ссылка>->Дата->редактировать->Функции языка запросов->Функции->Функции работы с датами->НАЧАЛОПЕРИОДА->перетаскиваем вниз->НАЧАЛОПЕРИОДА(ПриходныйОрдерНаТовары.Дата, ДЕНЬ)->Итоги->дата>Группировочное поле->Ссылка>Итоговое поле->ок->Выполнить
Decision:
ВЫБРАТЬ
  НАЧАЛОПЕРИОДА(ПриходныйОрдерНаТовары.Дата, ДЕНЬ) КАК Поле1,
  ПриходныйОрдерНаТовары.Номер КАК Номер,
  ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
ИЗ
  Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
ИТОГИ
  КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
ПО
  Поле1
Task:
Как сформировать отчет
Создать отчет Остатки товаров. Пользователь должен иметь возможность выбрать дату получения остатков. Результат должен выглядеть примерно так:
  Остатки товаров на дату 17.02.2020
Номенклатура     Остаток
Молоток        7
Отвертка крестовая  5
Шуруповерт      20
Штукатурка      -6
Газонокосилка     7
Итого        33
# Написание Sql запросов.
Decision:
  регистры накопления - добавить - ОстаткиТоваров - данные - измерения - номенклатура - Ресурсы - добавить - КоличествоОстаток - документы - добавить - Номенклатура - движение - регистры накопления - +ОстаткиТоваров - Отчет - добавить - ОстатокТоваров_ФиксированныйМакет - данные - реквизиты - добавить - дата - тип - дата - формы - форма отчета - команды - добавить - Сформировать - представление - картинка - отображение - картинка и текст - сформировать - петескиваем команду в командную панель формы - форма - свойства - использование - положение командной панели - авто - кнопка по умолчанию - реквизиты - дооавить - ТабДок - тип - табличный документ - положение заголовки - нет - ок - перетаскиваем в форму - свойства - команды - сформировать - действие - на клиенте и на сервере - конструктор запроса с обработкой результата - вывод в табличный документ - таблицы и поля - регистры накопления - ОстаткиТоваров.Остатки> - параметры виртуальной таблицы - период - &Дата - номенклатура, КоличествоОстатки> - Итоги - количествоОстаток перетскиваем в итоговое поле - ок - модуль
&НаСервере
Процедура СформироватьНаСервере()
  Макет = Отчеты.ОстатокТоваров_ФиксированныйМакет.ПолучитьМакет("Макет");
  Запрос = Новый Запрос;
  Запрос.Текст =
    "ВЫБРАТЬ
    |  ОстаткиТоваровОстатки.Номенклатура КАК Номенклатура,
    |  ОстаткиТоваровОстатки.КоличествоОстатокОстаток КАК КоличествоОстатокОстаток
    |ИЗ
    |  РегистрНакопления.ОстаткиТоваров.Остатки(&Дата, ) КАК ОстаткиТоваровОстатки";  
  Запрос.УстановитьПараметр("Дата", Дата);  
  РезультатЗапроса = Запрос.Выполнить();  
  ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
  ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
  ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
  ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
  ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");  
  ТабДок.Очистить();
  ТабДок.Вывести(ОбластьЗаголовок);
  ТабДок.Вывести(ОбластьШапкаТаблицы);
  ТабДок.НачатьАвтогруппировкуСтрок();  
  ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();  
  Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
    ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
  КонецЦикла;  
  ТабДок.ЗакончитьАвтогруппировкуСтрок();
  ТабДок.Вывести(ОбластьПодвалТаблицы);
  ТабДок.Вывести(ОбластьПодвал);
КонецПроцедуры
&НаКлиенте
Процедура Сформировать(Команда)
  СформироватьНаСервере();
КонецПроцедуры
Task:
Поменяем макет
# Написание Sql запросов.
Decision:
  Макет -Заголовок - ячейка - свойства - макет - заполнение - шаблон
  Остатки товаров на дату: [Дата]
  модуль
  ...
  //Запрос.УстановитьПараметр("Дата", Дата);
  Запрос.УстановитьПараметр("Дата", Отчет.Дата);
  ..
  ТабДок.Очистить();
  ОбластьЗаголовок.Параметры.Дата = Формат(Отчет.Дата, )
  ТабДок.Вывести(ОбластьЗаголовок);
  ..
  Конструктор форматной строки - дата - формат даты - выбираем - ок
  ...
  ТабДок.Очистить();
  ОбластьЗаголовок.Параметры.Дата = Формат(Отчет.Дата, "ДФ=dd.MM.yyyy");
  ТабДок.Вывести(ОбластьЗаголовок);
  ТабДок.Вывести(ОбластьШапкаТаблицы);
  ТабДок.НачатьАвтогруппировкуСтрок();  
  //ВыборкаОбщийИтог=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
  //ВыборкаОбщийИтог.Следующий();
  //ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);  
  ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();  
  Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
    ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
  КонецЦикла;
  //ТабДок.Вывести(ОбластьОбщийИтог, ВыборкаОбщийИтог.Уровень());
  ТабДок.ЗакончитьАвтогруппировкуСтрок();
  //ТабДок.Вывести(ОбластьПодвалТаблицы);
  //ТабДок.Вывести(ОбластьПодвал);
  ...
  запустить
Task:
Сделать такой отчет с помощью СКД
# Администрирование баз данных.
Decision:
  Отчет - добавить - открыть схему компоновки данных - ок - добавить набор данных - запрос - конструктор запроса - Регистрация накопления - ОстаткиТоваров.Остатки> - номенклатура, КоличествоОстаток> - ок - параметры - Ресурсы - КоличествоОстатокОстаток> - Настройки - открыть конструктор настроек - список - номенклатура, КоличествоОстаток> - ок - параметры - период - пр.кн. - свой элемента пользвательских настроек - *Включать в пользовательские настройки - ок - запустить
Документ "поступление товаров"
Task:
Для регистрации события покупки материальных ценностей создадим документ "поступление товаров"
# Администрирование баз данных.
Decision:
  Конфигурация-документы-добавить-имя, синоним: Постпуление товаров-подсистема-закупки
  Данные-реквизиты:добавить-имя:организация-тип:справочникСсылка.Организация-проверка заполнения:выдать ошибки-так же с контрагентом-табличные части:добавить табличную часть-имя,синоним:товары-табличные части:добавить реквизит таблицы-имя:Номенклатура-тип:справочникСсылка.Номенклатура-проверка заполнения:выдать ошибки-табличные части:добавить реквизит таблицы-имя:Цена-тип:число-точность:2-также с количеством (точность оставить 0) и суммой
Task:
Копирование объектов конфигурации
Сделаем документ реализация товаров, скопировав и вставив объект поступление товаров.
# Администрирование баз данных.
Decision:
  Конфигурация-ctrl+c"поступление товаров"-ctrl+v"поступление товаров"-переименуем имя на "реализация товаров"-подсистема-Продажи
Task:
Выяснилось, что наше предприятие имеет несколько складов. Пjэтому нужно еще ввести список складов, который должен быть доступен из раздела "общее", при поступлении и продаже товаров нужно указывать склад, причем, при покупке товаров все товары одной накладной приходуются на один склад, то есть реквизит склад должен располагаться в "шапке" документа под контрагентом, а при продаже польователь должен иметь возможность выбора склада и в "шапке" и таблчиной части документа. т. е. если все товары продаются с одного склада, пользователь укажет склад как в приходной накладной, а если товары в разных строках продаются с разных складов, значит пользователь укажет склады в каждой строке документа.
Task:
Поле ввода и удобное заполнение реквизитов
# Администрирование баз данных.
Decision:
  Конфигурация-справочники-контрагенты-поле ввода
Создание при вводе
Task:
при заполнении приходной накладной, выясняется, что это первый документ от контрагента "Крутой поставщик" и такого в справочнике еще нет.
# Администрирование баз данных.
Decision:
  Пользователь нажмет на педальку выбора из правочника, ему покажут последние, которые он выбирал, можно также создать новый
  Пользоавтель начнет выбирать наименование элемента, подкажут, что такого нет, и предложать опять новый создать.
Task:
Новые реквизиты для поиска по строке
Наименования контрагентов часто повторяются, а ИНН должно быть уникальным.
# Администрирование баз данных.
Decision:
  Конфигурация-справочники-контрагенты-данные-ИНН-индексировать:индексировать-поле ввода-ввод по строке-ИНН > - Код
Способ поиска строки
Decision:
  Конфигурация-справочники-контрагенты-поле ввода-способ поиска строки:любой части
Task:
История выбора
# Администрирование баз данных.
Decision:
  Конфигурация-справочники-контрагенты-поле ввода-история выбора при вводе:авто
Decision:
При выборе истории выбора - Авто, сначала открывается список выбранных пользователем ранее элементов, а затем команда "показать все" и "добавить"
Дополнительные реквизиты, тип данных
Task:
Для элемента справочника номенклатуры лучше хранить цену и изготовителя, а для контрагентов - инн и адрес. Для этого нужно добавить реквизиты.
# Администрирование баз данных.
Decision:
  Конфигуратор - справочники - контрагенты - данные - реквизиты - создать - имя и синоним: адрес - неограниченная длина - ок - создать - имя и синоним: ИНН - длина: 12 - ок
Task:
Примитивные типы данных
Добавим в справчник номенклатура реквизит цена
# Администрирование баз данных.
Decision:
>  Справочник - номенклатура - данные - реквизиты - создать - имя и синоним: Цена - тип: число - длина: 10 - точность: 2 - неотрицательное
Task:
Ссылочные типы данных
Для каждого товара из номенклатуры мы хотим помнить изготовителя (контрагент, который выпускает этот товар, оказывает эту услугу). Поэтому нужно один раз ввести справочник "Контрагенты" того самого изготовителя и многократно выбирать его в разных элементах справочника "Номенклатура"
# Администрирование баз данных.
Decision:
  Справочники - номенклатура - данные - реквизиты - создать - имя и синоним: Изготовитель - тип: редактор - справочникСсылка - контрагенты
Линейные справочники
Task:
Наше предприятие может состоять из нескольких самостоятельных юридических лиц и/или обособленных и выделенных на отдельный баланс подразделений. Список этих самостоятельных бизнес-единиц нужно где-то хранить. Создадим справочник "Организация"
# Администрирование баз данных.
Decision:
Создадим справочник "Организация"- В закладке данные мы можем упралять длиной стандартных реквизитов "Код" и "Наименование"
Внутренний   Код         Наименование
Идентификатор
ID       Строка 3 символа  Строка 25 символов
Включение справочника в управляемый интерфейс
Task:
Чтобы пользователь мог открыть справочни, команда открытия его списка должна быть включена в глобальный командный интерфейс конфигурации.
Нужно предоставить пользователю возможность открыть справочник для просмотра и заполнения. Для эттого нужно подключить подсистему.
# Администрирование баз данных.
Decision:
  Подсистемы - Общее -
И у него должно быть включено использование стандартных команд
  Команды - Использовать стандартные команды
Переименуем элемент "Основная оргаизация" в "Фабрика" - создадим еще элемент "Торговый дом".
В режиме "Версия 8.2" /Сервис/Параметры/Формы в отдельных закладках выглядит это так:
Task:
Включение в интерфейс обычного приложения
# Администрирование баз данных.
Decision:
  Конфигуратор - Общее - Интерфейсы - Интерфейс1 - Общее - Новая - Действие - Объект метаданных:Справочники - Организация - Действие: Открыть справочник организация - ОК
Decision:
Запустив через "толстый клиент обычное приложение":
Task:
Иерархические справочники
Для хранеия списка справочника, разбитого на группы, создается иерархический справочник. Удобно разбить справочник на группы по видам ценностей: товары, материалы, продукция.
Создадим справочник номенкатура.
# Администрирование баз данных.
Decision:
  Конфигуратор - Справочник - Номенклатура - Подсистема - Общее - иерархия - иерархический справочник
Decision:
Таблица иерархического справочника:
Ссылка Это   Код   Наименование  Родитель
    группа
...   Истина 01   Группа     <Пусто>
...   Ложь  02   Элемент     Ссылка группы
Task:
Стандартные реквезиты
Свойство "Родитель" может быть не понятно пользователю. Изменить его нужно:
  Данные - Стандартные реквизиты - Стандартные реквизиты: Родитель - Синоним: Группа
Чтобы определить, какой режим будет основным, и будут ли возможны переключения между разными вариантами интерфейса
# Администрирование баз данных.
Decision:
откройте свойство корня дерева конфигурации "Конфигурация"-Выберем режим совместимости "Такси-Разрешить Версия 8.2". То есть по умолчанию будет использоваться вариант интерфейса "такси", но можно переключиться в предыдущий вариаант режима.
Разделы управляемого интерфейса
Создание разделов.
Task:
Создадим 4 подсистемы. Общее - включает все справочники, закупки - что нужно пользователю для оформления покупки товаров, продажи - для оформления продажи, сервис - служебные функции программы. Чтоб кнопки разделов программа выстроила на панели не по алфавиту, а так как мы это заводили, нужно в окне командный интерфейс выбрать нужный нам порядок.
# Администрирование баз данных.
Decision:
конфигурация-общее-подсистемы-сервис-основные-командный интерфейс
Task:
Настройка положения панелей "Такси"
Изменим положение по умолчанию панелей
# Администрирование баз данных.
Decision:
Конфигурация-открыть интерфес клиентского приложения - -меняем положения разделов-
Task:
Можно в пользовательском интерфейсе это сделать
# Администрирование баз данных.
Decision:
вид-настройка панелей-меняем положения
Управяемый интерфейс "Версия 8.2"
Task:
Посмотрим результаты нашей работы в интерфейсе "Версия 8.2".
# Администрирование баз данных.
Decision:
Сервис-Параметры-+формы в отдельных окнах
Task:
Интерфейс обычного приложения
запустить программу в режиме обычного приложения
# Администрирование баз данных.
Decision:
поставить галочку в управляемое приложение и обычное приложение в Конфигуратор-сервис-параметры -запустить через - откладка - начало откладки - толстый клиент (обычное приложение) - начать откладку
Source:
# Практическое пособие разработчика М.Г. Радченко, Е.Ю. Хрусталева
# https://www.youtube.com/channel/UC124tAuP11GlaGpK3YGHzlw
Task:
Установка 1с в Ubuntu 20.04
# Администрирование баз данных.
Decision:
tuser@kvmubuntu:~$ tar xvzf training_8_3_19_1150.deb64.tar.gz
1c-enterprise-8.3.19.1150-training-nls_8.3.19-1150_amd64.deb
1c-enterprise-8.3.19.1150-training_8.3.19-1150_amd64.deb
1c-enterprise-license-tools-0.14.3+7-linux-x86_64.tar.gz
tuser@kvmubuntu:~$ sudo apt -y install libwebkitgtk-3.0-0
Reading package lists... Done
Building dependency tree  
Reading state information... Done
Package libwebkitgtk-3.0-0 is not available, but is referred to by another package.
This may mean that the package is missing, has been obsoleted, or
is only available from another source
E: Package 'libwebkitgtk-3.0-0' has no installation candidate
tuser@kvmubuntu:~$ sudo cat /etc/apt/sources.list
# deb cdrom:[Ubuntu 20.04.2.0 LTS _Focal Fossa_ - Release amd64 (20210209.1)]/ focal main restricted
deb-src http://archive.ubuntu.com/ubuntu focal main restricted #Added by software-properties
# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
# newer versions of the distribution.
deb http://us.archive.ubuntu.com/ubuntu/ focal main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ focal multiverse universe main restricted #Added by software-properties
## Major bug fix updates produced after the final release of the
## distribution.
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse universe main restricted #Added by software-properties
## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team. Also, please note that software in universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb http://us.archive.ubuntu.com/ubuntu/ focal universe
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal universe
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates universe
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates universe
## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team, and may not be under a free licence. Please satisfy yourself as to
## your rights to use the software. Also, please note that software in
## multiverse WILL NOT receive any review or updates from the Ubuntu
## security team.
deb http://us.archive.ubuntu.com/ubuntu/ focal multiverse
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal multiverse
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse
## N.B. software from this repository may not have been tested as
## extensively as that contained in the main release, although it includes
## newer versions of some applications which may provide useful features.
## Also, please note that software in backports WILL NOT receive any review
## or updates from the Ubuntu security team.
deb http://us.archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse
deb-src http://us.archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse #Added by software-properties
## Uncomment the following two lines to add software from Canonical's
## 'partner' repository.
## This software is not part of Ubuntu, but is offered by Canonical and the
## respective vendors as a service to Ubuntu users.
# deb http://archive.canonical.com/ubuntu focal partner
# deb-src http://archive.canonical.com/ubuntu focal partner
deb http://security.ubuntu.com/ubuntu focal-security main restricted
deb-src http://security.ubuntu.com/ubuntu focal-security multiverse universe main restricted #Added by software-properties
deb http://security.ubuntu.com/ubuntu focal-security universe
# deb-src http://security.ubuntu.com/ubuntu focal-security universe
deb http://security.ubuntu.com/ubuntu focal-security multiverse
# deb-src http://security.ubuntu.com/ubuntu focal-security multiverse
# This system was installed using small removable media
# (e.g. netinst, live or single CD). The matching "deb cdrom"
# entries were disabled at the end of the installation process.
# For information about how to configure apt package sources,
# see the sources.list(5) manual.
tuser@kvmubuntu:~$ sudo vim /etc/apt/sources.list
tuser@kvmubuntu:~$ cat /etc/apt/sources.list
# deb cdrom:[Ubuntu 20.04.2.0 LTS _Focal Fossa_ - Release amd64 (20210209.1)]/ focal main restricted
deb-src http://archive.ubuntu.com/ubuntu focal main restricted #Added by software-properties
# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
# newer versions of the distribution.
deb http://us.archive.ubuntu.com/ubuntu/ focal main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ focal multiverse universe main restricted #Added by software-properties
## Major bug fix updates produced after the final release of the
## distribution.
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse universe main restricted #Added by software-properties
## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team. Also, please note that software in universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb http://us.archive.ubuntu.com/ubuntu/ focal universe
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal universe
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates universe
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates universe
## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team, and may not be under a free licence. Please satisfy yourself as to
## your rights to use the software. Also, please note that software in
## multiverse WILL NOT receive any review or updates from the Ubuntu
## security team.
deb http://us.archive.ubuntu.com/ubuntu/ focal multiverse
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal multiverse
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse
## N.B. software from this repository may not have been tested as
## extensively as that contained in the main release, although it includes
## newer versions of some applications which may provide useful features.
## Also, please note that software in backports WILL NOT receive any review
## or updates from the Ubuntu security team.
deb http://us.archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse
deb-src http://us.archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse #Added by software-properties
## Uncomment the following two lines to add software from Canonical's
## 'partner' repository.
## This software is not part of Ubuntu, but is offered by Canonical and the
## respective vendors as a service to Ubuntu users.
# deb http://archive.canonical.com/ubuntu focal partner
# deb-src http://archive.canonical.com/ubuntu focal partner
deb http://security.ubuntu.com/ubuntu focal-security main restricted
deb-src http://security.ubuntu.com/ubuntu focal-security multiverse universe main restricted #Added by software-properties
deb http://security.ubuntu.com/ubuntu focal-security universe
# deb-src http://security.ubuntu.com/ubuntu focal-security universe
deb http://security.ubuntu.com/ubuntu focal-security multiverse
# deb-src http://security.ubuntu.com/ubuntu focal-security multiverse
# This system was installed using small removable media
# (e.g. netinst, live or single CD). The matching "deb cdrom"
# entries were disabled at the end of the installation process.
# For information about how to configure apt package sources,
# see the sources.list(5) manual.
deb http://ru.archive.ubuntu.com/ubuntu/ bionic main universe
tuser@kvmubuntu:~$ sudo apt-get update
tuser@kvmubuntu:~$ sudo apt -y install libwebkitgtk-3.0-0
tuser@kvmubuntu:~$ sudo apt -y install ./1c-enterprise-8.3.19.1150-training_8.3.19-1150_amd64.deb
Task:
Во время установки 1C 8.3 в Ubuntu 20.04 выходят такие ошибки:
tuser@kvmubuntu:~$ sudo apt -y install libwebkitgtk-3.0-0
Reading package lists... Done
Building dependency tree  
Reading state information... Done
Package libwebkitgtk-3.0-0 is not available, but is referred to by another package.
This may mean that the package is missing, has been obsoleted, or
is only available from another source
E: Package 'libwebkitgtk-3.0-0' has no installation candidate
Decision:
tuser@kvmubuntu:~$ sudo cat /etc/apt/sources.list
# deb cdrom:[Ubuntu 20.04.2.0 LTS _Focal Fossa_ - Release amd64 (20210209.1)]/ focal main restricted
deb-src http://archive.ubuntu.com/ubuntu focal main restricted #Added by software-properties
# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
# newer versions of the distribution.
deb http://us.archive.ubuntu.com/ubuntu/ focal main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ focal multiverse universe main restricted #Added by software-properties
## Major bug fix updates produced after the final release of the
## distribution.
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse universe main restricted #Added by software-properties
## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team. Also, please note that software in universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb http://us.archive.ubuntu.com/ubuntu/ focal universe
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal universe
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates universe
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates universe
## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team, and may not be under a free licence. Please satisfy yourself as to
## your rights to use the software. Also, please note that software in
## multiverse WILL NOT receive any review or updates from the Ubuntu
## security team.
deb http://us.archive.ubuntu.com/ubuntu/ focal multiverse
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal multiverse
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse
## N.B. software from this repository may not have been tested as
## extensively as that contained in the main release, although it includes
## newer versions of some applications which may provide useful features.
## Also, please note that software in backports WILL NOT receive any review
## or updates from the Ubuntu security team.
deb http://us.archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse
deb-src http://us.archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse #Added by software-properties
## Uncomment the following two lines to add software from Canonical's
## 'partner' repository.
## This software is not part of Ubuntu, but is offered by Canonical and the
## respective vendors as a service to Ubuntu users.
# deb http://archive.canonical.com/ubuntu focal partner
# deb-src http://archive.canonical.com/ubuntu focal partner
deb http://security.ubuntu.com/ubuntu focal-security main restricted
deb-src http://security.ubuntu.com/ubuntu focal-security multiverse universe main restricted #Added by software-properties
deb http://security.ubuntu.com/ubuntu focal-security universe
# deb-src http://security.ubuntu.com/ubuntu focal-security universe
deb http://security.ubuntu.com/ubuntu focal-security multiverse
# deb-src http://security.ubuntu.com/ubuntu focal-security multiverse
# This system was installed using small removable media
# (e.g. netinst, live or single CD). The matching "deb cdrom"
# entries were disabled at the end of the installation process.
# For information about how to configure apt package sources,
# see the sources.list(5) manual.
tuser@kvmubuntu:~$ sudo vim /etc/apt/sources.list
tuser@kvmubuntu:~$ cat /etc/apt/sources.list
# deb cdrom:[Ubuntu 20.04.2.0 LTS _Focal Fossa_ - Release amd64 (20210209.1)]/ focal main restricted
deb-src http://archive.ubuntu.com/ubuntu focal main restricted #Added by software-properties
# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
# newer versions of the distribution.
deb http://us.archive.ubuntu.com/ubuntu/ focal main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ focal multiverse universe main restricted #Added by software-properties
## Major bug fix updates produced after the final release of the
## distribution.
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse universe main restricted #Added by software-properties
## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team. Also, please note that software in universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb http://us.archive.ubuntu.com/ubuntu/ focal universe
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal universe
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates universe
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates universe
## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team, and may not be under a free licence. Please satisfy yourself as to
## your rights to use the software. Also, please note that software in
## multiverse WILL NOT receive any review or updates from the Ubuntu
## security team.
deb http://us.archive.ubuntu.com/ubuntu/ focal multiverse
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal multiverse
deb http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse
# deb-src http://us.archive.ubuntu.com/ubuntu/ focal-updates multiverse
## N.B. software from this repository may not have been tested as
## extensively as that contained in the main release, although it includes
## newer versions of some applications which may provide useful features.
## Also, please note that software in backports WILL NOT receive any review
## or updates from the Ubuntu security team.
deb http://us.archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse
deb-src http://us.archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse #Added by software-properties
## Uncomment the following two lines to add software from Canonical's
## 'partner' repository.
## This software is not part of Ubuntu, but is offered by Canonical and the
## respective vendors as a service to Ubuntu users.
# deb http://archive.canonical.com/ubuntu focal partner
# deb-src http://archive.canonical.com/ubuntu focal partner
deb http://security.ubuntu.com/ubuntu focal-security main restricted
deb-src http://security.ubuntu.com/ubuntu focal-security multiverse universe main restricted #Added by software-properties
deb http://security.ubuntu.com/ubuntu focal-security universe
# deb-src http://security.ubuntu.com/ubuntu focal-security universe
deb http://security.ubuntu.com/ubuntu focal-security multiverse
# deb-src http://security.ubuntu.com/ubuntu focal-security multiverse
# This system was installed using small removable media
# (e.g. netinst, live or single CD). The matching "deb cdrom"
# entries were disabled at the end of the installation process.
# For information about how to configure apt package sources,
# see the sources.list(5) manual.
deb http://ru.archive.ubuntu.com/ubuntu/ bionic main universe
tuser@kvmubuntu:~$ sudo apt-get update
tuser@kvmubuntu:~$ sudo apt -y install libwebkitgtk-3.0-0
Task:
Создать внешнюю печатную форму
# Написание Sql запросов.
Decision:
файл->новый->внешняя обработка->Имя:ЗаказВнешний->Действие->открыть модуль объекта
Функция СведенияОВнешнейОбработке() Экспорт
  ПараметрыРегистрации = Новый Структура;
  МассивНазначений = Новый Массив;
  МассивНазначений.Добавить("Документ.РеализацияТоваровУслуг"); //Указываем документ к которому делаем внешнюю печ. форму
  ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); //может быть - ПечатнаяФорма, ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов...
  ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
  ПараметрыРегистрации.Вставить("Наименование", "Заказ для реализации товаров"); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
  ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);
  ПараметрыРегистрации.Вставить("Версия", "1.0");
  ПараметрыРегистрации.Вставить("Информация", "Эту ВПФ мы сделали для того что бы посмотреть возможности БСП ");
  ТаблицаКоманд = ПолучитьТаблицуКоманд();
  ДобавитьКоманду(ТаблицаКоманд, "Заказ внешний", "ЗаказВнешний", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
  ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
  Возврат ПараметрыРегистрации;
КонецФункции // СведенияОВнешнейОбработке()
Функция ПолучитьТаблицуКоманд()
  Команды = Новый ТаблицаЗначений;
  Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));//как будет выглядеть описание печ.формы для пользователя
  Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); //имя макета печ.формы
  Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка")); //ВызовСерверногоМетода
  Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
  Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
  Возврат Команды;
КонецФункции
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
  УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
    КоллекцияПечатныхФорм,
    "ЗаказВнешний",
    "Заказ внешний",
    СформироватьПечатнуюФорму(МассивОбъектов[0], ОбъектыПечати));
КонецПроцедуры // Печать()
Функция СформироватьПечатнуюФорму(СсылкаНаОбъект, ОбъектПечати)
КонецФункции // СформироватьПечатнуюФорму(СсылкаНаОбъект, ОбъектПечати)()

Макеты->Добавить->Имя: МакетЗаказа->Выделить область->Объединить

  Заказ на товар № [НомерРеализации] от [ДатаРеализации]

Свойства->макет->заполнение:шаблон

  Товар,Количество,Цена,Сумма

Выделить заполненные ячейки->Таблица->Имя->Назначить имя->Шапка->Скопируем:Товар,Количество,Цена,Сумма->Свойства->Макет->Заполнение->Параметр->Выделить заполненные ячейки->Таблица->Имя->Назначить имя->СтрокаТЧ

  Итого:, СуммаИтого, Ответственный,Ответственный

Выделить: СуммаИтого->Свойства->Макет->Заполнение->Параметр->Выделить:Ответственный->Свойства->Макет->Заполнение->Параметр->Выделить заполненные ячейки->Таблица->Имя->Назначить имя->Подвал

Функция СформироватьПечатнуюФорму(СсылкаНаОбъект, ОбъектПечати)
  ТабличныйДокумент = Новый ТабличныйДокумент;
  МакетОбработки=ПолучитьМакет("МакетЗаказа");
  ОбластьШапки=МакетОбработки.ПолучитьОбласть("Шапка");
  ОбластьШапки.Параметры.НомерРеализации=СсылкаНаОбъект.Номер;
  ОбластьШапки.Параметры.ДатаРеализации=Формат(СсылкаНаОбъект.Дата, )
КонецФункции

Конструктор форматной строки->Дата->Локальный формат даты+->Проверим товары,цена,сумма,количество,ответственный в конфигураторе документы->РеализацияТоваровУслуг->Табличные части->Таблицы->товары,цена,сумма,количество->Реквизиты->->Контрагент->Находим объекты

Функция СформироватьПечатнуюФорму(СсылкаНаОбъект, ОбъектПечати)
  ТабличныйДокумент = Новый ТабличныйДокумент;
  МакетОбработки=ПолучитьМакет("МакетЗаказа");
  ОбластьШапки=МакетОбработки.ПолучитьОбласть("Шапка");
  ОбластьШапки.Параметры.НомерРеализации=СсылкаНаОбъект.Номер;
  ОбластьШапки.Параметры.ДатаРеализации=Формат(СсылкаНаОбъект.Дата, "ДЛФ=DD");
  ТабличныйДокумент.Вывести(ОбластьШапки);
  ОбластьСтроки=МакетОбработки.ПолучитьОбласть("СтрокаТЧ");
  Для каждого ТекущаяСтрока Из СсылкаНаОбъект.Товары Цикл
    ОбластьСтроки.Параметры.Товар=ТекущаяСтрока.Номенклатура;
    ОбластьСтроки.Параметры.Цена=ТекущаяСтрока.Цена;
    ОбластьСтроки.Параметры.Количество=ТекущаяСтрока.Количество;
    ОбластьСтроки.Параметры.Сумма=ТекущаяСтрока.Сумма;
    ТабличныйДокумент.Вывести(ОбластьСтроки);
  КонецЦикла;
  ОбластьПодвала=МакетОбработки.ПолучитьОбласть("Подвал");
  ОбластьПодвала.Параметры.Ответственный=СсылкаНаОбъект.Контрагент;
  //ОбластьПодвала.Параметры.СуммаИтого=СсылкаНаОбъект.Товары.Итог(Сумма);
  ТабличныйДокумент.Вывести(ОбластьПодвала);
  Возврат ТабличныйДокумент;
КонецФункции
Decision:
НСИ и Администрирование->Печатные формы, отчеты и обработки->Дополнительные отчеты и обработки->Создать->ЗаказВнешний->Записать и закрыть->Продажи->Документ продажи->Печать->ЗаказВнешний
Source:
# https://programmist1s.ru/vneshnie-pechatnyie-formyi-v-1s/
Task:
Как хранить картинки
Для каждого товара, который хранится в справочнике номенклатура, нужно хранить его изображение. То есть пользователь должен иметь возможность в форме нажать на кнопку и выбрать картинку и в резльтате картинка должна отобразиться на форме.
# Написание Sql запросов.
Decision:
  Справчоник-номенклатура-реквизиты-добавить-имя-изображение-тип данных - хранилище значений - ок - формы - форма элемента - реквизит - добавить - Имя - адресКартинки - ок - перетаскиваем в группу - вид - поле картинки - гиберссылка + - оформление - размер картинки - пропорциональный - использованиен - текстНе выбраннойКартинки - Нажмите для выбора карнтинки - ок - свойства -адрес Картинки - события - нажатие - на клиенте
&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
  //добавляем картинку
  Оповещение = Новый ОписаниеОповещения("АдресКартинкиНажатиеЗавершение", ЭтотОбъект);
  НачатьПомещениеФайла(Оповещение,,,Истина, УникальныйИдентификатор);
  СтандартнаяОбработка = Ложь;
КонецПроцедуры  
&НаКлиенте
Процедура АдресКартинкиНажатиеЗавершение(Результат, Адрес, ПомещаемыйФайл, ДополнительныеПараметры) Экспорт
  Если НЕ Результат Тогда
    Возврат;
  КонецЕсли;
  АдресКартинки=Адрес;
  Модифицированность=Истина;
КонецПроцедуры

Запуск

  формы - форма элемента - формы - свойства - события - ПередЗаписьюНаСервере

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
  Если ЭтоАдресВременногоХранилища(АдресКартинки) Тогда
    ТекущийОбъект.Изображение=Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресКартинки));
  КонецЕсли;
КонецПроцедуры

  формы - форма элемента - формы - свойства - собыия - ПриСозданииНаСервере

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
  АдресКартинки=ПолучитьНавигационнуюСсылку(Объект.Ссылка, "Изображение");
КонецПроцедуры

Запуск

  формы - форма элемента - добавить команду - ОчиститьИзображение - представление - выбрать картинку - отображение - картинка - ок - перетаскиваем в форму - действие команды - на клиенте

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
  Если ЭтоАдресВременногоХранилища(АдресКартинки) Тогда
    ТекущийОбъект.Изображение=Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресКартинки));
  КонецЕсли;  
  Если ПустаяСтрока(АдресКартинки) Тогда
    ТекущийОбъект.Изображение = Неопределено;
  КонецЕсли;
КонецПроцедуры
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
  АдресКартинки=ПолучитьНавигационнуюСсылку(Объект.Ссылка, "Изображение");
КонецПроцедуры
&НаКлиенте
Процедура ОчиститьИзображение(Команда)
  АдресКартинки="";
  Модифицированность=Истина;
КонецПроцедуры
Task:
Загрузить данные из внешнего файла в справочник контрагенты.
# Написание Sql запросов.
Decision:
Для запуска можно установить 1с учебную версию: online.1c.ru - добавить новую базу - запустить конфигуратор - Администрирование -загрузить базу, выбрав файл с расширением *.dt - запустить
Обработка-создать-загрузка данных из файла-подсистема--данные-реквизит-добавить-ПутьКФайлу,ФорматФайла-длина строки-256,3-табличная часть-добавить-данные файла-добавить реквизит-наименование,полное наименование,унп-длина строки-150,150,9-формы-добавить форму обработки-везде+, кроме номер строки-ок-камндная панель-свойства--атозаполнение-данные файла-свойства-использование--изменить состав строк-путь к файлу-сфойства-использование-кнопка выбора-да-формат файла-свойства-использование-список выбора-значение-TXT,CSV,XLS,DBF,XML-Основные-Вид-Полеперключателя-Вид переключателя-Тумблер-ок-команды-добавить-ПрочитатьФайл,ЗаписатьДанные-перетаскиваем в командную панель таблицы ДанныеФайла-путь к Файлу-свойства-события-началов выбора-на клиенте

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
  Проводник=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
  Проводник.Заголовок="Выберитефайл с контрагентами";
  Если Объект.ФорматФайла="TXT" Тогда
    Фильтр="Текстовый документ (*.txt)|*.txt";
  ИначеЕсли Объект.ФорматФайла="CSV" Тогда
    Фильтр="Текстовый документ (*.csv)|*.csv";
  ИначеЕсли Объект.ФорматФайла="XLS" Тогда
    Фильтр="Файл ЕКСЕЛЬ (*.xls)|*.xls";
  ИначеЕсли Объект.ФорматФайла="DBF" Тогда
    Фильтр="Таблица DBF (*.dbf)|*.dbf";
  ИначеЕсли Объект.ФорматФайла="XML" Тогда
    Фильтр="XML-файл (*.xml)|*.xml";
  Иначе
    Возврат;
  КонецЕсли;
  Проводник.Фильтр=Фильтр;
  Оповещение=Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтотОбъект);
  Проводник.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
  Если ВыбранныеФайлы=Неопределено Тогда
    Возврат;
  КонецЕсли;
  Объект.ПутьКФайлу=ВыбранныеФайлы[0];
КонецПроцедуры
Task:
Как вывести штрихкод в печатную форму
# Написание Sql запросов.
Decision:
    установить элемент управления «1С: Печать штрихкодов» - its.1c.ru - ок - открыть обработку - макеты - Макет_ТолстыйКлиент - выделить поля от 2 до 8 - таблица -имена - назначить - Штрихкод - таблица - рисунки - вставить объект - мышкой выделяем нужную область в виде прямоугольника - элемент управления - 1сV8 печать штрихкодов - ок на добавленный фрагмент - свойства - КартинкаШтрихкода - оформление - линия - нет линий - ок - формы - ФормаОбычная - вывести штрихкод - ВывестиШтрихкод -

Процедура ВывестиШтрихкод(Кнопка)  
    ЭлементыФормы.ТабДок.Очистить(); //1 выполним очистку документа  
    Макет = ПолучитьМакет("Макет_ТолстыйКлиент"); //2 Получить макет
    Область = Макет.ПолучитьОбласть("Штрихкод"); //3 получить область макета
    Область.Рисунки.КартинкаШтрихкода.Объект.ТипКода = 4; //4 обратимся к элементу управления
    Область.Рисунки.КартинкаШтрихкода.Объект.Сообщение = Штрихкод; //5 необходимо вывести область сообщение
    ЭлементыФормы.ТабДок.Вывести(Область); //6
КонецПроцедуры

    запустить у ее нужно в режиме толстый клиент - сервис - параметры - запуск 1с предприятия - +толстый клиент обычное приложение - ок - запуск
Task:
Вывод штрихкода в печатную форму 1С. Тонкий клиент.
# Написание Sql запросов.
Decision:
    Загрузить внешнюю компоненту печати штрихкодов в общий макет - its.1c.ru - после установки создать новую информационную базу - общие - общие макеты - копируем в нашу конфигурацию 4 макета (КомпонентаПечатиШтрихкодов....) - смотрим также код в демо конфе справчоник - товары - открыть модуль команды - копируем в нашу конифгурацию код:
Функция ПолучитьКартинкуШтрихкода()
    // В зависимости от типа платформы подключим соответствующую внешнюю компоненту
    ИнформацияОСистеме = Новый СистемнаяИнформация;
    Если ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
        ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиШтрихкодовWindows32", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
    ИначеЕсли ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
        ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиШтрихкодовWindows64", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
    ИначеЕсли ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
        ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиШтрихкодовLinux32", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);    
    Иначе
        ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиШтрихкодовLinux64", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
    КонецЕсли;
    // Создадим объект внешней компоненты
    Компонент = Новый("AddIn.КартинкаШтрихкода.Barcode");
    // Если нет возможности рисовать
    Если НЕ Компонент.ГрафикаУстановлена Тогда
        // То картинку сформировать не сможем
        Возврат Неопределено;
    КонецЕсли;
    // Если в системе установлен шрифт Tahoma
    Если Компонент.НайтиШрифт("Tahoma") = Истина Тогда
        // Выбираем его как шрифт для формирования картинки
        Компонент.Шрифт = "Tahoma";
    Иначе
        // Шрифт Tahoma в системе отсутствует
        // Обойдем все доступные компоненте шрифты
        Для Сч = 0 По Компонент.КоличествоШрифтов -1 Цикл
            // Получим очередной шрифт, доступный компоненте
            ТекущийШрифт = Компонент.ШрифтПоИндексу(Сч);
            // Если шрифт доступен
            Если ТекущийШрифт <> Неопределено Тогда
                // Они и будет шрифтом для формирования штрихкода
                Компонент.Шрифт = ТекущийШрифт;
                Прервать;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    // Установим размер шрифта
    Компонент.РазмерШрифта = 12;
    // Зададим размер картинки
    Компонент.Ширина = 100;
    Компонент.Высота = 90;
    // Разрешим компоненте самой определять тип кода
    Компонент.АвтоТип = Истина;
    // ИЛИ установим код EAN-13
    // Компонент.ТипКода = 1;
    //
    // Тип смотрим в документации на внешнюю компоненту
    // Если код содержит контрольный символ, обязательно указываем
    Компонент.СодержитКС = СтрДлина(ЭтотОбъект.Штрихкод) = 13;
    // Если отображать контрольный символ не нужно
    // Компонент.ВидимостьКС = Ложь;
    // Формируем картинку штрихкода
    Компонент.ЗначениеКода = ЭтотОбъект.Штрихкод;
    // Если установленная нами ширина меньше минимально допустимой для этого штрихкода
    Если Компонент.Ширина < Компонент.МинимальнаяШиринаКода Тогда
        // Скорректируем ширину
        Компонент.Ширина = Компонент.МинимальнаяШиринаКода + 10;
    КонецЕсли;
    // Сформируем картинку
    ДвоичныеДанныеКартинки = Компонент.ПолучитьШтрихкод();
    // Если картинка сформировалась
    Если НЕ ДвоичныеДанныеКартинки = Неопределено Тогда
        // Формируем из двоичных данных
        Возврат Новый Картинка(ДвоичныеДанныеКартинки);
    КонецЕсли;
    Возврат Неопределено;
КонецФункции

    вставим ее в обработку ВыводШтрихкодаВПечатнуюФорму с директивыой &НаСервере - формы - ФормаУправляемая - Макеты - Макет_ТонкийКлиент - выделим область полей с 2 до 8 - таблица -имена - назначить имя - Штрихкод - наводим на поле - таблица - рисунки - картинка - выбираем картинку с .пнг - свойства картинки - КартинкаШтрихкода - оформление - линия - формы - форма управляемая

&НаСервере
Процедура ВывестиШтрихкодНаСервере()
    ТабДок.Очистить();
    Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет_ТонкийКлиент");
    Область = Макет.ПолучитьОбласть("Штрихкод");
    КартинкаШтрихкода = ПолучитьКартинкуШтрихкода(Штрихкод);
    Если КартинкаШтрихкода <> Неопределено Тогда
        Область.Рисунки.КартинкаШтрихкода.Картинка = КартинкаШтрихкода;
    КонецЕсли;
    ТабДок.Вывести(Область);
КонецПроцедуры
&НаКлиенте
Процедура ВывестиШтрихкод(Команда)
    ВывестиШтрихкодНаСервере();
КонецПроцедуры

    в Функции изменить строку и вместо ЭтотШтрихкод заменить Штрихкод:

//Функция ПолучитьКартинкуШтрихкода()
Функция ПолучитьКартинкуШтрихкода(Штрихкод)
    ...
    // Формируем картинку штрихкода
    //Компонент.ЗначениеКода = ЭтотОбъект.Штрихкод;
    Компонент.ЗначениеКода = Штрихкод;

    ок - запустить у ее нужно в режиме тонкий клиент - сервис - параметры - запуск 1с предприятия - +Выбрать автоматически - ок - запуск
Task:
База данных "Staff".
Сотрудники зарабатывают больше, чем их менеджеры
Table: Employee
+-------------+---------+
| Column Name | Type  |
+-------------+---------+
| id     | int   |
| name    | varchar |
| salary   | int   |
| managerId | int   |
+-------------+---------+
Напишите SQL-запрос, чтобы найти сотрудников, которые зарабатывают больше, чем их менеджеры. Верните таблицу результатов в любом порядке.
# Написание Sql запросов.
Decision:
postgres=# DROP TABLE IF EXISTS Employee;
  ЗАМЕЧАНИЕ: таблица "employee" не существует, пропускается
  DROP TABLE
postgres=# CREATE TABLE Employee(
postgres(# id INT,
postgres(# name VARCHAR,
postgres(# salary INT,
postgres(# managerid INT
postgres(# );
  CREATE TABLE
postgres=# SELECT * FROM Employee;
   id | name | salary | managerid
  ----+------+--------+-----------
  (0 строк)
postgres=# INSERT INTO Employee(id, name, salary, managerid) VALUES (1, 'Joe', 70000, 3);
  INSERT 0 1
postgres=# INSERT INTO Employee(id, name, salary, managerid) VALUES (2, 'Henry', 80000, 4);
  INSERT 0 1
postgres=# INSERT INTO Employee(id, name, salary) VALUES (3, 'Sam', 60000);
  INSERT 0 1
postgres=# INSERT INTO Employee(id, name, salary) VALUES (4, 'Max', 90000);
  INSERT 0 1
postgres=# SELECT * FROM Employee;
   id | name | salary | managerid
  ----+-------+--------+-----------
   1 | Joe | 70000 |     3
   2 | Henry | 80000 |     4
   3 | Sam | 60000 |
   4 | Max | 90000 |
  (4 строки)
postgres=# SELECT * FROM Employee AS e JOIN Employee AS m
postgres-# ON e.managerid = m.id;
   id | name | salary | managerid | id | name | salary | managerid
  ----+-------+--------+-----------+----+------+--------+-----------
   1 | Joe | 70000 |     3 | 3 | Sam | 60000 |
   2 | Henry | 80000 |     4 | 4 | Max | 90000 |
  (2 строки)
postgres=# SELECT * FROM Employee AS e JOIN Employee AS m
ON e.managerid = m.id
postgres-# WHERE e.salary > m.salary;
   id | name | salary | managerid | id | name | salary | managerid
  ----+------+--------+-----------+----+------+--------+-----------
   1 | Joe | 70000 |     3 | 3 | Sam | 60000 |
  (1 строка)
postgres=# SELECT e.name FROM Employee AS e JOIN Employee AS m
ON e.managerid = m.id
WHERE e.salary > m.salary;
   name
  ------
   Joe
  (1 строка)
postgres=# SELECT e.name AS Employee FROM Employee AS e JOIN Employee AS m
ON e.managerid = m.id
WHERE e.salary > m.salary;
   employee
  ----------
   Joe
  (1 строка)
Task:
Самая высокая зарплата в отделе
Task:
Table: Employee
+--------------+---------+
| Column Name | Type  |
+--------------+---------+
| id     | int   |
| name     | varchar |
| salary   | int   |
| departmentId | int   |
+--------------+---------+
Table: Department
+-------------+---------+
| Column Name | Type  |
+-------------+---------+
| id     | int   |
| name    | varchar |
+-------------+---------+
Напишите SQL-запрос, чтобы найти сотрудников с самой высокой зарплатой в каждом из отделов.
Верните таблицу результатов в любом порядке.
# Написание Sql запросов.
Decision:
postgres=# DROP TABLE IF EXISTS Employee;
TE TABLE Employee(
  Id INT,
  Name VARCHAR,
  Salary INT,
  DepartmentId INT
);
  DROP TABLE IF EXISTS DROP TABLE
postgres=# CREATE TABLE Employee(
postgres(#   Id INT,
postgres(#   Name VARCHAR,
postgres(#   Salary INT,
postgres(#   DepartmentId INT
postgres(# );
CREATE TABLE Department(
  Id Int,
  Name VARCHAR
);
  INSERT INCREATE TABLE
postgres=# DROP TABLE IF EXISTS Department;
  DROP TABLE
postgres=# CREATE TABLE Department(
postgres(#   Id Int,
postgres(#   Name VARCHAR
postgres(# );
  CREATE TABLE
postgres=# INSERT INTO Employee(Id, Name, Salary, DepartmentId) VALUES(1, 'Joe', 70000, 1);
  ERT INSERT 0 1
postgres=# INSERT INTO Employee(Id, Name, Salary, DepartmentId) VALUES(2, 'Jim', 90000, 1);
  NSERINSERT 0 1
postgres=# INSERT INTO Employee(Id, Name, Salary, DepartmentId) VALUES(3, 'Henry', 80000, 2);
  O EmplINSERT 0 1
postgres=# INSERT INTO Employee(Id, Name, Salary, DepartmentId) VALUES(4, 'Sam', 60000, 2);
  INSERT 0 1
postgres=# INSERT INTO Employee(Id, Name, Salary, DepartmentId) VALUES(5, 'Max', 90000, 1);
  NSERINSERT 0 1
postgres=# INSERT INTO Department(Id, Name) VALUES (1, 'IT');
  INSERT INTO DepartmINSERT 0 1
postgres=# INSERT INTO Department(Id, Name) VALUES (2, 'Sales');
  INSERT 0 1
postgres=# SELECT * FROM Employee;
   id | name | salary | departmentid
  ----+-------+--------+--------------
   1 | Joe | 70000 |      1
   2 | Jim | 90000 |      1
   3 | Henry | 80000 |      2
   4 | Sam | 60000 |      2
   5 | Max | 90000 |      1
  (5 строк)
postgres=# SELECT * FROM Department;
   id | name
  ----+-------
   1 | IT
   2 | Sales
  (2 строки)
postgres=# SELECT MAX(salary), departmentid FROM Employee GROUP BY departmentid;
   max | departmentid
  -------+--------------
   80000 |      2
   90000 |      1
  (2 строки)
postgres=# SELECT d.name, m.max_salary
FROM Department AS d
JOIN (SELECT MAX(salary) AS max_salary, departmentid FROM Employee GROUP BY departmentid) AS m
ON d.id=m.departmentid;
   name | max_salary
  -------+------------
   IT  |   90000
   Sales |   80000
  (2 строки)
postgres=# SELECT d.name, e.name, m.max_salary
postgres-# FROM Department AS d
postgres-# JOIN (SELECT MAX(salary) AS max_salary, departmentid FROM Employee GROUP BY departmentid) AS m
postgres-# ON d.id=m.departmentid
postgres-# JOIN Employee AS e
postgres-# ON e.salary=m.max_salary;
   name | name | max_salary
  -------+-------+------------
   Sales | Henry |   80000
   IT  | Jim |   90000
   IT  | Max |   90000
  (3 строки)
postgres=# SELECT d.name AS Department, e.name AS Employee, m.max_salary AS Salary
postgres-# FROM Department AS d
IN (Spostgres-# JOIN (SELECT MAX(salary) AS max_salary, departmentid FROM EmploROUP BY departmentid) AS m
postgres-# ON d.id=m.departmentid
postgres-# JOIN Employee AS e
postgres-# ON e.salary=m.max_salary;
   department | employee | salary
  ------------+----------+--------
   Sales   | Henry  | 80000
   IT     | Jim   | 90000
   IT     | Max   | 90000
  (3 строки)
postgres=# SELECT d.name AS Department, e.name AS Employee, m.max_salary AS Salary
postgres-# FROM Department AS d
postgres-# JOIN (SELECT MAX(salary) AS max_salary, departmentid FROM Employee GROUP BY departmentid) AS m
postgres-# ON d.id=m.departmentid
postgres-# JOIN Employee AS e
postgres-# ON e.salary=m.max_salary AND e.departmentid=m.departmentid;
   department | employee | salary
  ------------+----------+--------
   IT     | Max   | 90000
   IT     | Jim   | 90000
   Sales   | Henry  | 80000
  (3 строки)
Source:
# https://www.asozykin.ru/?ysclid=lk9eaatbqj18673257
Task:
База данных "Online School".
Вставить данные в таблицу
# Написание Sql запросов.
Decision:
testbd=> CREATE TABLE superheroes(  
id SERIAL PRIMARY KEY,
name VARCHAR(100),
align VARCHAR(30),
eye VARCHAR(30),
hair VARCHAR(30),
gender VARCHAR(30),
appearances INT,
year INT,
universe VARCHAR(10)
);
  CREATE TABLE
testbd=> SELECT * FROM superheroes;
   id | name | align | eye | hair | gender | appearances | year | universe
  ----+------+-------+-----+------+--------+-------------+------+----------
  (0 rows)
testbd=> INSERT INTO superheroes(name, appearances, universe)
testbd-> VALUES ('Spider-Man', 4043,'marvel');
  INSERT 0 1
testbd=> SELECT * FROM superheroes;
   id |  name  | align | eye | hair | gender | appearances | year | universe
  ----+------------+-------+-----+------+--------+-------------+------+----------
   1 | Spider-Man |   |   |   |    |    4043 |   | marvel
  (1 row)
testbd=> INSERT INTO superheroes(name, align, eye, hair,
testbd(> gender, appearances, year, universe)
testbd-> VALUES ('Spider-Man (Peter Parker)', 'Good
testbd'> Characters', 'Hazel Eyes', 'Brown Hair',
testbd(> 'Male Characters', 4043, 1962, 'marvel');
  INSERT 0 1
testbd=> SELECT * FROM superheroes;
   id |     name      | align  |  eye   |  hair  |   gender   | appearances | year | universe
  ----+---------------------------+------------+------------+------------+-----------------+-------------+------+----------
   1 | Spider-Man        |      |      |      |         |    4043 |   | marvel
   2 | Spider-Man (Peter Parker) | Good   +| Hazel Eyes | Brown Hair | Male Characters |    4043 | 1962 | marvel
    |             | Characters |      |      |         |       |   |
  (2 rows)
testbd=> INSERT INTO superheroes(id, name, align, eye, hair,
gender, appearances, year, universe)
VALUES (5, 'Spider-Man (Peter Parker)', 'Good
Characters', 'Hazel Eyes', 'Brown Hair',
'Male Characters', 4043, 1962, 'marvel');
  INSERT 0 1
testbd=> SELECT * FROM superheroes;
   id |     name      | align  |  eye   |  hair  |   gender   | appearances | year | universe
  ----+---------------------------+------------+------------+------------+-----------------+-------------+------+----------
   1 | Spider-Man        |      |      |      |         |    4043 |   | marvel
   2 | Spider-Man (Peter Parker) | Good   +| Hazel Eyes | Brown Hair | Male Characters |    4043 | 1962 | marvel
    |             | Characters |      |      |         |       |   |
   3 | Spider-Man (Peter Parker) | Good   +| Hazel Eyes | Brown Hair | Male Characters |    4043 | 1962 | marvel
    |             | Characters |      |      |         |       |   |
   5 | Spider-Man (Peter Parker) | Good   +| Hazel Eyes | Brown Hair | Male Characters |    4043 | 1962 | marvel
    |             | Characters |      |      |         |       |   |
  (4 rows)
Task:
Изменить данные в таблице
# Написание Sql запросов.
Decision:
testbd=> UPDATE superheroes
SET name='Batman',
universe='dc'
WHERE id=1;
UPDATE 1
testbd=> SELECT * FROM superheroes;
   id | name | align  |  eye   |  hair  |   gender   | appearances | year | universe
  ----+--------+------------+------------+------------+-----------------+-------------+------+----------
   1 | Batman | Good   +| Hazel Eyes | Brown Hair | Male Characters |    4043 | 1962 | dc
    |    | Characters |      |      |         |       |   |
  (1 row)
testbd=> UPDATE superheroes
SET gender='Man'
WHERE gender='Male Characters';
UPDATE 1
testbd=> SELECT * FROM superheroes;
   id | name | align  |  eye   |  hair  | gender | appearances | year | universe
  ----+--------+------------+------------+------------+--------+-------------+------+----------
   1 | Batman | Good   +| Hazel Eyes | Brown Hair | Man  |    4043 | 1962 | dc
    |    | Characters |      |      |    |       |   |
  (1 row)
Task:
Удалить данные из таблицы
# Написание Sql запросов.
Decision:
testbd=> INSERT INTO superheroes(id, name, align, eye, hair,
gender, appearances, year, universe)
VALUES (2, 'Spider-Man (Peter Parker)', 'Good
Characters', 'Hazel Eyes', 'Brown Hair',
'Male Characters', 4043, 1962, 'marvel');
INSERT 0 1
testbd=> SELECT * FROM superheroes;
   id |     name      | align  |  eye   |  hair  |   gender   | appearances | year | universe
  ----+---------------------------+------------+------------+------------+-----------------+-------------+------+----------
   1 | Batman          | Good   +| Hazel Eyes | Brown Hair | Man       |    4043 | 1962 | dc
    |             | Characters |      |      |         |       |   |
   2 | Spider-Man (Peter Parker) | Good   +| Hazel Eyes | Brown Hair | Male Characters |    4043 | 1962 | marvel
    |             | Characters |      |      |         |       |   |
  (2 rows)
testbd=> DELETE FROM superheroes
WHERE id=2;
DELETE 1
testbd=> SELECT * FROM superheroes;
   id | name | align  |  eye   |  hair  | gender | appearances | year | universe
  ----+--------+------------+------------+------------+--------+-------------+------+----------
   1 | Batman | Good   +| Hazel Eyes | Brown Hair | Man  |    4043 | 1962 | dc
    |    | Characters |      |      |    |       |   |
  (1 row)
testbd=> INSERT INTO superheroes(id, name, align, eye, hair,
gender, appearances, year, universe)
VALUES (2, 'Spider-Man (Peter Parker)', 'Good
Characters', 'Hazel Eyes', 'Brown Hair',
'Male Characters', 4043, 1962, 'marvel');
  INSERT 0 1
testbd=> DELETE FROM superheroes
WHERE gender='Male Characters';
DELETE 1
testbd=> SELECT * FROM superheroes;
   id | name | align  |  eye   |  hair  | gender | appearances | year | universe
  ----+--------+------------+------------+------------+--------+-------------+------+----------
   1 | Batman | Good   +| Hazel Eyes | Brown Hair | Man  |    4043 | 1962 | dc
    |    | Characters |      |      |    | &
Task:
Удалить все данные
# Написание Sql запросов.
Decision:
testbd=> DELETE FROM superheroes;
  DELETE 1
testbd=> SELECT * FROM superheroes;
   id | name | align | eye | hair | gender | appearances | year | universe
  ----+------+-------+-----+------+--------+-------------+------+----------
  (0 rows)
Task:
Удаление дубликатов email
# Написание Sql запросов.
Decision:
Table: Person
+-------------+---------+
| Column Name | Type  |
+-------------+---------+
| id     | int   |
| email   | varchar |
+-------------+---------+
Task:
Напишите SQL-запрос, чтобы удалить все дубликаты электронных писем, сохранив только одно уникальное электронное письмо с наименьшим идентификатором.
Верните таблицу результатов в любом порядке.
# Написание Sql запросов.
Decision:
postgres=# CREATE TABLE person(
postgres(#   id INT,
postgres(#   email VARCHAR
postgres(# );
INSERT INTO person(id, email) VALUES (1, 'john@example.com');
INSERT INTO person(id, email) VALUES (2, 'bob@example.com');
INSERT INTO person(id, email) VALUES (3, 'john@example.com');
  CREATE TABLE
postgres=# INSERT INTO person(id, email) VALUES (1, 'john@example.com');
postgres=# INSERT INTO person(id, email) VALUES (2, 'bob@example.com');
postgres=# INSERT INTO person(id, email) VALUES (3, 'john@example.com');
postgres=# INSERT INTO person(id, email) VALUES (1, 'john@example.com');
  INSERT 0 1
postgres=# INSERT INTO person(id, email) VALUES (2, 'bob@example.com');
  INSERT 0 1
postgres=# INSERT INTO person(id, email) VALUES (3, 'john@example.com');
  INSERT 0 1
postgres=# SELECT * FROM Person;
   id |   email
  ----+------------------
   1 | john@example.com
   2 | bob@example.com
   3 | john@example.com
  (3 строки)
postgres=# SELECT MIN(id), email FROM person GROUP BY email;
   min |   email
  -----+------------------
   2 | bob@example.com
   1 | john@example.com
  (2 строки)
postgres=# SELECT MIN(id) FROM person GROUP BY email;
  min
  -----
   2
   1
  (2 строки)
postgres=# DELETE FROM person WHERE id NOT IN (SELECT MIN(id) FROM person GROUP BY email);
  DELETE 1
Task:
Группировка
# Написание Sql запросов.
Decision:
testbd=> SELECT * FROM superheroes;
   id | name | align | eye | hair | gender | appearances | year | universe
  ----+------+-------+-----+------+--------+-------------+------+----------
  (0 rows)
testbd=> INSERT INTO superheroes(id, name, align, eye, hair,
gender, appearances, year, universe)
VALUES (2, 'Spider-Man (Peter Parker)', 'Good
Characters', 'Hazel Eyes', 'Brown Hair',
'Male Characters', 4043, 1962, 'marvel');
  INSERT 0 1
testbd=> SELECT gender, COUNT(*) FROM superheroes
testbd-> GROUP BY gender;
     gender   | count
  -----------------+-------
   Male Characters |   1
  (1 row)
testbd=> SELECT * FROM superheroes;
   id |     name      | align  |  eye   |  hair  |   gender   | appearances | year | universe
  ----+---------------------------+------------+------------+------------+-----------------+-------------+------+----------
   2 | Spider-Man (Peter Parker) | Good   +| Hazel Eyes | Brown Hair | Male Characters |    4043 | 1962 | marvel
    |             | Characters |      |      |         |       |   |
  (1 row)
testbd=> SELECT align, COUNT(*) FROM superheroes
testbd-> GROUP BY align;
   align  | count
  ------------+-------
   Good   +|   1
   Characters |
  (1 row)
Task:
Многоуровневая группировка данных
# Написание Sql запросов.
Decision:
estbd=> SELECT universe, align, COUNT(*) FROM superheroes
GROUP BY universe, align;
   universe | align  | count
  ----------+------------+-------
   marvel | Good   +|   1
       | Characters |
  (1 row)
Task:
Фильтрация, группировка, сортировка и лимит
# Написание Sql запросов.
Decision:
testbd=> SELECT hair, COUNT(*) FROM superheroes
WHERE gender='Male Characters'
GROUP BY hair;
    hair  | count
  ------------+-------
   Brown Hair |   1
  (1 row)
testbd=> SELECT hair, COUNT(*) FROM superheroes
WHERE gender='Male Characters'
GROUP BY hair
ORDER BY count(*) DESC;
    hair  | count
  ------------+-------
   Brown Hair |   1
  (1 row)
testbd=> SELECT hair, COUNT(*) FROM superheroes
WHERE gender='Male Characters'
GROUP BY hair
ORDER BY count(*) DESC
LIMIT 5;
    hair  | count
  ------------+-------
   Brown Hair |   1
  (1 row)
Task:
Использование агрегатных функций
# Написание Sql запросов.
Decision:
testbd=> SELECT * FROM superheroes;
   id |                 name                 |   align    |   eye   |     hair     |     gender     | appearances | year | universe
  ------+-----------------------------------------------------------------------+--------------------+-----------------+-----------------------+------------------------+-------------+------+----------
    1 | Spider-Man (Peter Parker)                       | Good Characters  | Hazel Eyes   | Brown Hair      | Male Characters    |    4043 | 1962 | marvel
    2 | Captain America (Steven Rogers)                   | Good Characters  | Blue Eyes   | White Hair      | Male Characters    |    3360 | 1941 | marvel
    3 | Wolverine (James \"Logan\" Howlett)                 | Neutral Characters | Blue Eyes   | Black Hair      | Male Characters    |    3061 | 1974 | marvel
    4 | Iron Man (Anthony \"Tony\" Stark)                   | Good Characters  | Blue Eyes   | Black Hair      | Male Characters    |    2961 | 1963 | marvel
    5 | Thor (Thor Odinson)                         | Good Characters  | Blue Eyes   | Blond Hair      | Male Characters    |    2258 | 1950 | marvel
    6 | Benjamin Grimm (Earth-616)                      | Good Characters  | Blue Eyes   | No Hair       | Male Characters    |    2255 | 1961 | marvel
    7 | Reed Richards (Earth-616)                       | Good Characters  | Brown Eyes   | Brown Hair      | Male Characters    |    2072 | 1961 | marvel
    8 | Hulk (Robert Bruce Banner)                      | Good Characters  | Brown Eyes   | Brown Hair      | Male Characters    |    2017 | 1962 | marvel
    9 | Scott Summers (Earth-616)                       | Neutral Characters | Brown Eyes   | Brown Hair      | Male Characters    |    1955 | 1963 | marvel
   10 | Jonathan Storm (Earth-616)                      | Good Characters  | Blue Eyes   | Blond Hair      | Male Characters    |    1934 | 1961 | marvel
   11 | Henry McCoy (Earth-616)                       | Good Characters  | Blue Eyes   | Blue Hair       | Male Characters    |    1825 | 1963 | marvel
   12 | Susan Storm (Earth-616)                       | Good Characters  | Blue Eyes   | Blond Hair      | Female Characters   |    1713 | 1961 | marvel
   13 | Ororo Munroe (Earth-616)                       | Good Characters  | Blue Eyes   | White Hair      | Female Characters   |    1512 | 1975 | marvel
   14 | Clinton Barton (Earth-616)                      | Good Characters  | Blue Eyes   | Blond Hair      | Male Characters    |    1394 | 1964 | marvel
   15 | Matthew Murdock (Earth-616)                     | Good Characters  | Blue Eyes   | Red Hair       | Male Characters    |    1338 | 1964 | marvel
testbd=> SELECT align, COUNT(*), SUM(appearances)
testbd-> FROM superheroes
testbd-> GROUP BY align;
     align    | count | sum
  --------------------+-------+--------
   Bad Characters   | 489 | 29478
   Good Characters  | 773 | 125961
   Neutral Characters | 249 | 30513
  (3 rows)
Task:
Выражения с агрегатными функциями
# Написание Sql запросов.
Decision:
testbd=> SELECT align, AVG(appearances),
testbd-> SUM(appearances)/COUNT(*) AS average
testbd-> FROM superheroes
testbd-> GROUP BY align;
     align    |     avg     | average
  --------------------+----------------------+---------
   Bad Characters   | 60.2822085889570552 |   60
   Good Characters  | 162.9508408796895213 |   162
   Neutral Characters | 122.5421686746987952 |   122
  (3 rows)
Task:
Использование агрегатных функций
# Написание Sql запросов.
Decision:
testbd=> SELECT year, MIN(appearances), MAX(appearances)
testbd-> FROM superheroes
testbd-> GROUP BY year;
   year | min | max
  ------+-----+------
   1964 | 20 | 1394
   1969 | 17 | 558
   2008 | 19 | 200
   1989 | 19 | 408
   1991 | 18 | 500
   1945 | 81 | 81
   1974 | 18 | 3061
   1943 | 34 | 140
   1971 | 17 | 368
   1977 | 17 | 471
   1956 | 25 | 114
   1940 | 17 | 373
   1983 | 18 | 245
   1984 | 18 | 348
   2009 | 18 | 98
   1958 | 25 | 25
   2005 | 18 | 325
   1973 | 17 | 323
   2013 | 18 | 53
   2003 | 18 | 238
   1993 | 18 | 147
   1990 | 18 | 636
   1953 | 37 | 141
   2002 | 20 | 171
   1979 | 18 | 525
   1997 | 18 | 97
   2004 | 18 | 265
   1980 | 19 | 886
   1986 | 18 | 612
   1970 | 20 | 787
   1975 | 17 | 1512
   1982 | 17 | 657
testbd=> SELECT year, MIN(appearances), MAX(appearances)
testbd-> FROM superheroes
testbd-> GROUP BY year
testbd-> ORDER BY year;
   year | min | max
  ------+-----+------
   1939 | 18 | 548
   1940 | 17 | 373
   1941 | 17 | 3360
   1942 | 19 | 28
   1943 | 34 | 140
   1944 | 30 | 550
   1945 | 81 | 81
   1946 | 99 | 99
   1947 | 139 | 139
   1948 | 17 | 106
   1949 | 26 | 532
   1950 | 70 | 2258
   1951 | 18 | 223
   1953 | 37 | 141
   1954 | 19 | 72
   1955 | 44 | 65
   1956 | 25 | 114
   1958 | 25 | 25
   1960 | 26 | 237
   1961 | 21 | 2255
   1962 | 21 | 4043
   1963 | 20 | 2961
   1964 | 20 | 1394
   1965 | 17 | 1304
   1966 | 17 | 696
   1967 | 17 | 752
   1968 | 17 | 1007
   1969 | 17 | 558
   1970 | 20 | 787
   1971 | 17 | 368
   1972 | 19 | 856
   1973 | 17 | 323
testbd=> SELECT year, MIN(appearances), MAX(appearances)
testbd-> FROM superheroes
testbd-> GROUP BY year
testbd-> ORDER BY MAX(appearances) DESC;
   year | min | max
  ------+-----+------
   1962 | 21 | 4043
   1941 | 17 | 3360
   1974 | 18 | 3061
   1963 | 20 | 2961
   1950 | 70 | 2258
testbd=> SELECT year, MIN(appearances),
testbd-> MAX(appearances) AS max_ap
testbd-> FROM superheroes
testbd-> GROUP BY year
testbd-> ORDER BY max_ap DESC;
   year | min | max_ap
  ------+-----+--------
   1962 | 21 | 4043
   1941 | 17 | 3360
   1974 | 18 | 3061
   1963 | 20 | 2961
   1950 | 70 | 2258
testbd=> SELECT year, MIN(appearances),
testbd-> MAX(appearances) AS max_ap
testbd-> FROM superheroes
testbd-> GROUP BY year
testbd-> ORDER BY max_ap DESC
testbd-> LIMIT 5;
   year | min | max_ap
  ------+-----+--------
   1962 | 21 | 4043
   1941 | 17 | 3360
   1974 | 18 | 3061
   1963 | 20 | 2961
   1950 | 70 | 2258
  (5 rows)
Task:
Агрегатные функции без группировки
# Написание Sql запросов.
Decision:
testbd=> SELECT COUNT(*),
testbd-> MIN(appearances),
testbd-> MAX(appearances),
testbd-> SUM(appearances),
testbd-> AVG(appearances)
testbd-> FROM superheroes;
   count | min | max | sum |     avg    
  -------+-----+------+--------+----------------------
   1511 | 17 | 4043 | 185952 | 123.0655195234943746
  (1 row)
Task:
Группировка данных
# Написание Sql запросов.
Decision:
testbd=> SELECT hair, COUNT(*) FROM superheroes
WHERE gender='Female Characters'
GROUP BY hair;
       hair     | count
  -----------------------+-------
   Strawberry Blond Hair |  11
   Bald         |   2
   Green Hair      |   9
   Silver Hair     |   5
   Red Hair       |  40
Task:
Фильтрация групповых результатов
# Написание Sql запросов.
Decision:
testbd=> SELECT hair, COUNT(*) FROM superheroes
testbd-> WHERE gender='Female Characters'
testbd-> AND COUNT(*) > 10
testbd-> GROUP BY hair;
  ERROR: aggregate functions are not allowed in WHERE
  LINE 3: AND COUNT(*) > 10
        ^
testbd=> SELECT hair, COUNT(*) FROM superheroes
testbd-> WHERE gender='Female Characters'
testbd-> GROUP BY hair
testbd-> HAVING COUNT(*) > 10;
       hair     | count
  -----------------------+-------
   Strawberry Blond Hair |  11
   Red Hair       |  40
   White Hair      |  15
   Black Hair      | 176
   Blond Hair      | 110
testbd=> SELECT hair, COUNT(*) FROM superheroes
WHERE gender='Female Characters'
GROUP BY hair
HAVING COUNT(*) BETWEEN 50 AND 300;
    hair  | count
  ------------+-------
   Black Hair | 176
   Blond Hair | 110
   Brown Hair |  63
  (3 rows)
Task:
Запрос данных из нескольких таблиц
# Написание Sql запросов.
Decision:
testbd=> SELECT * FROM products;
   id |               name               | type_id | price
  ----+---------------------------------------------------------------+---------+-------
   1 | Основы искусственного интеллекта               |   1 | 15000
   2 | Технологии обработки больших данных             |   1 | 50000
   3 | Программирование глубоких нейронных сетей           |   1 | 30000
   4 | Нейронные сети для анализа текстов              |   1 | 50000
   5 | Нейронные сети для анализа изображений            |   1 | 50000
   6 | Инженерия искусственного интеллекта             |   1 | 60000
   7 | Как стать DataScientist'ом                  |   2 |   0
   8 | Планирование карьеры в DataScience              |   2 | 2000
   9 | Области применения нейросетей: в какой развивать экспертность |   2 | 4000
   10 | Программирование глубоких нейронных сетей на Python     |   3 | 1000
   11 | Математика для DataScience                  |   3 | 2000
   12 | Основы визуализации данных                  |   3 | 500
   13 | Анализ временных рядов                    |     | 30000
  (13 rows)
testbd=> SELECT * FROM product_types;
   id | type_name
  ----+--------------
   1 | Онлайн-курс
   2 | Вебинар
   3 | Книга
   4 | Консультация
  (4 rows)
Task:
Объединение данных из нескольких таблиц в SELECT
# Написание Sql запросов.
Decision:
testbd=> SELECT products.name, product_types.type_name
testbd-> FROM products JOIN product_types
testbd-> ON products.type_id = product_types.id;
                 name               | type_name
  ---------------------------------------------------------------+-------------
   Основы искусственного интеллекта               | Онлайн-курс
   Технологии обработки больших данных             | Онлайн-курс
   Программирование глубоких нейронных сетей           | Онлайн-курс
   Нейронные сети для анализа текстов              | Онлайн-курс
   Нейронные сети для анализа изображений            | Онлайн-курс
   Инженерия искусственного интеллекта             | Онлайн-курс
   Как стать DataScientist'ом                  | Вебинар
   Планирование карьеры в DataScience              | Вебинар
   Области применения нейросетей: в какой развивать экспертность | Вебинар
   Программирование глубоких нейронных сетей на Python     | Книга
   Математика для DataScience                  | Книга
   Основы визуализации данных                  | Книга
  (12 rows)
Task:
Псевдонимы таблиц
# Написание Sql запросов.
Decision:
testbd=> SELECT p.name, t.type_name
testbd-> FROM products AS p JOIN product_types AS t
testbd-> ON p.type_id = t.id;
                 name               | type_name
  ---------------------------------------------------------------+-------------
   Основы искусственного интеллекта               | Онлайн-курс
   Технологии обработки больших данных             | Онлайн-курс
   Программирование глубоких нейронных сетей           | Онлайн-курс
   Нейронные сети для анализа текстов              | Онлайн-курс
   Нейронные сети для анализа изображений            | Онлайн-курс
   Инженерия искусственного интеллекта             | Онлайн-курс
   Как стать DataScientist'ом                  | Вебинар
   Планирование карьеры в DataScience              | Вебинар
   Области применения нейросетей: в какой развивать экспертность | Вебинар
   Программирование глубоких нейронных сетей на Python     | Книга
   Математика для DataScience                  | Книга
   Основы визуализации данных                  | Книга
  (12 rows)
Task:
Псевдонимы таблиц и столбцов
# Написание Sql запросов.
Decision:
testbd=> SELECT p.name AS product_name,
testbd-> t.type_name AS product_type,
testbd-> p.price AS product_price
testbd-> FROM products AS p JOIN product_types AS t
testbd-> ON p.type_id = t.id;
               product_name             | product_type | product_price
  ---------------------------------------------------------------+--------------+---------------
   Основы искусственного интеллекта               | Онлайн-курс |     15000
   Технологии обработки больших данных             | Онлайн-курс |     50000
   Программирование глубоких нейронных сетей           | Онлайн-курс |     30000
   Нейронные сети для анализа текстов              | Онлайн-курс |     50000
   Нейронные сети для анализа изображений            | Онлайн-курс |     50000
   Инженерия искусственного интеллекта             | Онлайн-курс |     60000
   Как стать DataScientist'ом                  | Вебинар   |       0
   Планирование карьеры в DataScience              | Вебинар   |     2000
   Области применения нейросетей: в какой развивать экспертность | Вебинар   |     4000
   Программирование глубоких нейронных сетей на Python     | Книга    |     1000
   Математика для DataScience                  | Книга    |     2000
   Основы визуализации данных                  | Книга    |     500
  (12 rows)
Task:
Фильтрация данных из нескольких таблиц
# Написание Sql запросов.
Decision:
testbd=> SELECT p.name AS product_name,
testbd-> t.type_name AS product_type,
testbd-> p.price AS product_price
testbd-> FROM products AS p JOIN product_types AS t
testbd-> ON p.type_id = t.id
testbd-> WHERE t.type_name='Онлайн-курс';
         product_name        | product_type | product_price
  -------------------------------------------+--------------+---------------
   Основы искусственного интеллекта     | Онлайн-курс |     15000
   Технологии обработки больших данных   | Онлайн-курс |     50000
   Программирование глубоких нейронных сетей | Онлайн-курс |     30000
   Нейронные сети для анализа текстов    | Онлайн-курс |     50000
   Нейронные сети для анализа изображений  | Онлайн-курс |     50000
   Инженерия искусственного интеллекта   | Онлайн-курс |     60000
  (6 rows)
testbd=> SELECT p.name AS product_name,
testbd-> t.type_name AS product_type,
testbd-> p.price AS product_price
testbd-> FROM products AS p JOIN product_types AS t
testbd-> ON p.type_id = t.id
testbd-> WHERE t.type_name = 'Вебинар'
testbd-> AND p.price = 0;
      product_name    | product_type | product_price
  ----------------------------+--------------+---------------
   Как стать DataScientist'ом | Вебинар   |       0
  (1 row)
Task:
Сортировка данных из нескольких таблиц
# Написание Sql запросов.
Decision:
testbd=> SELECT p.name AS product_name,
testbd-> t.type_name AS product_type,
testbd-> p.price AS product_price
testbd-> FROM products AS p JOIN product_types AS t
testbd-> ON p.type_id = t.id
testbd-> WHERE t.type_name='Онлайн-курс'
testbd-> ORDER BY p.price DESC;
         product_name        | product_type | product_price
  -------------------------------------------+--------------+---------------
   Инженерия искусственного интеллекта   | Онлайн-курс |     60000
   Технологии обработки больших данных   | Онлайн-курс |     50000
   Нейронные сети для анализа текстов    | Онлайн-курс |     50000
   Нейронные сети для анализа изображений  | Онлайн-курс |     50000
   Программирование глубоких нейронных сетей | Онлайн-курс |     30000
   Основы искусственного интеллекта     | Онлайн-курс |     15000
  (6 rows)
Task:
Типы JOIN
# Написание Sql запросов.
Decision:
testbd=> SELECT * FROM products;
   id |               name               | type_id | price
  ----+---------------------------------------------------------------+---------+-------
   1 | Основы искусственного интеллекта               |   1 | 15000
   2 | Технологии обработки больших данных             |   1 | 50000
   3 | Программирование глубоких нейронных сетей           |   1 | 30000
   4 | Нейронные сети для анализа текстов              |   1 | 50000
   5 | Нейронные сети для анализа изображений            |   1 | 50000
   6 | Инженерия искусственного интеллекта             |   1 | 60000
   7 | Как стать DataScientist'ом                  |   2 |   0
   8 | Планирование карьеры в DataScience              |   2 | 2000
   9 | Области применения нейросетей: в какой развивать экспертность |   2 | 4000
   10 | Программирование глубоких нейронных сетей на Python     |   3 | 1000
   11 | Математика для DataScience                  |   3 | 2000
   12 | Основы визуализации данных                  |   3 | 500
   13 | Анализ временных рядов                    |     | 30000
  (13 rows)
testbd=> SELECT * FROM product_types;
   id | type_name
  ----+--------------
   1 | Онлайн-курс
   2 | Вебинар
   3 | Книга
   4 | Консультация
  (4 rows)
Task:
Объединение таблиц в запросе
# Написание Sql запросов.
Decision:
testbd=> SELECT products.name, product_types.type_name
testbd-> FROM products JOIN product_types
testbd-> ON products.type_id = product_types.id;
                 name               | type_name
  ---------------------------------------------------------------+-------------
   Основы искусственного интеллекта               | Онлайн-курс
   Технологии обработки больших данных             | Онлайн-курс
   Программирование глубоких нейронных сетей           | Онлайн-курс
   Нейронные сети для анализа текстов              | Онлайн-курс
   Нейронные сети для анализа изображений            | Онлайн-курс
   Инженерия искусственного интеллекта             | Онлайн-курс
   Как стать DataScientist'ом                  | Вебинар
   Планирование карьеры в DataScience              | Вебинар
   Области применения нейросетей: в какой развивать экспертность | Вебинар
   Программирование глубоких нейронных сетей на Python     | Книга
   Математика для DataScience                  | Книга
   Основы визуализации данных                  | Книга
  (12 rows)
Task:
Внутреннее объединение
# Написание Sql запросов.
Decision:
testbd=> SELECT products.name, product_types.type_name
testbd-> FROM products INNER JOIN product_types
testbd-> ON products.type_id = product_types.id;
                 name               | type_name
  ---------------------------------------------------------------+-------------
   Основы искусственного интеллекта               | Онлайн-курс
   Технологии обработки больших данных             | Онлайн-курс
   Программирование глубоких нейронных сетей           | Онлайн-курс
   Нейронные сети для анализа текстов              | Онлайн-курс
   Нейронные сети для анализа изображений            | Онлайн-курс
   Инженерия искусственного интеллекта             | Онлайн-курс
   Как стать DataScientist'ом                  | Вебинар
   Планирование карьеры в DataScience              | Вебинар
   Области применения нейросетей: в какой развивать экспертность | Вебинар
   Программирование глубоких нейронных сетей на Python     | Книга
   Математика для DataScience                  | Книга
   Основы визуализации данных                  | Книга
  (12 rows)
Task:
Левое внешнее объединение
# Написание Sql запросов.
Decision:
testbd=> SELECT products.name, product_types.type_name
testbd-> FROM products LEFT OUTER JOIN product_types
testbd-> ON products.type_id = product_types.id;
                 name               | type_name
  ---------------------------------------------------------------+-------------
   Основы искусственного интеллекта               | Онлайн-курс
   Технологии обработки больших данных             | Онлайн-курс
   Программирование глубоких нейронных сетей           | Онлайн-курс
   Нейронные сети для анализа текстов              | Онлайн-курс
   Нейронные сети для анализа изображений            | Онлайн-курс
   Инженерия искусственного интеллекта             | Онлайн-курс
   Как стать DataScientist'ом                  | Вебинар
   Планирование карьеры в DataScience              | Вебинар
   Области применения нейросетей: в какой развивать экспертность | Вебинар
   Программирование глубоких нейронных сетей на Python     | Книга
   Математика для DataScience                  | Книга
   Основы визуализации данных                  | Книга
   Анализ временных рядов                    |
  (13 rows)
Task:
Правое внешнее объединение
# Написание Sql запросов.
Decision:
testbd=> SELECT products.name, product_types.type_name
testbd-> FROM products RIGHT OUTER JOIN product_types
testbd-> ON products.type_id = product_types.id;
                 name               | type_name
  ---------------------------------------------------------------+--------------
   Основы искусственного интеллекта               | Онлайн-курс
   Технологии обработки больших данных             | Онлайн-курс
   Программирование глубоких нейронных сетей           | Онлайн-курс
   Нейронные сети для анализа текстов              | Онлайн-курс
   Нейронные сети для анализа изображений            | Онлайн-курс
   Инженерия искусственного интеллекта             | Онлайн-курс
   Как стать DataScientist'ом                  | Вебинар
   Планирование карьеры в DataScience              | Вебинар
   Области применения нейросетей: в какой развивать экспертность | Вебинар
   Программирование глубоких нейронных сетей на Python     | Книга
   Математика для DataScience                  | Книга
   Основы визуализации данных                  | Книга
                                 | Консультация
  (13 rows)
Task:
Полное внешнее объединение
# Написание Sql запросов.
Decision:
testbd=> SELECT products.name, product_types.type_name
testbd-> FROM products FULL OUTER JOIN product_types
testbd-> ON products.type_id = product_types.id;
                 name               | type_name
  ---------------------------------------------------------------+--------------
   Основы искусственного интеллекта               | Онлайн-курс
   Технологии обработки больших данных             | Онлайн-курс
   Программирование глубоких нейронных сетей           | Онлайн-курс
   Нейронные сети для анализа текстов              | Онлайн-курс
   Нейронные сети для анализа изображений            | Онлайн-курс
   Инженерия искусственного интеллекта             | Онлайн-курс
   Как стать DataScientist'ом                  | Вебинар
   Планирование карьеры в DataScience              | Вебинар
   Области применения нейросетей: в какой развивать экспертность | Вебинар
   Программирование глубоких нейронных сетей на Python     | Книга
   Математика для DataScience                  | Книга
   Основы визуализации данных                  | Книга
   Анализ временных рядов                    |
                                 | Консультация
  (14 rows)
Task:
Перекрестное объединение
# Написание Sql запросов.
Decision:
testbd=> SELECT products.name, product_types.type_name
testbd-> FROM products CROSS JOIN product_types;
                 name               | type_name
  ---------------------------------------------------------------+--------------
   Основы искусственного интеллекта               | Онлайн-курс
   Технологии обработки больших данных             | Онлайн-курс
   Программирование глубоких нейронных сетей           | Онлайн-курс
   Нейронные сети для анализа текстов              | Онлайн-курс
   Нейронные сети для анализа изображений            | Онлайн-курс
   Инженерия искусственного интеллекта             | Онлайн-курс
   Как стать DataScientist'ом                  | Онлайн-курс
   Планирование карьеры в DataScience              | Онлайн-курс
   Области применения нейросетей: в какой развивать экспертность | Онлайн-курс
   Программирование глубоких нейронных сетей на Python     | Онлайн-курс
   Математика для DataScience                  | Онлайн-курс
   Основы визуализации данных                  | Онлайн-курс
   Анализ временных рядов                    | Онлайн-курс
   Основы искусственного интеллекта               | Вебинар
   Технологии обработки больших данных             | Вебинар
   Программирование глубоких нейронных сетей           | Вебинар
   Нейронные сети для анализа текстов              | Вебинар
   Нейронные сети для анализа изображений            | Вебинар
   Инженерия искусственного интеллекта             | Вебинар
   Как стать DataScientist'ом                  | Вебинар
   Планирование карьеры в DataScience              | Вебинар
   Области применения нейросетей: в какой развивать экспертность | Вебинар
   Программирование глубоких нейронных сетей на Python     | Вебинар
   Математика для DataScience                  | Вебинар
   Основы визуализации данных                  | Вебинар
   Анализ временных рядов                    | Вебинар
   Основы искусственного интеллекта               | Книга
   Технологии обработки больших данных             | Книга
   Программирование глубоких нейронных сетей           | Книга
   Нейронные сети для анализа текстов              | Книга
   Нейронные сети для анализа изображений            | Книга
   Инженерия искусственного интеллекта             | Книга
Task:
Объединить две таблицы
# Написание Sql запросов.
Decision:
Table: Person
+-------------+---------+
| Column Name | Type  |
+-------------+---------+
| personId  | int   |
| lastName  | varchar |
| firstName | varchar |
+-------------+---------+
Table: Address
+-------------+---------+
| Column Name | Type  |
+-------------+---------+
| addressId | int   |
| personId  | int   |
| city    | varchar |
| state   | varchar |
+-------------+---------+
Напишите SQL-запрос, чтобы сообщить имя, фамилию, город и состояние каждого человека в таблице Person. Если адрес идентификатора человека отсутствует в таблице адресов, вместо этого сообщите null.
Верните таблицу результатов в любом порядке.
Input:
Person table:
+----------+----------+-----------+
| personId | lastName | firstName |
+----------+----------+-----------+
| 1    | Wang   | Allen   |
| 2    | Alice  | Bob   |
+----------+----------+-----------+
Address table:
+-----------+----------+---------------+------------+
| addressId | personId | city     | state   |
+-----------+----------+---------------+------------+
| 1     | 2    | New York City | New York |
| 2     | 3    | Leetcode   | California |
+-----------+----------+---------------+------------+
Output:
+-----------+----------+---------------+----------+
| firstName | lastName | city     | state  |
+-----------+----------+---------------+----------+
| Allen   | Wang   | Null     | Null   |
| Bob   | Alice  | New York City | New York |
+-----------+----------+---------------+----------+
# Написание Sql запросов.
Decision:
SELECT p.FirstName, p.LastName, a.City, a.State
FROM Person AS p LEFT OUTER JOIN Address AS a
ON p.PersonId = a.PersonId;
  personId  lastName  firstName
0 1     Wang    Allen
1 2     Alice   Bob
  addressId personId  city      state
0 1     2     New York City New York
1 2     3     Leetcode    California
Task:
JOIN нескольких таблиц
В какие города летал Bruce Willis
# Написание Sql запросов.
Decision:
SELECT id FROM Passenger WHERE name = 'Bruce Willis';
SELECT trip FROM Pass_in_trip WHERE passenger = 1 OR passenger = 31;
SELECT town_to FROM Trip WHERE id IN (1100, 1123, 1181);
SELECT town_to
FROM Trip JOIN Pass_in_trip
ON Trip.id=Pass_in_trip.trip
JOIN Passenger
ON Pass_in_trip.passenger=Passenger.id
WHERE Passenger.name='Bruce Willis';
SELECT town_to
FROM Trip JOIN Pass_in_trip
ON Trip.id=Pass_in_trip.trip
JOIN Passenger
ON Pass_in_trip.passenger=Passenger.id
JOIN Company
ON Trip.company=Company.id
WHERE Passenger.name='Bruce Willis';
Task:
Схема базы данных
# Написание Sql запросов.
Decision:
testbd=> SELECT * FROM products;
   id |               name               | type_id | price
  ----+---------------------------------------------------------------+---------+-------
   1 | Основы искусственного интеллекта               |   1 | 15000
   2 | Технологии обработки больших данных             |   1 | 50000
   3 | Программирование глубоких нейронных сетей           |   1 | 30000
   4 | Нейронные сети для анализа текстов              |   1 | 50000
   5 | Нейронные сети для анализа изображений            |   1 | 50000
   6 | Инженерия искусственного интеллекта             |   1 | 60000
   7 | Как стать DataScientist'ом                  |   2 |   0
   8 | Планирование карьеры в DataScience              |   2 | 2000
   9 | Области применения нейросетей: в какой развивать экспертность |   2 | 4000
   10 | Программирование глубоких нейронных сетей на Python     |   3 | 1000
   11 | Математика для DataScience                  |   3 | 2000
   12 | Основы визуализации данных                  |   3 | 500
   13 | Анализ временных рядов                    |     | 30000
  (13 rows)
testbd=> SELECT * FROM product_types;
   id | type_name
  ----+--------------
   1 | Онлайн-курс
   2 | Вебинар
   3 | Книга
   4 | Консультация
  (4 rows)
testbd=> SELECT * FROM customers;
   id |   name   |     email    
  ----+-----------------+------------------------
   1 | Иван Петров   | petrov@mail.ru
   2 | Петр Иванов   | ivanov@gmail.com
   3 | Тимофей Сергеев | ts@gmail.com
   4 | Даша Корнеева | dasha.korneeva@mail.ru
   5 | Иван Иван   | petrov@mail.ru
   6 | Сергей Щербаков | user156@yandex.ru
   7 | Катя Самарина | kate@mail.ru
   8 | Андрей Котов  | a.kotoff@yandex.ru
  (8 rows)
testbd=> SELECT * FROM orders;
   id | order_date | customer_id
  ----+------------+-------------
   1 | 2021-01-11 |     1
   2 | 2021-01-15 |     3
   3 | 2021-01-20 |     4
   4 | 2021-01-12 |     2
   5 | 2021-01-25 |     8
   6 | 2021-01-30 |     1
  (6 rows)
testbd=> SELECT * FROM sales;
   product_id | order_id | quantity
  ------------+----------+----------
       3 |    1 |    1
       4 |    6 |    1
       10 |    2 |    2
       11 |    2 |    2
       3 |    3 |    1
       4 |    3 |    1
       5 |    3 |    1
       1 |    4 |    1
       6 |    5 |    1
  (9 rows)
Task:
Продукты в заказе
# Написание Sql запросов.
Decision:
testbd=> SELECT p.id,
testbd-> p.name,
testbd-> p.price,
testbd-> s.quantity,
testbd-> p.price * s.quantity AS total
testbd-> FROM products AS p JOIN sales AS s
testbd-> ON p.id = s.product_id
testbd-> WHERE s.order_id=2;
   id |            name             | price | quantity | total
  ----+-----------------------------------------------------+-------+----------+-------
   10 | Программирование глубоких нейронных сетей на Python | 1000 |    2 | 2000
   11 | Математика для DataScience             | 2000 |    2 | 4000
  (2 rows)
Task:
Все покупки заказчика
# Написание Sql запросов.
Decision:
testbd=> SELECT p.id,
testbd-> p.name,
testbd-> p.price,
testbd-> s.quantity,
testbd-> p.price * s.quantity AS total
testbd-> FROM products AS p JOIN sales AS s
testbd-> ON p.id = s.product_id
testbd-> JOIN orders AS o
testbd-> ON o.id = s.order_id
testbd-> WHERE o.customer_id=1;
   id |         name          | price | quantity | total
  ----+-------------------------------------------+-------+----------+-------
   3 | Программирование глубоких нейронных сетей | 30000 |    1 | 30000
   4 | Нейронные сети для анализа текстов    | 50000 |    1 | 50000
  (2 rows)
Task:
Подзапросы
# Написание Sql запросов.
Decision:
postgres=# SELECT * FROM products;
   id |               name               | type_id | price
  ----+---------------------------------------------------------------+---------+-------
   1 | Основы искусственного интеллекта               |   1 | 15000
   2 | Технологии обработки больших данных             |   1 | 50000
   3 | Программирование глубоких нейронных сетей           |   1 | 30000
   4 | Нейронные сети для анализа текстов              |   1 | 50000
   5 | Нейронные сети для анализа изображений            |   1 | 50000
   6 | Инженерия искусственного интеллекта             |   1 | 60000
   7 | Как стать DataScientist'ом                  |   2 |   0
   8 | Планирование карьеры в DataScience              |   2 | 2000
   9 | Области применения нейросетей: в какой развивать экспертность |   2 | 4000
   10 | Программирование глубоких нейронных сетей на Python     |   3 | 1000
   11 | Математика для DataScience                  |   3 | 2000
   12 | Основы визуализации данных                  |   3 | 500
   13 | Анализ временных рядов                    |     | 30000
  (13 строк)
postgres=# SELECT id, name, price
postgres-# FROM products
postgres-# WHERE price = (SELECT MAX(price)
postgres(# FROM products);
   id |        name         | price
  ----+-------------------------------------+-------
   6 | Инженерия искусственного интеллекта | 60000
  (1 строка)
postgres=# SELECT MAX(price) FROM products;
   max
  -------
   60000
  (1 строка)
postgres=# SELECT id, name, price
postgres-# FROM products
postgres-# WHERE price = 60000;
   id |        name         | price
  ----+-------------------------------------+-------
   6 | Инженерия искусственного интеллекта | 60000
  (1 строка)
Task:
Вывести информацию о самом дорогом продукте
# Написание Sql запросов.
Decision:
postgres=# SELECT id, name, price
postgres-# FROM products
postgres-# WHERE price = (SELECT MAX(price)
postgres(# FROM products);
   id |        name         | price
  ----+-------------------------------------+-------
   6 | Инженерия искусственного интеллекта | 60000
  (1 строка)
Task:
Вывести информацию о продуктах, которые были проданы хотя бы 1 раз
# Написание Sql запросов.
Decision:
postgres=# SELECT id, name, price
postgres-# FROM products
postgres-# WHERE id IN (SELECT product_id
postgres(# FROM sales);
   id |            name             | price
  ----+-----------------------------------------------------+-------
   1 | Основы искусственного интеллекта          | 15000
   3 | Программирование глубоких нейронных сетей     | 30000
   4 | Нейронные сети для анализа текстов         | 50000
   5 | Нейронные сети для анализа изображений       | 50000
   6 | Инженерия искусственного интеллекта         | 60000
   10 | Программирование глубоких нейронных сетей на Python | 1000
   11 | Математика для DataScience             | 2000
  (7 строк)
postgres=# SELECT * FROM sales;
   product_id | order_id | quantity
  ------------+----------+----------
       3 |    1 |    1
       4 |    6 |    1
       10 |    2 |    2
       11 |    2 |    2
       3 |    3 |    1
       4 |    3 |    1
       5 |    3 |    1
       1 |    4 |    1
       6 |    5 |    1
  (9 строк)
postgres=# SELECT product_id FROM sales;
   product_id
  ------------
       3
       4
       10
       11
       3
       4
       5
       1
       6
  (9 строк)
postgres=# SELECT id, name, price
postgres-# FROM products
postgres-# WHERE id IN (3, 4, 10, 11, 3, 4, 5, 1, 6);
   id |            name             | price
  ----+-----------------------------------------------------+-------
   1 | Основы искусственного интеллекта          | 15000
   3 | Программирование глубоких нейронных сетей     | 30000
   4 | Нейронные сети для анализа текстов         | 50000
   5 | Нейронные сети для анализа изображений       | 50000
   6 | Инженерия искусственного интеллекта         | 60000
   10 | Программирование глубоких нейронных сетей на Python | 1000
   11 | Математика для DataScience             | 2000
  (7 строк)
Task:
Индексы
Decision:
postgres=# SELECT * FROM superheroes;
   id |                 name                 |   align    |    eye     |     hair     |     gender     | appearances | year | universe
  ------+-----------------------------------------------------------------------+--------------------+--------------------+-----------------------+------------------------+-------------+------+----------
    1 | Spider-Man (Peter Parker)                       | Good Characters  | Hazel Eyes     | Brown Hair      | Male Characters    |    4043 | 1962 | marvel
    2 | Captain America (Steven Rogers)                   | Good Characters  | Blue Eyes     | White Hair      | Male Characters    |    3360 | 1941 | marvel
    3 | Wolverine (James \"Logan\" Howlett)                 | Neutral Characters | Blue Eyes     | Black Hair      | Male Characters    |    3061 | 1974 | marvel
    4 | Iron Man (Anthony \"Tony\" Stark)                   | Good Characters  | Blue Eyes     | Black Hair      | Male Characters    |    2961 | 1963 | marvel
    5 | Thor (Thor Odinson)                         | Good Characters  | Blue Eyes     | Blond Hair      | Male Characters    |    2258 | 1950 | marvel
    6 | Benjamin Grimm (Earth-616)                      | Good Characters  | Blue Eyes     | No Hair       | Male Characters    |    2255 | 1961 | marvel
    7 | Reed Richards (Earth-616)                       | Good Characters  | Brown Eyes     | Brown Hair      | Male Characters    |    2072 | 1961 | marvel
    8 | Hulk (Robert Bruce Banner)                      | Good Characters  | Brown Eyes     | Brown Hair      | Male Characters    |    2017 | 1962 | marvel
    9 | Scott Summers (Earth-616)                       | Neutral Characters | Brown Eyes     | Brown Hair      | Male Characters    |    1955 | 1963 | marvel
   10 | Jonathan Storm (Earth-616)                      | Good Characters  | Blue Eyes     | Blond Hair      | Male Characters    |    1934 | 1961 | marvel
   11 | Henry McCoy (Earth-616)                       | Good Characters  | Blue Eyes     | Blue Hair       | Male Characters    |    1825 | 1963 | marvel
   12 | Susan Storm (Earth-616)                       | Good Characters  | Blue Eyes     | Blond Hair      | Female Characters   |    1713 | 1961 | marvel
   13 | Ororo Munroe (Earth-616)                       | Good Characters  | Blue Eyes     | White Hair      | Female Characters   |    1512 | 1975 | marvel
   14 | Clinton Barton (Earth-616)                      | Good Characters  | Blue Eyes     | Blond Hair      | Male Characters    |    1394 | 1964 | marvel
   15 | Matthew Murdock (Earth-616)                     | Good Characters  | Blue Eyes     | Red Hair       | Male Characters    |    1338 | 1964 | marvel
   16 | Stephen Strange (Earth-616)                     | Good Characters  | Grey Eyes     | Black Hair      | Male Characters    |    1307 | 1963 | marvel
   17 | Mary Jane Watson (Earth-616)                     | Good Characters  | Green Eyes     | Red Hair       | Female Characters   |    1304 | 1965 | marvel
   18 | John Jonah Jameson (Earth-616)                    | Neutral Characters | Blue Eyes     | Black Hair      | Male Characters    |    1266 | 1963 | marvel
   19 | Robert Drake (Earth-616)                       | Good Characters  | Brown Eyes     | Brown Hair      | Male Characters    |    1265 | 1963 | marvel
   20 | Henry Pym (Earth-616)                         | Good Characters  | Blue Eyes     | Blond Hair      | Male Characters  
Task:
Запрос на поиск данных
# Написание Sql запросов.
Decision:
postgres=# SELECT * FROM superheroes;
postgres=# SELECT name, appearances, eye, hair
postgres-# FROM superheroes
postgres-# WHERE name = 'Iron Man (Anthony \"Tony\" Stark)';
         name        | appearances |  eye  |  hair
  -----------------------------------+-------------+-----------+------------
   Iron Man (Anthony \"Tony\" Stark) |    2961 | Blue Eyes | Black Hair
  (1 строка)
Task:
Создание индекса
# Написание Sql запросов.
Decision:
postgres=# CREATE INDEX superheroes_name_idx
postgres-# ON superheroes(name);
  CREATE INDEX
Task:
Использование индекса при запросе
# Написание Sql запросов.
Decision:
postgres=# SELECT name, appearances, eye, hair
postgres-# FROM superheroes
postgres-# WHERE name = 'Iron Man (Anthony \"Tony\" Stark)';
         name        | appearances |  eye  |  hair
  -----------------------------------+-------------+-----------+------------
   Iron Man (Anthony \"Tony\" Stark) |    2961 | Blue Eyes | Black Hair
  (1 строка)
Task:
Порядок сортировки данных в индексе
# Написание Sql запросов.
Decision:
postgres=# CREATE INDEX superheroes_appearances_idx
postgres-# ON superheroes(appearances DESC);
  CREATE INDEX
Task:
Ограничения
# Написание Sql запросов.
Decision:
postgres=# CREATE TABLE superheroes1(
id INT PRIMARY KEY,
name VARCHAR(100),
align VARCHAR(30),
eye VARCHAR(30),
hair VARCHAR(30),
gender VARCHAR(30),
appearances INT,
year INT,
universe VARCHAR(10)
);
  CREATE TABLE
postgres=# SELECT * FROM superheroes1;
   id | name | align | eye | hair | gender | appearances | year | universe
  ----+------+-------+-----+------+--------+-------------+------+----------
  (0 строк)
Task:
Непустые значения
# Написание Sql запросов.
Decision:
postgres=# CREATE TABLE superheroes2(
id INT PRIMARY KEY,
name VARCHAR(100) NOT NULL,
align VARCHAR(30),
eye VARCHAR(30),
hair VARCHAR(30),
gender VARCHAR(30),
appearances INT,
year INT,
universe VARCHAR(10)
);
  CREATE TABLE  
postgres=# SELECT * FROM superheroes2;
   id | name | align | eye | hair | gender | appearances | year | universe
  ----+------+-------+-----+------+--------+-------------+------+----------
  (0 строк)
Task:
Уникальные значения
# Написание Sql запросов.
Decision:
postgres=# CREATE TABLE superheroes3(
postgres(# id INT PRIMARY KEY,
postgres(# name VARCHAR(100) UNIQUE,
postgres(# align VARCHAR(30),
postgres(# eye VARCHAR(30),
postgres(# hair VARCHAR(30),
postgres(# gender VARCHAR(30),
postgres(# appearances INT,
postgres(# year INT,
postgres(# universe VARCHAR(10)
postgres(# );
CREATE TABLE
postgres=# SELECT * FROM superheroes3;
   id | name | align | eye | hair | gender | appearances | year | universe
  ----+------+-------+-----+------+--------+-------------+------+----------
  (0 строк)
Task:
Уникальные непустые значения
# Написание Sql запросов.
Decision:
postgres=# CREATE TABLE superheroes4(
postgres(# id INT PRIMARY KEY,
postgres(# name VARCHAR(100) UNIQUE NOT NULL,
postgres(# align VARCHAR(30),
postgres(# eye VARCHAR(30),
postgres(# hair VARCHAR(30),
postgres(# gender VARCHAR(30),
postgres(# appearances INT,
postgres(# year INT,
postgres(# universe VARCHAR(10)
postgres(# );
  CREATE TABLE
postgres=# SELECT * FROM superheroes4;
   id | name | align | eye | hair | gender | appearances | year | universe
  ----+------+-------+-----+------+--------+-------------+------+----------
  (0 строк)
Task:
Первичный ключ из нескольких полей
# Написание Sql запросов.
Decision:
postgres=# CREATE TABLE sales1(
postgres(# product_id INT,
postgres(# order_id INT,
postgres(# quantity INT,
postgres(# PRIMARY KEY(product_id, order_id)
postgres(# );
  CREATE TABLE
postgres=# SELECT * FROM sales1;
   product_id | order_id | quantity
  ------------+----------+----------
  (0 строк)
Task:
Первичный и внешний ключи
# Написание Sql запросов.
Decision:
postgres=# CREATE TABLE sales2(
product_id INT REFERENCES products(id),
order_id INT REFERENCES orders(id),
quantity INT,
PRIMARY KEY(product_id, order_id)
);
  CREATE TABLE
postgres=# SELECT * FROM sales2;
   product_id | order_id | quantity
  ------------+----------+----------
  (0 строк)
Task:
Представления с данными из нескольких таблиц
# Написание Sql запросов.
Decision:
postgres=# SELECT * FROM products;
   id |               name               | type_id | price
  ----+---------------------------------------------------------------+---------+-------
   1 | Основы искусственного интеллекта               |   1 | 15000
   2 | Технологии обработки больших данных             |   1 | 50000
   3 | Программирование глубоких нейронных сетей           |   1 | 30000
   4 | Нейронные сети для анализа текстов              |   1 | 50000
   5 | Нейронные сети для анализа изображений            |   1 | 50000
   6 | Инженерия искусственного интеллекта             |   1 | 60000
   7 | Как стать DataScientist'ом                  |   2 |   0
   8 | Планирование карьеры в DataScience              |   2 | 2000
   9 | Области применения нейросетей: в какой развивать экспертность |   2 | 4000
   13 | Анализ временных рядов                    |     | 30000
   10 | Программирование глубоких нейронных сетей на Python     |   3 | 1500
   11 | Математика для DataScience                  |   3 | 2500
   12 | Основы визуализации данных                  |   3 | 1000
  (13 строк)
postgres=# CREATE VIEW products_v
postgres-# AS SELECT p.id AS id,
postgres-# p.name AS product_name,
postgres-# t.type_name AS product_type,
postgres-# p.price AS product_price
postgres-# FROM products AS p JOIN product_types AS t
postgres-# ON p.type_id = t.id;
  CREATE VIEW
postgres=# SELECT * FROM products_v;
   id |             product_name             | product_type | product_price
  ----+---------------------------------------------------------------+--------------+---------------
   1 | Основы искусственного интеллекта               | Онлайн-курс |     15000
   2 | Технологии обработки больших данных             | Онлайн-курс |     50000
   3 | Программирование глубоких нейронных сетей           | Онлайн-курс |     30000
   4 | Нейронные сети для анализа текстов              | Онлайн-курс |     50000
   5 | Нейронные сети для анализа изображений            | Онлайн-курс |     50000
   6 | Инженерия искусственного интеллекта             | Онлайн-курс |     60000
   7 | Как стать DataScientist'ом                  | Вебинар   |       0
   8 | Планирование карьеры в DataScience              | Вебинар   |     2000
   9 | Области применения нейросетей: в какой развивать экспертность | Вебинар   |     4000
   10 | Программирование глубоких нейронных сетей на Python     | Книга    |     1500
   11 | Математика для DataScience                  | Книга    |     2500
   12 | Основы визуализации данных                  | Книга    |     1000
  (12 строк)
Task:
Материализованные представления
# Написание Sql запросов.
Decision:
postgres=# CREATE MATERIALIZED VIEW products_v1
AS SELECT p.id AS id,
p.name AS product_name,
t.type_name AS product_type,
p.price AS product_price
FROM products AS p JOIN product_types AS t
ON p.type_id = t.id;
  SELECT 12
postgres=# SELECT * FROM products_v1;
   id |             product_name             | product_type | product_price
  ----+---------------------------------------------------------------+--------------+---------------
   1 | Основы искусственного интеллекта               | Онлайн-курс |     15000
   2 | Технологии обработки больших данных             | Онлайн-курс |     50000
   3 | Программирование глубоких нейронных сетей           | Онлайн-курс |     30000
   4 | Нейронные сети для анализа текстов              | Онлайн-курс |     50000
   5 | Нейронные сети для анализа изображений            | Онлайн-курс |     50000
   6 | Инженерия искусственного интеллекта             | Онлайн-курс |     60000
   7 | Как стать DataScientist'ом                  | Вебинар   |       0
   8 | Планирование карьеры в DataScience              | Вебинар   |     2000
   9 | Области применения нейросетей: в какой развивать экспертность | Вебинар   |     4000
   10 | Программирование глубоких нейронных сетей на Python     | Книга    |     1500
   11 | Математика для DataScience                  | Книга    |     2500
   12 | Основы визуализации данных                  | Книга    |     1000
  (12 строк)
Task:
Обновление материализованных представлений
# Написание Sql запросов.
Decision:
postgres=# REFRESH MATERIALIZED VIEW products_v1;
  REFRESH MATERIALIZED VIEW
postgres=# SELECT * FROM products_v1;
   id |             product_name             | product_type | product_price
  ----+---------------------------------------------------------------+--------------+---------------
   1 | Основы искусственного интеллекта               | Онлайн-курс |     15000
   2 | Технологии обработки больших данных             | Онлайн-курс |     50000
   3 | Программирование глубоких нейронных сетей           | Онлайн-курс |     30000
   4 | Нейронные сети для анализа текстов              | Онлайн-курс |     50000
   5 | Нейронные сети для анализа изображений            | Онлайн-курс |     50000
   6 | Инженерия искусственного интеллекта             | Онлайн-курс |     60000
   7 | Как стать DataScientist'ом                  | Вебинар   |       0
   8 | Планирование карьеры в DataScience              | Вебинар   |     2000
   9 | Области применения нейросетей: в какой развивать экспертность | Вебинар   |     4000
   10 | Программирование глубоких нейронных сетей на Python     | Книга    |     1500
   11 | Математика для DataScience                  | Книга    |     2500
   12 | Основы визуализации данных                  | Книга    |     1000
  (12 строк)
Task:
Удаление представлений
# Написание Sql запросов.
Decision:
postgres=# DROP VIEW products_v;
  DROP VIEW
postgres=# SELECT * FROM products_v;
  ОШИБКА: отношение "products_v" не существует
  СТРОКА 1: SELECT * FROM products_v;
            ^
Task:
Удаление материализованных представлений
# Написание Sql запросов.
Decision:
postgres=# DROP MATERIALIZED VIEW products_v1;
  DROP MATERIALIZED VIEW
postgres=# SELECT * FROM products_v1;
  ОШИБКА: отношение "products_v1" не существует
  СТРОКА 1: SELECT * FROM products_v1;
Source:
# https://www.asozykin.ru/?ysclid=lk9eaatbqj18673257
Task:
University Structure.
Перечень работ
1. Разработка проекта БД и реализация его в реляционной СУБД
2. Создание и модификация БД, занесение и редактирование данных
3. Работа с данными
4. Разработка прикладных программ
5. Создание меню для пользователя
Состав проекта БД по предметной области
1. Графическая диаграмма объектов – связей
2. Спецификации атрибутов (тип, размер, область допустимых значений (ОДЗ))
3. Среди типов связей обязательно присутствие типа 1:М
4. Среди значений ОДЗ должны присутствовать ограничения на числовые атрибуты и значения двух числовых атрибутов
5. Структура таблиц по БД
Перечень индивидуальных заданий на развитие программы
1. Модифицировать программу для поиска по номеру записи.
2. Модифицировать программу для поиска по числовым полям
3. Модифицировать программу для поиска по полям типа «дата»
4. Модифицировать программу для поиска с помощью индексных файлов по символьным полям
5. Модифицировать программу для поиска с помощью индексных файлов по числовым полям
6. Модифицировать программу для поиска с помощью индексных файлов по полям типа «дата»
7. Модифицировать программу для одновременного выбора группы записей, удовлетворяющих критерию на числовые поля
8. Модифицировать программу для одновременного выбора группы записей, удовлетворяющих критерию на символьные поля
9. Модифицировать программу для одновременного выбора группы записей, удовлетворяющих критерию на поля тип «дата»
Перечень индивидуальных заданий по модификации меню
1. При выборе файла данных предоставить возможность сделать резервную копию
2. Реализовать разветвленный просмотр файла: всего и группы записей
3. Удаление данных: группы записей и отдельные записи
4. Удаление данных: отдельной записи и первой записи
5. Удаление данных: группы записей, последней записи
6, 7, 8 Разветвленное редактирование
9. Удаление данных: пометка к удалению и фактическое удаление
10. 13. Факультет: кадры
Фамилии, дом. адреса, телефоны преподавателей и студентов, номера учебных групп студентов с указанием количества студентов в группах, из них – обучаемых с ДОУ; для преподавателей – наименование кафедры и должность. По кафедрам сведения о количестве преподавателей, их должностях, ученых званиях, фамилия и.о. заведующего кафедрой. Для работников деканата выделить должность и номер рабочего телефона
В примечаниях: номер аудитории деканата, часы приема заведующего кафедрой, декана и заместителя декана
Добавляются: по вспомогательному персоналу – фамилии, должности, кафедры.
Убира.тся: номера телефонов заменяются на 11-значные
13. Факультет: кадры
Фамилии, дом. адреса, телефоны преподавателей и студентов, номера учебных групп студентов с указанием количества студентов в группах, из них – обучаемых с ДОУ; для преподавателей – наименование кафедры и должность. По кафедрам сведения о количестве преподавателей, их должностях, ученых званиях, фамилия и.о. заведующего кафедрой. Для работников деканата выделить должность и номер рабочего телефона
В примечаниях: номер аудитории деканата, часы приема заведующего кафедрой, декана и заместителя декана
Добавляются: по вспомогательному персоналу – фамилии, должности, кафедры.
Убира.тся: номера телефонов заменяются на 11-значные
13. Факультет: кадры
Фамилии, дом. адреса, телефоны преподавателей и студентов, номера учебных групп студентов с указанием количества студентов в группах, из них – обучаемых с ДОУ; для преподавателей – наименование кафедры и должность. По кафедрам сведения о количестве преподавателей, их должностях, ученых званиях, фамилия и.о. заведующего кафедрой. Для работников деканата выделить должность и номер рабочего телефона
В примечаниях: номер аудитории деканата, часы приема заведующего кафедрой, декана и заместителя декана
Добавляются: по вспомогательному персоналу – фамилии, должности, кафедры.
Убираются: номера телефонов заменяются на 11-значные
14. Аудиторные занятия. Учебный процесс
Фамилии, дом. адреса, телефоны студентов, номера учебных групп с количеством студентов в них, в том числе обучающихся на условиях ПВЗ, наименования дисциплин с количеством часов, из них лекционных, практических, лабораторных. Для преподавателей также кафедра и должность, ч указанием дисциплин, которые он ведет. Для групп указать, какие дисциплины ведутся, в каком семестре, номер аудитории
В примечаниях: список литературы по дисциплинам
Добавляются: перечень лабораторных работ по дисциплинам с лабораторным практикумами, номер учебной лаборатории
Убираются: номер аудитории.
14. Аудиторные занятия. Учебный процесс
Фамилии, дом. адреса, телефоны студентов, номера учебных групп с количеством студентов в них, в том числе обучающихся на условиях ПВЗ, наименования дисциплин с количеством часов, из них лекционных, практических, лабораторных. Для преподавателей также кафедра и должность, ч указанием дисциплин, которые он ведет. Для групп указать, какие дисциплины ведутся, в каком семестре, номер аудитории
В примечаниях: список литературы по дисциплинам
Добавляются: перечень лабораторных работ по дисциплинам с лабораторным практикумами, номер учебной лаборатории
Убираются: номер аудитории.
14. Аудиторные занятия. Учебный процесс
Фамилии, дом. адреса, телефоны студентов, номера учебных групп с количеством студентов в них, в том числе обучающихся на условиях ПВЗ, наименования дисциплин с количеством часов, из них лекционных, практических, лабораторных. Для преподавателей также кафедра и должность, ч указанием дисциплин, которые он ведет. Для групп указать, какие дисциплины ведутся, в каком семестре, номер аудитории
В примечаниях: список литературы по дисциплинам
Добавляются: перечень лабораторных работ по дисциплинам с лабораторным практикумами, номер учебной лаборатории
Убираются: номер аудитории.
# Написание Sql запросов.
Decision:
-
Task:
Таблица students.
Создадим таблицу students, задав атрибуты group_id (числовое значение), name (строковый тип) и dept_id (числовое значение)
# Написание Sql запросов.
Decision:
starter=# create table students (
starter(# group_id integer,
starter(# name varchar(50),
starter(# dept_id int);
Task:
Создать таблицу da_course
с 5 полями:
course_nm -> тип строка
student_id -> тип число
course_begin_dt -> тип дата
course_end_dt -> тип дата
schedule_time -> тип время
# Написание Sql запросов.
Decision:
starter=# create table da_course (
starter(# cours_nm varchar,
starter(# student_id int,
starter(# course_begin_dt date,
starter(# cours_end_dt date,
starter(# shedule_time time);
Task:
Создать таблицу da_course_new, по аналогии с da_course, но сразу заполнить строку данными.
# Написание Sql запросов.
Decision:
starter=# create table
starter-# da_course_new_1 as select
starter-#   'DE13 SQL' course_nm,
starter-#   100 student_id,
starter-#   '2022-11-18' course_begin_dt,
starter-#   null course_end_dt,
starter-#   '19:00' schedule_time;
SELECT 1
starter=# select * from da_course_new_1;
course_nm | student_id | course_begin_dt | course_end_dt | schedule_time
-----------+------------+-----------------+---------------+---------------
DE13 SQL |    100 | 2022-11-18   |       | 19:00
(1 строка)
Task:
Создать таблицу students_new по аналогии с таблицей students и загрузить в нее сотрудников из таблицы employees, работающих в 30 и 60 департаментах. Зачислить их в группу номер 1.
# Написание Sql запросов.
Decision:
create table
students_new as select
  1 group_id,
  first_name name,
  department_id dept_id
from employees
where dept_id in (30, 60);
Task:
Добавьте в таблицу da_course поле my_name тип строка длиной 50 и значением по умолчанию.
# Написание Sql запросов.
Decision:
alter table da_course add my_name varchar(50) default 'unnamed';
Task:
Переименуйте поле my_name в student_nm.
# Написание Sql запросов.
Decision:
starter=# alter table da_course
starter-# rename column my_name to student_nm;
Task:
Переименуйте табличку da_course в da08_course
# Написание Sql запросов.
Decision:
starter=# alter table da_course
starter-# rename to da08_course;
Task:
Добавить в таблицу students студента по имени Alex из 100 департамента и зачислить его во 2 группу
# Написание Sql запросов.
Decision:
INSERT INTO students
(group_id, name, dept_id)
VALUES (2, 'Alex', 100)
Task:
Вставьте в таблицу da08_course 1 строку
course_nm -> 'SQL Base'
student_cnt -> 30
course_begin_dt -> '2022-10-10'
course_end_dt -> '5999-12-31'
schedule_time -> '10:00:00'
Придумайте и вставьте еще одну строку
# Написание Sql запросов.
Decision:
starter=# insert into da08_course (cours_nm, student_id, course_begin_dt, cours_end_dt, shedule_time)
starter-# values ('SQL Base', 30, '2022-10-10', '2999-12-31', '10:00');
starter=# insert into da08_course (cours_nm, student_id, course_begin_dt, cours_end_dt, shedule_time)
starter-# values ('SQL Edv', 40, '2022-11-18', '2999-12-31', '19:00');
starter=# insert into da08_course (cours_nm, student_id, course_begin_dt, cours_end_dt, shedule_time)
starter-# values ('Python Base', 30, '2022-12-10', '2999-12-31', '10:00'),
starter-# ('Python Edv', 40, '2023-01-18', '2999-12-31', '19:00');
Task:
Изменить группу, в которой обучается Алекс, на 3 (таблица students)
# Написание Sql запросов.
Decision:
UPDATE students
SET group_id = 3
WHERE name = 'Alex';
Task:
В таблице da08_course обновите название курса 'SQL Base' на 'Base SQL'
# Написание Sql запросов.
Decision:
starter=# update da08_course
starter-# set cours_nm = 'Base SQL'
starter-# where cours_nm='SQL Base';
Task:
В таблице da08_course обновите для всех строк поле окончания курса на '2999-12-31'
# Написание Sql запросов.
Decision:
starter=# update da08_course set cours_end_dt = '2888-12-31';
Task:
Вставим в таблицу students новую запись (3, 'Barankin', 10);
Удалим из таблицы students все строки, где номер департамента больше 30;
# Написание Sql запросов.
Decision:
starter=# insert into students
starter-# values (3, 'Barankin', 10);
starter=# delete from students
starter-# where dept_id>30;
Task:
Удалите из таблицы da08_course все записи
# Написание Sql запросов.
Decision:
starter=# delete from da08_course;
Task:
Таблица persons. необходимо создать таблицу persons с полями:
-id,
-name,
-age,
-order_total
-добавьте 5 записей;
удалите записи, в которых возраст менее 18 лет ;
для конкретного id увеличьте order_total на 500;
уменьшите возраст на 2 года всем тем, у кого последняя буква в имени а;
удалите таблицу persons;
# Написание Sql запросов.
Decision:
starter=# create table persons (
starter(# id serial,
starter(# name varchar(50),
starter(# age smallint,
starter(# order_total int
starter(# );
starter=# insert into persons
starter-#   (name,
starter(#   age,
starter(#   order_total)
starter-# values
starter-#   ('Dmitry', 34, 200),
starter-#   ('Monika', 24, 205),
starter-#   ('Moko', 45, 234),
starter-#   ('Yoko', 52, 213),
starter-#   ('Amy', 27, 231);
starter=# delete from persons where age<30;
starter=# update persons
starter-# set order_total = order_total + 500
starter-# where id = 2;
starter=# UPDATE persons SET age = age - 2 WHERE name like '%o' ;
Task:
Таблица Алфавит. Создать таблицу alphabet c полем letter char(1);
Вставить в нее все буквы русского алфавита;
Добавить новое поле letter_type varchar(20);
Заполните это поле типом буквы (гласная или согласная);
# Написание Sql запросов.
Decision:
starter=# create table alphabet (letter char(1));
starter=# insert into alphabet (letter) values ('А');
starter=# insert into alphabet (letter) values ('Б');
starter=# insert into alphabet (letter) values ('В');
starter=# insert into alphabet (letter) values ('Г');
starter=# insert into alphabet (letter) values ('Д');
starter=# insert into alphabet (letter) values ('Ё');
starter=# insert into alphabet (letter) values ('Е');
starter=# insert into alphabet (letter) values ('Ж');
starter=# insert into alphabet (letter) values ('З');
starter=# insert into alphabet (letter) values ('И');
starter=# insert into alphabet (letter) values ('Й');
starter=# insert into alphabet (letter) values ('К');
starter=# insert into alphabet (letter) values ('Л');
starter=# insert into alphabet (letter) values ('М');
starter=# insert into alphabet (letter) values ('Н');
starter=# insert into alphabet (letter) values ('О');
starter=# insert into alphabet (letter) values ('П');
starter=# insert into alphabet (letter) values ('Р');
starter=# insert into alphabet (letter) values ('С');
starter=# insert into alphabet (letter) values ('Т');
starter=# insert into alphabet (letter) values ('У');
starter=# insert into alphabet (letter) values ('Ф');
starter=# insert into alphabet (letter) values ('Х');
starter=# insert into alphabet (letter) values ('Ц');
starter=# insert into alphabet (letter) values ('Ч');
starter=# insert into alphabet (letter) values ('Ш');
starter=# insert into alphabet (letter) values ('Щ');
starter=# insert into alphabet (letter) values ('Ъ');
starter=# insert into alphabet (letter) values ('Ы');
starter=# insert into alphabet (letter) values ('Ь');
starter=# insert into alphabet (letter) values ('Э');
starter=# insert into alphabet (letter) values ('Ю');
starter=# insert into alphabet (letter) values ('Я');
starter=# ALTER TABLE alphabet
starter-# add letter_type varchar(20);
starter=# select * from alphabet;
letter | letter_type
--------+-------------
А   | гласная
Б   | согласная
В   | согласная
Г   | согласная
Д   | согласная
Ё   | гласная
Е   | гласная
Ж   | согласная
З   | согласная
И   | гласная
Й   | согласная
К   | согласная
Л   | согласная
М   | согласная
Н   | согласная
О   | гласная
П   | согласная
Р   | согласная
С   | согласная
Т   | согласная
У   | гласная
Ф   | согласная
Х   | согласная
Ц   | согласная
Ч   | согласная
Ш   | согласная
Щ   | согласная
Ъ   | нет звуков
Ы   | гласная
Ь   | нет звуков
Э   | гласная
Ю   | гласная
Я   | гласная
(33 строки)
Task:
Таблица Классы.
Создать таблицу classes;
Вставьте в нее все записи из приложенного файла (для таблицы classes);
Для каждого класса выведите уровень успеваемости. Если среднегодовая отметка  выше 3, то уровень успеваемости принимает значение 'выше среднего', иначе 'ниже   среднего';
# Написание Sql запросов.
Decision:
starter=# create table classes
starter-# (class_num varchar(4),
starter(# avg_year_mark int,
starter(# avg_month_mark int,
starter(# avg_term_mark int);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('1 А', 4, 4, 5);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('1 Б', 5, 5, 4);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('2 А', 5, 5, 4);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('2 Б', NULL, 5, 5);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('3 А', 4, 4, 5);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('3 Б', 4, 3, 4);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('4 А', 5, 4, 3);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('4 Б', 5, 4, 4);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('5 А', 5, 4, 5);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('5 Б', 4, 5, 3);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('6 А', 3, 3, 3);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('6 Б', 4, 5, 4);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('7 А', 5, 5, 4);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('7 Б', 4, 3, 4);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('8 А', 3, 3, 4);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('8 Б', 5, 4, 5);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('9 А', 3, 3, 4);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('9 Б', NULL, 5, 5);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('10 А', 3, 4, 3);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('10 Б', 5, 5, 4);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('11 А', 5, 4, 4);
starter=# insert into classes (class_num, avg_year_mark, avg_month_mark, avg_term_mark) values ('11 Б', 5, 5, 5);
starter=# select * from classes;
class_num | avg_year_mark | avg_month_mark | avg_term_mark
-----------+---------------+----------------+---------------
1 А   |       4 |       4 |       5
1 Б   |       5 |       5 |       4
2 А   |       5 |       5 |       4
2 Б   |       |       5 |       5
3 А   |       4 |       4 |       5
3 Б   |       4 |       3 |       4
4 А   |       5 |       4 |       3
4 Б   |       5 |       4 |       4
5 А   |       5 |       4 |       5
5 Б   |       4 |       5 |       3
6 А   |       3 |       3 |       3
6 Б   |       4 |       5 |       4
7 А   |       5 |       5 |       4
7 Б   |       4 |       3 |       4
8 А   |       3 |       3 |       4
8 Б   |       5 |       4 |       5
9 А   |       3 |       3 |       4
9 Б   |       |       5 |       5
10 А   |       3 |       4 |       3
10 Б   |       5 |       5 |       4
11 А   |       5 |       4 |       4
11 Б   |       5 |       5 |       5
(22 строки)
starter=# select
starter-# class_num,
starter-# avg_year_mark,
starter-# case
starter-#   when avg_year_mark>3 and avg_year_mark<=5
starter-#   then 'выше среднего'
starter-#   when avg_year_mark<=3 and avg_year_mark>=1
starter-#   then 'ниже среднего'
starter-#   when avg_year_mark is null
starter-#   then 'отметка не выставлена'
starter-#   else 'ошибка значения'
starter-# end as progress
starter-# from classes;
class_num | avg_year_mark |   progress
-----------+---------------+-----------------------
1 А   |       4 | выше среднего
1 Б   |       5 | выше среднего
2 А   |       5 | выше среднего
2 Б   |       | отметка не выставлена
3 А   |       4 | выше среднего
3 Б   |       4 | выше среднего
4 А   |       5 | выше среднего
4 Б   |       5 | выше среднего
5 А   |       5 | выше среднего
5 Б   |       4 | выше среднего
6 А   |       3 | ниже среднего
6 Б   |       4 | выше среднего
7 А   |       5 | выше среднего
7 Б   |       4 | выше среднего
8 А   |       3 | ниже среднего
8 Б   |       5 | выше среднего
9 А   |       3 | ниже среднего
9 Б   |       | отметка не выставлена
10 А   |       3 | ниже среднего
10 Б   |       5 | выше среднего
11 А   |       5 | выше среднего
11 Б   |       5 | выше среднего
(22 строки)
Task:
Для каждого класса из таблицы classes выведите наименьшее из трех средних значений (Если число не заполнено, то вместо него используется число 3)
# Написание Sql запросов.
Decision:
starter=# select
starter-# class_num,
starter-# avg_year_mark,
starter-# avg_month_mark,
starter-# avg_term_mark,
starter-# case
starter-#   when coalesce(avg_year_mark,3)<=coalesce(avg_month_mark ,3)
starter-#   and coalesce(avg_year_mark,3)<=coalesce(avg_term_mark,3)
starter-#     then coalesce(avg_year_mark,3)
starter-#   when coalesce(avg_month_mark,3)<=coalesce(avg_year_mark ,3)
starter-#   and coalesce(avg_month_mark,3)<=coalesce(avg_term_mark,3)
starter-#     then coalesce(avg_month_mark,3)
starter-#   else coalesce(avg_term_mark,3)
starter-# end min_val
starter-# from classes;
class_num | avg_year_mark | avg_month_mark | avg_term_mark | min_val
-----------+---------------+----------------+---------------+---------
1 А   |       4 |       4 |       5 |   4
1 Б   |       5 |       5 |       4 |   4
2 А   |       5 |       5 |       4 |   4
2 Б   |       |       5 |       5 |   3
3 А   |       4 |       4 |       5 |   4
3 Б   |       4 |       3 |       4 |   3
4 А   |       5 |       4 |       3 |   3
4 Б   |       5 |       4 |       4 |   4
5 А   |       5 |       4 |       5 |   4
5 Б   |       4 |       5 |       3 |   3
6 А   |       3 |       3 |       3 |   3
6 Б   |       4 |       5 |       4 |   4
7 А   |       5 |       5 |       4 |   4
7 Б   |       4 |       3 |       4 |   3
8 А   |       3 |       3 |       4 |   3
8 Б   |       5 |       4 |       5 |   4
9 А   |       3 |       3 |       4 |   3
9 Б   |       |       5 |       5 |   3
10 А   |       3 |       4 |       3 |   3
10 Б   |       5 |       5 |       4 |   4
11 А   |       5 |       4 |       4 |   4
11 Б   |       5 |       5 |       5 |   5
starter=# select
starter-# case
starter-#   when avg_year_mark<=avg_month_mark
starter-#   and coalesce(avg_year_mark,3)<=coalesce(avg_term_mark,3)
starter-#     then coalesce(avg_year_mark,3)
starter-#   when coalesce(avg_month_mark,3)<=coalesce(avg_year_mark ,3)
starter-#   and coalesce(avg_month_mark,3)<=coalesce(avg_term_mark,3)
starter-#     then coalesce(avg_month_mark,3)
starter-#   when coalesce(avg_term_mark,3)<=coalesce(avg_month_mark ,3)
starter-#   and coalesce(avg_term_mark,3)<=coalesce(avg_year_mark,3)
starter-#     then coalesce(avg_term_mark,3)
starter-# end min_val
starter-# from
starter-# (select
starter(#   class_num,
starter(#   coalesce(avg_year_mark,3) as avg_year_mark,
starter(#   coalesce(avg_month_mark,3) as avg_month_mark,
starter(#   coalesce(avg_term_mark,3) as avg_term_mark
starter(# from classes) as minval;
min_val
---------
4
4
4
3
4
3
3
4
4
3
3
4
4
3
3
4
3
3
3
4
4
5
(22 строки)
Task:
Таблица circles.
Создать таблицу circles;
Вставьте в нее все записи из приложенного файла (для таблицы circles);
Для каждого круга рассчитайте и выведите требуемый показатель:
l (или L) – длина окружности (2*pi*R);
s (или S) – площадь круга (pi*R*R)
v (или V) – объем шара ((4/3)*pi*R*R*R)
# Написание Sql запросов.
Decision:
starter=# create table circles
starter-# (id varchar(20),
starter(# radius int,
starter(# value_cd varchar(5));
starter=# insert into circles (id, radius, value_cd) values ('MU0000000020', 40, 's');
starter=# insert into circles (id, radius, value_cd) values ('MU0000000060', 44, 'L');
starter=# insert into circles (id, radius, value_cd) values ('MT0000000075', 15, 'V');
starter=# insert into circles (id, radius, value_cd) values ('MT0000000010', 17, 's');
starter=# insert into circles (id, radius, value_cd) values ('MU0000000048', 36, 'v');
starter=# insert into circles (id, radius, value_cd) values ('MU0000000077', 33, 'l');
starter=# insert into circles (id, radius, value_cd) values ('MU0000000088', 46, 's');
starter=# insert into circles (id, radius, value_cd) values ('MU0000000056', 19, 'V');
starter=# insert into circles (id, radius, value_cd) values ('MP0000000090', 42, 'v');
starter=# insert into circles (id, radius, value_cd) values ('MU0000000084', 49, 'S');
starter=# insert into circles (id, radius, value_cd) values ('MU0000000030', 45, 'v');
starter=# insert into circles (id, radius, value_cd) values ('MP0000000018', 37, 'S');
starter=# insert into circles (id, radius, value_cd) values ('MU0000000026', 37, 'l');
starter=# insert into circles (id, radius, value_cd) values ('MU0000000053', 24, 'V');
starter=# insert into circles (id, radius, value_cd) values ('MB0000000079', 8, 'NULL');
starter=# insert into circles (id, radius, value_cd) values ('MU0000000042', 47, 's');
starter=# insert into circles (id, radius, value_cd) values ('MU0000000056', 42, 'l');
starter=# insert into circles (id, radius, value_cd) values ('MT0000000142', 40, 'v');
starter=# insert into circles (id, radius, value_cd) values ('MT0000000065', 34, 'V');
starter=# insert into circles (id, radius, value_cd) values ('MT000000006', 47, 's');
starter=# insert into circles (id, radius, value_cd) values ('MU000000009', 28, 'S');
starter=# insert into circles (id, radius, value_cd) values ('MU0000000039', 20, 'L');
starter=# select * from circles;
id   | radius | value_cd
--------------+--------+----------
MU0000000020 |   40 | s
MU0000000060 |   44 | L
MT0000000075 |   15 | V
MT0000000010 |   17 | s
MU0000000048 |   36 | v
MU0000000077 |   33 | l
MU0000000088 |   46 | s
MU0000000056 |   19 | V
MP0000000090 |   42 | v
MU0000000084 |   49 | S
MU0000000030 |   45 | v
MP0000000018 |   37 | S
MU0000000026 |   37 | l
MU0000000053 |   24 | V
MB0000000079 |   8 | NULL
MU0000000042 |   47 | s
MU0000000056 |   42 | l
MT0000000142 |   40 | v
MT0000000065 |   34 | V
MT000000006 |   47 | s
MU000000009 |   28 | S
MU0000000039 |   20 | L
(22 строки)
starter=# select
starter-# id,
starter-# case
starter-#   when value_cd in ('l','L')
starter-#   then radius*3.14*2
starter-#   when value_cd in ('s','S')
starter-#   then radius*radius*3.14
starter-#   when value_cd in ('v','V')
starter-#   then radius*radius*radius*3.14*(4/3)
starter-#   else value_cd
starter-# end as result
starter-# from circles;
id result
MU0000000020  5024
MU0000000060  276.32
MT0000000075  10597.5
MT0000000010  907.46
MU0000000048  146499.84
MU0000000077  207.24
MU0000000088  6644.240000000001
MU0000000056  21537.260000000002
MP0000000090  232636.32
MU0000000084  7539.14
MU0000000030  286132.5
MP0000000018  4298.66
MU0000000026  232.36
MU0000000053  43407.36
MB0000000079  NULL
MU0000000042  6936.26
MU0000000056  263.76
MT0000000142  200960
MT0000000065  123414.56
MT000000006 6936.26
MU000000009 2461.76
MU0000000039  125.60000000000001
Task:
Для таблицы circles определить систему источника данных и номер круга: MU0000000001
MU - система источника, 1 - номер круга
# Написание Sql запросов.
Decision:
starter=# select
starter-# id,
starter-# rtrim(substr(id,1,2),'0') source_system,
starter-# ltrim(substr(id,3), '0') circle_number
starter-# from circles;
id   | source_system | circle_number
--------------+---------------+---------------
MU0000000020 | MU      | 20
MU0000000060 | MU      | 60
MT0000000075 | MT      | 75
MT0000000010 | MT      | 10
MU0000000048 | MU      | 48
MU0000000077 | MU      | 77
MU0000000088 | MU      | 88
MU0000000056 | MU      | 56
MP0000000090 | MP      | 90
MU0000000084 | MU      | 84
MU0000000030 | MU      | 30
MP0000000018 | MP      | 18
MU0000000026 | MU      | 26
MU0000000053 | MU      | 53
MB0000000079 | MB      | 79
MU0000000042 | MU      | 42
MU0000000056 | MU      | 56
MT0000000142 | MT      | 142
MT0000000065 | MT      | 65
MT000000006 | MT      | 6
MU000000009 | MU      | 9
MU0000000039 | MU      | 39
(22 строки)
starter=# SELECT
starter-# SUBSTR(LTRIM(id),1, 2) AS source_system,
starter-# cast(SUBSTR(id,3) as int) AS num_circle
starter-# FROM circles;SELECT
source_system | num_circle
---------------+------------
MU      |     20
MU      |     60
MT      |     75
MT      |     10
MU      |     48
MU      |     77
MU      |     88
MU      |     56
MP      |     90
MU      |     84
MU      |     30
MP      |     18
MU      |     26
MU      |     53
MB      |     79
MU      |     42
MU      |     56
MT      |    142
MT      |     65
MT      |     6
MU      |     9
MU      |     39
(22 строки)
Task:
Таблица Покупки.
Создать таблицу purchases;
Вставьте в нее все записи из приложенного файла (для таблицы purchases);
Выведите уникальные города клиентов;
# Написание Sql запросов.
Decision:
starter=# create table purchases (
starter(# surname varchar(50),
starter(# name varchar(50),
starter(# second_name varchar(50),
starter(# region varchar(50),
starter(# city varchar(50),
starter(# street_type varchar(50),
starter(# street_nm varchar(50),
starter(# house_num varchar(10),
starter(# phone_number bigint,
starter(# email varchar(50),
starter(# purchase_dt varchar(50),
starter(# product_cnt int,
starter(# purchase_amt int,
starter(# currency_nm varchar(50),
starter(# current_discount varchar(50));
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Смирнов', 'Александр', 'Александрович', 'Москва', 'Москва', 'улица', 'Шмидте', '2', 74950054758, 'smirnov@ya.ru ', '01.11.2021', 4, 125, 'US', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Иванов', 'Сергей', 'Алексеевич', 'Московская область', 'Химки', 'проспект', '50 лет октября', '17', 79061793723, 'ivanov@gmail.com', '02.11.2021', 5, 5679, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Кузнецов', 'Владимир', 'Анатольевич', 'Ростовская область', 'Ростов-на-Дону', 'переулок', 'Дружбы', '51', 79036038662, 'kuznecov@yandex.ru', '03.11.2021', 10, 9211, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Соколова', 'Елена', 'Андреевна', 'Свердловская область', 'Екатеринбург', 'бульвар', 'Цветной', '64', 74951752838, 'sokolova@mail.com', '01.01.2022', 12, 5476, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Попова ', 'Татьяна', 'Александровна', 'Санкт-Петербург', 'Санкт-Петербург', 'улица', 'Ленина', '11', 79209217902, 'popova@yahoo.com', '03.02.2022', 6, 242, 'EUR', '10');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Лебедев', 'Андрей', 'Аркадьевич', 'Ростовская область', 'Ростов-на-Дону', 'переулок', 'Смирновский', '100', 74999545208, 'lebedev@yahoo.com', '04.02.2022', 18, 9925, 'RUR', '12');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Козлов', 'Алексей', 'Артемович', 'Москва', 'Москва', 'улица', 'Ленина', '3', 74999545205, 'kozlov@ya.ru', '05.02.2022', 8, 7218, 'RUR', '10');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Новикова', 'Ольга', 'Андреевна', 'Санкт-Петербург', 'Санкт-Петербург', 'бульвар', 'Петровский', '45', 74999545202, 'novikova@yandex.ru', '06.02.2022', 11, 34, 'EUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values (' Морозов', 'Николай', 'Богданович', 'Рязанская область', 'Рязань', 'проспект', 'Московский', '67', NULL, 'morozov@gmail.com', '07.02.2022', 2, 4101, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Петров', 'Наталья', 'Александровна', 'Ростовская область', 'Ростов-на-Дону', 'улица', 'Ленина', '65', 74999937334, 'PETROV@GMAIL.COM', '08.02.2022', 4, 8013, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Волкова', 'Анна', 'Валентиновна', 'Москва', 'Москва', 'улица', 'Ленина', '73', 74950692731, 'volkova@gmail.com', '11.11.2021', 9, 7733, 'RUR', '10');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Соловьёв', 'Иван', 'Валерьевич', 'Москва', 'Москва', 'переулок', 'Глинки', '33', 77767813970, 'soloviyev@gmail.com', '08.02.2022', 9, 7566, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Васильев', 'Дмитрий', 'Васильевич', 'Ростовская область', 'Ростов-на-Дону', 'улица', 'Ленина', '25', 74951662623, 'vasiliyev@mail.com', '13.11.2021', 18, 2608, 'CNY', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Зайцева', 'Ирина', 'Викторовна', 'Санкт-Петербург', 'Санкт-Петербург', 'бульвар', 'Волжский', '74', 79093871696, 'zayceva@ya.ru', '08.02.2022', 12, 8694, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Павлова ', 'Мария', 'Витальевна', 'Москва', 'Москва', 'проспект', 'Свободы', '81', 74953740142, 'PAVLOVA@GMAIL.COM', '09.02.2022', 12, 5291, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Семёнов', 'Михаил', 'Владимирович', 'Свердловская область', 'Екатеринбург', 'переулок', 'Некрасовский', '44', NULL, 'semenov@mail.com', '10.02.2022', 9, 7087, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Голубева', 'Светлана', 'Владиславовна', 'Ростовская область', 'Ростов-на-Дону', 'улица', 'Ленина', '44', 74995861301, 'golubeva@gmail.com', '11.02.2022', 11, 3282, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Виноградова', 'Екатерина', 'Владиславовна', 'Москва', 'Москва', 'бульвар', 'Победы', '85', 74995860591, 'vinogradova@ya.ru', '18.11.2021', 20, 123, 'US', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Богданов', 'Евгений', 'Вячеславович', 'Санкт-Петербург', 'Санкт-Петербург', 'проспект', 'Революции', '3', 74995861296, 'BOGDANOV@gmail.com', '19.11.2021', 6, 6563, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Воробьёв', 'Виктор', 'Геннадиевич', 'Ростовская область', 'Ростов-на-Дону', 'улица', 'Дзержинского', '20', 74953741652, 'vorobiyev@gmail.com', '20.11.2021', 8, 3867, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Фёдорова', 'Анастасия', 'Георгиевна', 'Рязанская область', 'Рязань', 'улица', 'Победы', '55', 74950097648, 'NULL', '21.11.2021', 5, 56, 'EUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Михайлов', 'Юрий', 'Григорьевич', 'Москва', 'Москва', 'переулок', 'Лермонтовский', '45', 74992166013, 'mikhaylov@mail.com ', '08.02.2022', 8, 6283, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Беляева', 'Юлия', 'Валентиновна', 'Рязанская область', 'Рязань', 'бульвар', 'Гагарина', '50', 78002220480, 'NULL', '09.02.2022', 18, 7535, 'RUR', '10%');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Тарасова', 'Валентина', 'Денисовна', 'Москва', 'Москва', 'улица', 'Ленина', '54', 73432203735, 'belova@gmail.com', '10.02.2022', 1, 2247, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Белова', 'Галина', 'Валентиновна', 'Санкт-Петербург', 'Санкт-Петербург', 'проспект', 'Невский', '30', 73432203718, 'NULL', '25.11.2021', 15, 4612, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Комарова', 'Людмила', 'Евгеньевна', 'Рязанская область', 'Рязань', 'улица', 'Ленина', '15', 74993506931, ' KOMAROVA@MAIL.COM', '08.02.2022', 7, 7808, 'RUR', '25%');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Орлов', 'Василий', 'Егорович', 'Ростовская область', 'Ростов-на-Дону', 'бульвар', 'Дзержинского', '19', 79031193345, 'orlov@gmail.com', '27.11.2021', 17, 321, 'US', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Киселёв', 'Игорь', 'Ефимович', 'Москва', 'Москва', 'проспект', 'Красный', '10', 74996382013, 'NULL', '08.02.2022', 1, 1207, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Макаров', 'Анатолий', 'Иванович', 'Санкт-Петербург', 'Санкт-Петербург', 'улица', 'Ленина', '27', 79253628473, 'makarov@mail.com', '29.11.2021', 6, 7138, 'RUR', 'NULL');
starter=# insert into purchases (surname, name, second_name, region, city, street_type, street_nm, house_num, phone_number, email, purchase_dt, product_cnt, purchase_amt, currency_nm, current_discount) values ('Андреев ', 'Олег', 'Иваныч', 'Москва', 'Москва', 'переулок', 'Тургеневский', '79', 74951203035, 'andreev@gmail.com ', '30.11.2021', 16, 1022, 'RUR', 'NULL');
starter=# select distinct city
starter-# from purchases
starter-# where city is not null;
city
-----------------
Химки
Рязань
Екатеринбург
Москва
Санкт-Петербург
Ростов-на-Дону
(6 строк)
Task:
Выведите для каждого клиента из таблицы purchases полные ФИО (фамилия, имя и отчество должны находиться в одном поле) и адрес клиента (все адресные атрибуты также должны находиться в одном поле). Не забудьте выполнить проверку на пробелы;
# Написание Sql запросов.
Decision:
starter=# select
starter-# surname || ' ' || name || ' ' || second_name as FIO,
starter-# CASE
starter-#   when trim(region) = trim(city)
starter-#   then city ||', '|| street_type ||' '|| street_nm || ', '|| house_num
starter-#   else region ||', '|| city ||', '|| street_type ||' '|| street_nm || ', '|| house_num
starter-# end as address
starter-# from purchases;
      fio         |              address
-------------------------------------+---------------------------------------------------------------
Смирнов Александр Александрович   | Москва, улица Шмидте, 2
Иванов Сергей Алексеевич      | Московская область, Химки, проспект 50 лет октября, 17
Кузнецов Владимир Анатольевич   | Ростовская область, Ростов-на-Дону, переулок Дружбы, 51
Соколова Елена Андреевна      | Свердловская область, Екатеринбург, бульвар Цветной, 64
Попова Татьяна Александровна   | Санкт-Петербург, улица Ленина, 11
Лебедев Андрей Аркадьевич     | Ростовская область, Ростов-на-Дону, переулок Смирновский, 100
Козлов Алексей Артемович      | Москва, улица Ленина, 3
Новикова Ольга Андреевна      | Санкт-Петербург, бульвар Петровский, 45
Морозов Николай Богданович     | Рязанская область, Рязань, проспект Московский, 67
Петров Наталья Александровна    | Ростовская область, Ростов-на-Дону, улица Ленина, 65
Волкова Анна Валентиновна     | Москва, улица Ленина, 73
Соловьёв Иван Валерьевич      | Москва, переулок Глинки, 33
Васильев Дмитрий Васильевич     | Ростовская область, Ростов-на-Дону, улица Ленина, 25
Зайцева Ирина Викторовна      | Санкт-Петербург, бульвар Волжский, 74
Павлова Мария Витальевна     | Москва, проспект Свободы, 81
Семёнов Михаил Владимирович     | Свердловская область, Екатеринбург, переулок Некрасовский, 44
Голубева Светлана Владиславовна   | Ростовская область, Ростов-на-Дону, улица Ленина, 44
Виноградова Екатерина Владиславовна | Москва, бульвар Победы, 85
Богданов Евгений Вячеславович   | Санкт-Петербург, проспект Революции, 3
Воробьёв Виктор Геннадиевич     | Ростовская область, Ростов-на-Дону, улица Дзержинского, 20
Фёдорова Анастасия Георгиевна   | Рязанская область, Рязань, улица Победы, 55
Михайлов Юрий Григорьевич     | Москва, переулок Лермонтовский, 45
Беляева Юлия Валентиновна     | Рязанская область, Рязань, бульвар Гагарина, 50
Тарасова Валентина Денисовна    | Москва, улица Ленина, 54
Белова Галина Валентиновна     | Санкт-Петербург, проспект Невский, 30
Комарова Людмила Евгеньевна     | Рязанская область, Рязань, улица Ленина, 15
Орлов Василий Егорович       | Ростовская область, Ростов-на-Дону, бульвар Дзержинского, 19
Киселёв Игорь Ефимович       | Москва, проспект Красный, 10
Макаров Анатолий Иванович     | Санкт-Петербург, улица Ленина, 27
Андреев Олег Иваныч        | Москва, переулок Тургеневский, 79
(30 строк)
Task:
Выведите для каждого клиента из таблицы purchases его фамилию и инициалы, номер телефона, а также его категорию: если вторая цифра телефона = 9, то телефон мобильный, иначе городской;
# Написание Sql запросов.
Decision:
starter-# select
surname || ' ' || substr(name, 1, 1) || '. ' || substr(second_name, 1, 1) as client,
phone_number,
case
when phone_number like '_9%'
then 'мобильный'
when phone_number not like '_9%'
then 'городской'
when phone_number is NULL
then 'значение не задано'
end as type
from purchases;
client phone_number  type
Смирнов А. А  74950054758 городской
Иванов С. А 79061793723 мобильный
Кузнецов В. А 79036038662 мобильный
Соколова Е. А 74951752838 городской
Попова Т. А 79209217902 мобильный
Лебедев А. А  74999545208 городской
Козлов А. А 74999545205 городской
Новикова О. А 74999545202 городской
Морозов Н. Б  NULL  значение не задано
Петров Н. А 74999937334 городской
Волкова А. В  74950692731 городской
Соловьёв И. В 77767813970 городской
Васильев Д. В 74951662623 городской
Зайцева И. В  79093871696 мобильный
Павлова М. В  74953740142 городской
Семёнов М. В  NULL  значение не задано
Голубева С. В 74995861301 городской
Виноградова Е. В  74995860591 городской
Богданов Е. В 74995861296 городской
Воробьёв В. Г 74953741652 городской
Фёдорова А. Г 74950097648 городской
Михайлов Ю. Г 74992166013 городской
Беляева Ю. В  78002220480 городской
Тарасова В. Д 73432203735 городской
Белова Г. В 73432203718 городской
Комарова Л. Е 74993506931 городской
Орлов В. Е 79031193345 мобильный
Киселёв И. Е  74996382013 городской
Макаров А. И  79253628473 мобильный
Андреев О. И  74951203035 городской
Task:
Выведите для каждого клиента из таблицы purchases его фамилию и инициалы, а также его email и домен электронной почты:
  ya.ru или yandex.ru -> яндекс
  mail.com -> мейл
  gmail.com -> гугл
  yahoo.com -> яху
# Написание Sql запросов.
Decision:
starter=# SELECT TRIM(surname) ||' '|| SUBSTR(LTRIM(name), 1, 1) ||'. '|| SUBSTR(LTRIM(second_name), 1, 1) ||'. ' AS full_name, email,
starter-# CASE
starter-#   WHEN TRIM(LOWER(email)) LIKE '%@ya.ru' OR TRIM(LOWER(email)) LIKE '%@yandex.ru' THEN 'яндекс'
starter-#     WHEN TRIM(LOWER(email)) LIKE '%@mail.com' THEN 'мейл'
starter-#     WHEN TRIM(LOWER(email)) LIKE '%@gmail.com' THEN 'гугл'
starter-#     WHEN TRIM(LOWER(email)) LIKE '%@yahoo.com' THEN 'яху'
starter-#     WHEN email IS NULL OR email = 'NULL' THEN 'пусто'
starter-#     ELSE 'не известный'
starter-#  END AS domen
starter-# FROM purchases;
full_name   |    email    | domen
--------------------+---------------------+--------
Смирнов А. А.   | smirnov@ya.ru   | яндекс
Иванов С. А.   | ivanov@gmail.com  | гугл
Кузнецов В. А.   | kuznecov@yandex.ru | яндекс
Соколова Е. А.   | sokolova@mail.com | мейл
Попова Т. А.   | popova@yahoo.com  | яху
Лебедев А. А.   | lebedev@yahoo.com | яху
Козлов А. А.   | kozlov@ya.ru    | яндекс
Новикова О. А.   | novikova@yandex.ru | яндекс
Морозов Н. Б.   | morozov@gmail.com | гугл
Петров Н. А.   | PETROV@GMAIL.COM  | гугл
Волкова А. В.   | volkova@gmail.com | гугл
Соловьёв И. В.   | soloviyev@gmail.com | гугл
Васильев Д. В.   | vasiliyev@mail.com | мейл
Зайцева И. В.   | zayceva@ya.ru   | яндекс
Павлова М. В.   | PAVLOVA@GMAIL.COM | гугл
Семёнов М. В.   | semenov@mail.com  | мейл
Голубева С. В.   | golubeva@gmail.com | гугл
Виноградова Е. В. | vinogradova@ya.ru | яндекс
Богданов Е. В.   | BOGDANOV@gmail.com | гугл
Воробьёв В. Г.   | vorobiyev@gmail.com | гугл
Фёдорова А. Г.   | NULL        | пусто
Михайлов Ю. Г.   | mikhaylov@mail.com | мейл
Беляева Ю. В.   | NULL        | пусто
Тарасова В. Д.   | belova@gmail.com  | гугл
Белова Г. В.   | NULL        | пусто
Комарова Л. Е.   | KOMAROVA@MAIL.COM | мейл
Орлов В. Е.    | orlov@gmail.com   | гугл
Киселёв И. Е.   | NULL        | пусто
Макаров А. И.   | makarov@mail.com  | мейл
Андреев О. И.   | andreev@gmail.com | гугл
(30 строк)
Task:
Из таблицы purchases отобрать только тех клиентов, которые:
  совершили покупку в ноябре 2021 года;
  на суммы свыше 5 тысяч рублей (с учетом текущей скидки)
  известен полный адрес и номер телефона
Вывести   фамилию, имя и отчество,
  номер телефона,
  текста sms-сообщения:
“Уважаемый/ая (имя клиента), рады сообщить, что в нашем магазине начинается   распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!”
# Написание Sql запросов.
Decision:
select
surname || ' ' || substr(name, 1, 1) || '. ' || substr(second_name, 1, 1) as client,
phone_number,
'Уважаемый/ая ' ||surname || ' ' || substr(name, 1, 1) || '. ' || substr(second_name, 1, 1)||',
рады сообщить, что в нашем магазине начинается
распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!' as sms
--purchase_amt_rub*(1-current_discount)
from purchases
where
purchase_dt like '%11.2021'
and region is not NULL
and city is not NULL
and street_type is not NULL
and street_nm is not NULL
and house_num is not NULL
and phone_number is not NULL
and
(case currency_nm
  when 'US'
    then 60.5
  when 'EUR'
    then 60.6
  when 'CNY'
    then 8.7
  else 1
end *purchase_amt)*(1-
replace(coalesce(case current_discount
   when 'NULL'
     then 0
   else current_discount
end,0),'%','')*0.01) > 5000
client phone_number  sms
Смирнов А. А  74950054758 Уважаемый/ая Смирнов А. А, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
Иванов С. А 79061793723 Уважаемый/ая Иванов С. А, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
Кузнецов В. А 79036038662 Уважаемый/ая Кузнецов В. А, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
Волкова А. В  74950692731 Уважаемый/ая Волкова А. В, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
Васильев Д. В 74951662623 Уважаемый/ая Васильев Д. В, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
Виноградова Е. В  74995860591 Уважаемый/ая Виноградова Е. В, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
Богданов Е. В 74995861296 Уважаемый/ая Богданов Е. В, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
Орлов В. Е 79031193345 Уважаемый/ая Орлов В. Е, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
Макаров А. И  79253628473 Уважаемый/ая Макаров А. И, рады сообщить, что в нашем магазине начинается распродажа товаров. Ждем Вас каждый день с 9.00 до 20.00!
Decision:
select
first_name,
last_name,
department_id,
(select
  distinct department_name
from departments
where departments.department_id=employees.department_id) as department_name
from employees
Task:
Для задачи 11 отобрать только клиентов из городов Москва, Санкт-Петербург и   Ростов-на-Дону и изменить текст sms-сообщения на:
“Уважаемый (имя клиента), рады сообщить, что в нашем магазине начинается  распродажа товаров. Ждем Вас по адресу:
(для Москвы: Москва, Ленинградский проспект 7)
(для Санкт-Петербурга: Санкт-Петербург, Невский проспект 23)
(для Ростова-на-Дону: Ростов-на-Дону, ул. Садовая 101), каждый день с 9.00 до 20.00!”
Task:
Для каждого клиента из таблицы purchases выведите размер новой скидки, рассчитанной на основе объемов его покупок:
  Если клиент купил более 10 единиц товаров, то скидка 10%
  Если клиент потратил на покупки с учетом текущей скидки более 7 тыс. рублей (или эквивалентной сумме в иной валюте), то скидка 20%
Выведите идентификатор клиента и размер его скидки в формате 'm %'
Task:
Выведите из таблицы purchase только те записи, для которых в поле current_discount содержится символ % и запишите эти записи в новую таблицу purchases_bag
Task:
Таблица Командировки.
Создать таблицу командировки, в которой представлена информация о командировках сотрудников какой-либо организации (фамилия сотрудника, город, куда он ездил, размер суточных, даты первого и последнего дня командировки)
# Написание Sql запросов.
Decision:
mysql> CREATE TABLE trip (
trip_id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(30),
city VARCHAR(25),
per_diem DECIMAL(8, 2),
date_first DATE,
date_last DATE
);
Query OK, 0 rows affected (0.26 sec)
mysql> INSERT INTO trip VALUES
("1", "Баранов П.Е.", "Москва", "700", "2020-01-12", "2020-01-17"),
("2", "Абрамова К.А.", "Владивосток", "450", "2020-01-14", "2020-01-27"),
("3", "Семенов И.В.", "Москва", "700", "2020-01-23", "2020-01-31"),
("4", "Ильиных Г.Р.", "Владивосток", "450", "2020-01-12", "2020-02-02"),
("5", "Колесов С.П.", "Москва", "700", "2020-02-01", "2020-02-06"),
("6", "Баранов П.Е.", "Москва", "700", "2020-02-14", "2020-02-22"),
("7", "Абрамова К.А.", "Москва", "700", "2020-02-23", "2020-03-01"),
("8", "Лебедев Т.К.", "Москва", "700", "2020-03-03", "2020-03-06"),
("9", "Колесов С.П.", "Новосибирск", "450", "2020-02-27", "2020-03-12"),
("10", "Семенов И.В.", "Санкт-Петербург", "700", "2020-03-29", "2020-04-05"),
("11", "Абрамова К.А.", "Москва", "700", "2020-04-06", "2020-04-14"),
("12", "Баранов П.Е.", "Новосибирск", "450", "2020-04-18", "2020-05-04"),
("13", "Лебедев Т.К.", "Томск", "450", "2020-05-20", "2020-05-31"),
("14", "Семенов И.В.", "Санкт-Петербург", "700", "2020-06-01", "2020-06-03"),
("15", "Абрамова К.А.", "Санкт-Петербург", "700", "2020-05-28", "2020-06-04"),
("16", "Федорова А.Ю.", "Новосибирск", "450", "2020-05-25", "2020-06-04"),
("17", "Колесов С.П.", "Новосибирск", "450", "2020-06-03", "2020-06-12"),
("18", "Федорова А.Ю.", "Томск", "450", "2020-06-20", "2020-06-26"),
("19", "Абрамова К.А.", "Владивосток", "450", "2020-07-02", "2020-07-13"),
("20", "Баранов П.Е.", "Воронеж", "450", "2020-07-19", "2020-07-25");
mysql> SELECT * FROM trip;
+---------+-------------------------+-------------------------------+----------+------------+------------+
| trip_id | name          | city             | per_diem | date_first | date_last |
+---------+-------------------------+-------------------------------+----------+------------+------------+
|   1 | Баранов П.Е.      | Москва            | 700.00 | 2020-01-12 | 2020-01-17 |
|   2 | Абрамова К.А.     | Владивосток         | 450.00 | 2020-01-14 | 2020-01-27 |
|   3 | Семенов И.В.      | Москва            | 700.00 | 2020-01-23 | 2020-01-31 |
|   4 | Ильиных Г.Р.      | Владивосток         | 450.00 | 2020-01-12 | 2020-02-02 |
|   5 | Колесов С.П.      | Москва            | 700.00 | 2020-02-01 | 2020-02-06 |
|   6 | Баранов П.Е.      | Москва            | 700.00 | 2020-02-14 | 2020-02-22 |
|   7 | Абрамова К.А.     | Москва            | 700.00 | 2020-02-23 | 2020-03-01 |
|   8 | Лебедев Т.К.      | Москва            | 700.00 | 2020-03-03 | 2020-03-06 |
|   9 | Колесов С.П.      | Новосибирск         | 450.00 | 2020-02-27 | 2020-03-12 |
|   10 | Семенов И.В.      | Санкт-Петербург       | 700.00 | 2020-03-29 | 2020-04-05 |
|   11 | Абрамова К.А.     | Москва            | 700.00 | 2020-04-06 | 2020-04-14 |
|   12 | Баранов П.Е.      | Новосибирск         | 450.00 | 2020-04-18 | 2020-05-04 |
|   13 | Лебедев Т.К.      | Томск             | 450.00 | 2020-05-20 | 2020-05-31 |
|   14 | Семенов И.В.      | Санкт-Петербург       | 700.00 | 2020-06-01 | 2020-06-03 |
|   15 | Абрамова К.А.     | Санкт-Петербург       | 700.00 | 2020-05-28 | 2020-06-04 |
|   16 | Федорова А.Ю.     | Новосибирск         | 450.00 | 2020-05-25 | 2020-06-04 |
|   17 | Колесов С.П.      | Новосибирск         | 450.00 | 2020-06-03 | 2020-06-12 |
|   18 | Федорова А.Ю.     | Томск             | 450.00 | 2020-06-20 | 2020-06-26 |
|   19 | Абрамова К.А.     | Владивосток         | 450.00 | 2020-07-02 | 2020-07-13 |
|   20 | Баранов П.Е.      | Воронеж           | 450.00 | 2020-07-19 | 2020-07-25 |
+---------+-------------------------+-------------------------------+----------+------------+------------+
20 rows in set (0.00 sec)
Task:
Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», в отсортированном по убыванию даты последнего дня командировки виде. В результат включить столбцы name, city, per_diem, date_first, date_last.
# Написание Sql запросов.
Decision:
mysql> SELECT name, city, per_diem, date_first, date_last
FROM trip
WHERE name LtuserE '%а %'
ORDER BY date_last DESC;
+-------------------------+-------------------------------+----------+------------+------------+
| name          | city             | per_diem | date_first | date_last |
+-------------------------+-------------------------------+----------+------------+------------+
| Абрамова К.А.     | Владивосток         | 450.00 | 2020-07-02 | 2020-07-13 |
| Федорова А.Ю.     | Томск             | 450.00 | 2020-06-20 | 2020-06-26 |
| Абрамова К.А.     | Санкт-Петербург       | 700.00 | 2020-05-28 | 2020-06-04 |
| Федорова А.Ю.     | Новосибирск         | 450.00 | 2020-05-25 | 2020-06-04 |
| Абрамова К.А.     | Москва            | 700.00 | 2020-04-06 | 2020-04-14 |
| Абрамова К.А.     | Москва            | 700.00 | 2020-02-23 | 2020-03-01 |
| Абрамова К.А.     | Владивосток         | 450.00 | 2020-01-14 | 2020-01-27 |
+-------------------------+-------------------------------+----------+------------+------------+
7 rows in set (0.01 sec)
Task:
Вывести в алфавитном порядке фамилии и инициалы тех сотрудников, которые были в командировке в Москве.
# Написание Sql запросов.
Decision:
mysql> SELECT DISTINCT name
FROM trip
WHERE city = 'Москва'
ORDER BY name ASC;
+-------------------------+
| name          |
+-------------------------+
| Абрамова К.А.     |
| Баранов П.Е.      |
| Колесов С.П.      |
| Лебедев Т.К.      |
| Семенов И.В.      |
+-------------------------+
5 rows in set (0.00 sec)
Task:
Для каждого города посчитать, сколько раз сотрудники в нем были. Информацию вывести в отсортированном в алфавитном порядке по названию городов. Вычисляемый столбец назвать Количество.
# Написание Sql запросов.
Decision:
mysql> SELECT city, COUNT(name) AS Количество
FROM trip
GROUP BY city
ORDER BY city ASC;
+-------------------------------+----------------------+
| city             | Количество     |
+-------------------------------+----------------------+
| Владивосток         |          3 |
| Воронеж           |          1 |
| Москва            |          7 |
| Новосибирск         |          4 |
| Санкт-Петербург       |          3 |
| Томск             |          2 |
+-------------------------------+----------------------+
6 rows in set (0.01 sec)
Task:
Вывести два города, в которых чаще всего были в командировках сотрудники. Вычисляемый столбец назвать Количество.
# Написание Sql запросов.
Decision:
mysql> SELECT city, COUNT(name) AS Количество
FROM trip
GROUP BY city
ORDER BY Количество DESC
LIMIT 2;
+------------------------+----------------------+
| city         | Количество     |
+------------------------+----------------------+
| Москва         |          7 |
| Новосибирск      |          4 |
+------------------------+----------------------+
2 rows in set (0.01 sec)
Task:
Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга (фамилии и инициалы сотрудников, город , длительность командировки в днях, при этом первый и последний день относится к периоду командировки). Последний столбец назвать Длительность. Информацию вывести в упорядоченном по убыванию длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).
# Написание Sql запросов.
Decision:
mysql> SELECT name, city, (DATEDIFF(date_last, date_first)+1) AS Длительность
FROM trip
WHERE city <> 'Москва' AND city <> 'Санкт-Петербург'
ORDER BY Длительность DESC;
+-------------------------+------------------------+--------------------------+
| name          | city         | Длительность       |
+-------------------------+------------------------+--------------------------+
| Ильиных Г.Р.      | Владивосток      |           22 |
| Баранов П.Е.      | Новосибирск      |           17 |
| Колесов С.П.      | Новосибирск      |           15 |
| Абрамова К.А.     | Владивосток      |           14 |
| Абрамова К.А.     | Владивосток      |           12 |
| Лебедев Т.К.      | Томск         |           12 |
| Федорова А.Ю.     | Новосибирск      |           11 |
| Колесов С.П.      | Новосибирск      |           10 |
| Баранов П.Е.      | Воронеж        |            7 |
| Федорова А.Ю.     | Томск         |            7 |
+-------------------------+------------------------+--------------------------+
10 rows in set (0.00 sec)
Task:
Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени. В результат включить столбцы name, city, date_first, date_last.
# Написание Sql запросов.
Decision:
mysql> SELECT name, city, date_first, date_last
FROM trip
WHERE DATEDIFF(date_last,date_first)=(
SELECT MIN(DATEDIFF(date_last,date_first))
FROM trip);
+-----------------------+-------------------------------+------------+------------+
| name         | city             | date_first | date_last |
+-----------------------+-------------------------------+------------+------------+
| Семенов И.В.     | Санкт-Петербург       | 2020-06-01 | 2020-06-03 |
+-----------------------+-------------------------------+------------+------------+
1 row in set (0.03 sec)
Task:
Вывести информацию о командировках, начало и конец которых относятся к одному месяцу (год может быть любой). В результат включить столбцы name, city, date_first, date_last. Строки отсортировать сначала в алфавитном порядке по названию города, а затем по фамилии сотрудника .
# Написание Sql запросов.
Decision:
mysql> SELECT name, city, date_first, date_last
FROM trip
WHERE MONTH(date_first)=MONTH(date_last)
ORDER BY city, name ASC;
+-------------------------+-------------------------------+------------+------------+
| name          | city             | date_first | date_last |
+-------------------------+-------------------------------+------------+------------+
| Абрамова К.А.     | Владивосток         | 2020-01-14 | 2020-01-27 |
| Абрамова К.А.     | Владивосток         | 2020-07-02 | 2020-07-13 |
| Баранов П.Е.      | Воронеж           | 2020-07-19 | 2020-07-25 |
| Абрамова К.А.     | Москва            | 2020-04-06 | 2020-04-14 |
| Баранов П.Е.      | Москва            | 2020-01-12 | 2020-01-17 |
| Баранов П.Е.      | Москва            | 2020-02-14 | 2020-02-22 |
| Колесов С.П.      | Москва            | 2020-02-01 | 2020-02-06 |
| Лебедев Т.К.      | Москва            | 2020-03-03 | 2020-03-06 |
| Семенов И.В.      | Москва            | 2020-01-23 | 2020-01-31 |
| Колесов С.П.      | Новосибирск         | 2020-06-03 | 2020-06-12 |
| Семенов И.В.      | Санкт-Петербург       | 2020-06-01 | 2020-06-03 |
| Лебедев Т.К.      | Томск             | 2020-05-20 | 2020-05-31 |
| Федорова А.Ю.     | Томск             | 2020-06-20 | 2020-06-26 |
+-------------------------+-------------------------------+------------+------------+
13 rows in set (0.00 sec)
Task:
Вывести название месяца и количество командировок для каждого месяца. Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце. Информацию вывести сначала в отсортированном по убыванию количества, а потом в алфавитном порядке по названию месяца виде. Название столбцов – Месяц и Количество.
# Написание Sql запросов.
Decision:
mysql> SELECT MONTHNAME(date_first) AS Месяц, COUNT(name) AS Количество
FROM trip
GROUP BY Месяц
ORDER BY Количество DESC, Месяц ASC;
+------------+----------------------+
| Месяц   | Количество     |
+------------+----------------------+
| February |          4 |
| January  |          4 |
| June   |          3 |
| May    |          3 |
| April   |          2 |
| July   |          2 |
| March   |          2 |
+------------+----------------------+
7 rows in set (0.01 sec)
Task:
Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, первый день которых пришелся на февраль или март 2020 года. Значение суточных для каждой командировки занесено в столбец per_diem. Вывести фамилию и инициалы сотрудника, город, первый день командировки и сумму суточных. Последний столбец назвать Сумма. Информацию отсортировать сначала в алфавитном порядке по фамилиям сотрудников, а затем по убыванию суммы суточных.
# Написание Sql запросов.
Decision:
mysql> SELECT name, city, date_first, (DATEDIFF(date_last, date_first)+1)*per_diem AS Сумма
FROM trip
WHERE YEAR(date_first)=2020 AND MONTH(date_first)=3 OR MONTH(date_first)=2
ORDER BY name,Сумма DESC;
+-------------------------+-------------------------------+------------+------------+
| name          | city             | date_first | Сумма   |
+-------------------------+-------------------------------+------------+------------+
| Абрамова К.А.     | Москва            | 2020-02-23 |  5600.00 |
| Баранов П.Е.      | Москва            | 2020-02-14 |  6300.00 |
| Колесов С.П.      | Новосибирск         | 2020-02-27 |  6750.00 |
| Колесов С.П.      | Москва            | 2020-02-01 |  4200.00 |
| Лебедев Т.К.      | Москва            | 2020-03-03 |  2800.00 |
| Семенов И.В.      | Санкт-Петербург       | 2020-03-29 |  5600.00 |
+-------------------------+-------------------------------+------------+------------+
6 rows in set (0.01 sec)
Task:
Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки для тех сотрудников, которые были в командировках больше чем 3 раза, в отсортированном по убыванию сумм суточных виде. Последний столбец назвать Сумма.
# Написание Sql запросов.
Decision:
mysql> SELECT name, SUM((DATEDIFF(date_last, date_first)+1)*per_diem) AS Сумма
FROM trip
GROUP BY name
HAVING COUNT(name)>3
ORDER BY Сумма DESC;
+-------------------------+------------+
| name          | Сумма   |
+-------------------------+------------+
| Абрамова К.А.     | 29200.00 |
| Баранов П.Е.      | 21300.00 |
+-------------------------+------------+
2 rows in set (0.00 sec)
Task:
Таблица Нарушения правил дорожного движения.
Создать таблицу штрафов содержит информацию о штрафах, начисленных водителям за нарушения правил дорожного движения (имя водителя, номер автомобиля, описание нарушения, сумма штрафа, дата нарушения и дата оплаты штрафа).
Создать таблицу fine следующей структуры:
fine_id - ключевой столбец целого типа с автоматическим увеличением значения ключа на 1
name - строка длиной 30
number_plate - строка длиной 6
violation - строка длиной 50
sum_fine - вещественное число, максимальная длина 8, количество знаков после запятой 2
date_violation - дата
date_payment - дата
# Написание Sql запросов.
Decision:
mysql> CREATE TABLE fine(fine_id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(30), number_plate VARCHAR(6), violation VARCHAR(50), sum_fine DECIMAL(8,2), date_violation DATE, date_payment DATE);
Query OK, 0 rows affected (0.33 sec)
Task:
В таблицу fine первые 5 строк уже занесены. Добавить в таблицу записи с ключевыми значениями 6, 7, 8.
fine_id   name  number_plate  violation sum_fine  date_violation date_payment
1 Баранов П.Е.  Р523ВТ Превышение скорости (от 40 до 60) 500.00 2020-01-12 2020-01-17
2 Абрамова К.А. О111АВ Проезд на запрещающий сигнал 1000.00   2020-01-14 2020-02-27
3 Яковлев Г.Р.  Т330ТТ Превышение скорости (от 20 до 40) 500.00 2020-01-23 2020-02-23
4 Яковлев Г.Р.  М701АА Превышение скорости (от 20 до 40)   2020-01-12
5 Колесов С.П.  К892АХ Превышение скорости (от 20 до 40)   2020-02-01
6 Баранов П.Е.  Р523ВТ Превышение скорости (от 40 до 60)   2020-02-14
7 Абрамова К.А. О111АВ Проезд на запрещающий сигнал   2020-02-23
8 Яковлев Г.Р.  Т330ТТ Проезд на запрещающий сигнал   2020-03-03
# Написание Sql запросов.
Decision:
mysql> INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment) VALUES
('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', 500.00, '2020-01-12', '2020-01-17'),
('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', 1000.00, '2020-01-14', '2020-02-27'),
('Яковлев Г.Р.', 'Т330ТТ', 'Превышение скорости(от 20 до 40)', 500.00, '2020-01-23', '2020-02-23'),
('Яковлев Г.Р.', 'М701АА', 'Превышение скорости(от 20 до 40)', Null, '2020-01-12', Null),
('Колесов С.П.', 'К892АХ', 'Превышение скорости(от 20 до 40)', Null, '2020-02-01', Null);
Query OK, 5 rows affected (0.19 sec)
Records: 5 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM fine;
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                       | sum_fine | date_violation | date_payment |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
|   1 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 500.00 | 2020-01-12   | 2020-01-17 |
|   2 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-01-14   | 2020-02-27 |
|   3 | Яковлев Г.Р.      | Т330ТТ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-23   | 2020-02-23 |
|   4 | Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           |   NULL | 2020-01-12   | NULL     |
|   5 | Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           |   NULL | 2020-02-01   | NULL     |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
5 rows in set (0.00 sec)
mysql> INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment) VALUES
('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', Null, '2020-02-14', Null),
('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', Null, '2020-02-23', Null),
('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', Null, '2020-03-03', Null);
Query OK, 3 rows affected (0.03 sec)
Records: 3 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM fine;
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                       | sum_fine | date_violation | date_payment |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
|   1 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 500.00 | 2020-01-12   | 2020-01-17 |
|   2 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-01-14   | 2020-02-27 |
|   3 | Яковлев Г.Р.      | Т330ТТ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-23   | 2020-02-23 |
|   4 | Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           |   NULL | 2020-01-12   | NULL     |
|   5 | Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           |   NULL | 2020-02-01   | NULL     |
|   6 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           |   NULL | 2020-02-14   | NULL     |
|   7 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             |   NULL | 2020-02-23   | NULL     |
|   8 | Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             |   NULL | 2020-03-03   | NULL     |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
8 rows in set (0.00 sec)
Task:
Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. При этом суммы заносить только в пустые поля столбца sum_fine.
Таблица traffic_violationсоздана и заполнена.
Важно! Сравнение значения столбца с пустым значением осуществляется с помощью оператора IS NULL.
# Написание Sql запросов.
Decision:
mysql> CREATE TABLE traffic_violation(violation_id INT PRIMARY KEY AUTO_INCREMENT, violation VARCHAR(50), sum_fine DECIMAL(8,2));
Query OK, 0 rows affected (0.20 sec)
mysql> INSERT INTO traffic_violation (violation, sum_fine) VALUES ('Превышение скорости(от 20 до 40)', 500.00 ), ('Превышение скорости(от 40 до 60)', 1000.00), ('Проезд на запрещающий сигнал', 1000.00);
Query OK, 3 rows affected (0.12 sec)
Records: 3 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM traffic_violation;
+--------------+--------------------------------------------------------+----------+
| violation_id | violation                       | sum_fine |
+--------------+--------------------------------------------------------+----------+
|      1 | Превышение скорости(от 20 до 40)           | 500.00 |
|      2 | Превышение скорости(от 40 до 60)           | 1000.00 |
|      3 | Проезд на запрещающий сигнал             | 1000.00 |
+--------------+--------------------------------------------------------+----------+
3 rows in set (0.00 sec)
mysql> SELECT * FROM fine;
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                       | sum_fine | date_violation | date_payment |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
|   1 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 500.00 | 2020-01-12   | 2020-01-17 |
|   2 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-01-14   | 2020-02-27 |
|   3 | Яковлев Г.Р.      | Т330ТТ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-23   | 2020-02-23 |
|   4 | Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           |   NULL | 2020-01-12   | NULL     |
|   5 | Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           |   NULL | 2020-02-01   | NULL     |
|   6 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           |   NULL | 2020-02-14   | NULL     |
|   7 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             |   NULL | 2020-02-23   | NULL     |
|   8 | Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             |   NULL | 2020-03-03   | NULL     |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
8 rows in set (0.00 sec)
mysql> UPDATE fine, traffic_violation
SET fine.sum_fine=traffic_violation.sum_fine
WHERE (fine.sum_fine IS NULL) AND (fine.violation=traffic_violation.violation);
Query OK, 5 rows affected (0.02 sec)
Rows matched: 5 Changed: 5 Warnings: 0
mysql> SELECT * FROM fine;
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                       | sum_fine | date_violation | date_payment |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
|   1 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 500.00 | 2020-01-12   | 2020-01-17 |
|   2 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-01-14   | 2020-02-27 |
|   3 | Яковлев Г.Р.      | Т330ТТ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-23   | 2020-02-23 |
|   4 | Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-12   | NULL     |
|   5 | Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-02-01   | NULL     |
|   6 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 1000.00 | 2020-02-14   | NULL     |
|   7 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-02-23   | NULL     |
|   8 | Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-03-03   | NULL     |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
8 rows in set (0.01 sec)
Task:
Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило два и более раз. При этом учитывать все нарушения, независимо от того оплачены они или нет. Информацию отсортировать в алфавитном порядке, сначала по фамилии водителя, потом по номеру машины и, наконец, по нарушению.
# Написание Sql запросов.
Decision:
mysql> SELECT * FROM fine;
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                       | sum_fine | date_violation | date_payment |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
|   1 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 500.00 | 2020-01-12   | 2020-01-17 |
|   2 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-01-14   | 2020-02-27 |
|   3 | Яковлев Г.Р.      | Т330ТТ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-23   | 2020-02-23 |
|   4 | Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-12   | NULL     |
|   5 | Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-02-01   | NULL     |
|   6 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 1000.00 | 2020-02-14   | NULL     |
|   7 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-02-23   | NULL     |
|   8 | Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-03-03   | NULL     |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
8 rows in set (0.01 sec)
mysql> SELECT name, number_plate, violation, count(*)
FROM fine
GROUP BY name, number_plate, violation;
+-------------------------+--------------+--------------------------------------------------------+----------+
| name          | number_plate | violation                       | count(*) |
+-------------------------+--------------+--------------------------------------------------------+----------+
| Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           |    2 |
| Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             |    2 |
| Яковлев Г.Р.      | Т330ТТ   | Превышение скорости(от 20 до 40)           |    1 |
| Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           |    1 |
| Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           |    1 |
| Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             |    1 |
+-------------------------+--------------+--------------------------------------------------------+----------+
6 rows in set (0.00 sec)
mysql> SELECT name, number_plate, violation, count(*)
FROM fine
GROUP BY name, number_plate, violation
HAVING count(*) >= 2;
+-------------------------+--------------+--------------------------------------------------------+----------+
| name          | number_plate | violation                       | count(*) |
+-------------------------+--------------+--------------------------------------------------------+----------+
| Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           |    2 |
| Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             |    2 |
+-------------------------+--------------+--------------------------------------------------------+----------+
2 rows in set (0.00 sec)
mysql> SELECT name, number_plate, violation
FROM fine
GROUP BY name, number_plate, violation
HAVING count(violation)>1
ORDER BY name,violation,number_plate desc;
+-------------------------+--------------+--------------------------------------------------------+----------+
| name          | number_plate | violation                       | count(*) |
+-------------------------+--------------+--------------------------------------------------------+----------+
| Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             |    2 |
| Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           |    2 |
+-------------------------+--------------+--------------------------------------------------------+----------+
2 rows in set (0.00 sec)
Task:
В таблице fine увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей.
Для всех нарушений, по которым штраф еще не оплачен, (тех, у которых date_payment имеет пустое значение Null), необходимо проверить, является ли данное нарушение для водителя и машины повторным, если да – увеличить штраф в два раза.
Если водитель совершил нарушение на другой машине, ему увеличивать штраф не нужно.
Если несколько повторных нарушений не оплачены, то штраф увеличить для всех.
# Написание Sql запросов.
Decision:
mysql> SELECT * FROM fine;
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                       | sum_fine | date_violation | date_payment |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
|   1 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 500.00 | 2020-01-12   | 2020-01-17 |
|   2 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-01-14   | 2020-02-27 |
|   3 | Яковлев Г.Р.      | Т330ТТ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-23   | 2020-02-23 |
|   4 | Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-12   | NULL     |
|   5 | Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-02-01   | NULL     |
|   6 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 1000.00 | 2020-02-14   | NULL     |
|   7 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-02-23   | NULL     |
|   8 | Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-03-03   | NULL     |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
8 rows in set (0.01 sec)
mysql> UPDATE fine, (
SELECT name, number_plate, violation
FROM fine
GROUP BY name, number_plate, violation
HAVING count(violation)>1
ORDER BY name,violation,number_plate desc) AS query_in
SET sum_fine = IF(date_payment IS NULL,sum_fine*2,sum_fine)
WHERE fine.name = query_in.name;
Query OK, 2 rows affected (0.02 sec)
Rows matched: 4 Changed: 2 Warnings: 0
mysql> SElECT * FROM fine;
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                       | sum_fine | date_violation | date_payment |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
|   1 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 500.00 | 2020-01-12   | 2020-01-17 |
|   2 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-01-14   | 2020-02-27 |
|   3 | Яковлев Г.Р.      | Т330ТТ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-23   | 2020-02-23 |
|   4 | Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-12   | NULL     |
|   5 | Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-02-01   | NULL     |
|   6 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 2000.00 | 2020-02-14   | NULL     |
|   7 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 2000.00 | 2020-02-23   | NULL     |
|   8 | Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-03-03   | NULL     |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
8 rows in set (0.01 sec)
Task:
Водители оплачивают свои штрафы. В таблице payment занесены даты их оплаты:
payment_id name  number_plate  violation date_violation date_payment
1 Яковлев Г.Р.  М701АА Превышение скорости(от 20 до 40) 2020-01-12 2020-01-22
2 Баранов П.Е.  Р523ВТ Превышение скорости(от 40 до 60) 2020-02-14 2020-03-06
3 Яковлев Г.Р.  Т330ТТ Проезд на запрещающий сигнал 2020-03-03 2020-03-23
Необходимо:
в таблицу fine занести дату оплаты соответствующего штрафа из таблицы payment;
уменьшить начисленный штраф в таблице fine в два раза (только для тех штрафов, информация о которых занесена в таблицу payment) , если оплата произведена не позднее 20 дней со дня нарушения.
# Написание Sql запросов.
Decision:
mysql> CREATE TABLE payment(payment_id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(30), number_plate VARCHAR(6), violation VARCHAR(50), date_violation DATE, date_payment DATE);
Query OK, 0 rows affected (0.24 sec)
mysql> INSERT INTO fine (name, number_plate, violation, date_violation, date_payment) VALUES
('Яковлев Г.Р.', 'М701АА', 'Превышение скорости(от 20 до 40)', '2020-01-12', '2020-01-22'),
('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', '2020-02-14', '2020-03-06'),
('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', '2020-03-03', '2020-03-23');
Query OK, 3 rows affected (0.03 sec)
Records: 3 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM payment;
Empty set (0.00 sec)
mysql> INSERT INTO payment (name, number_plate, violation, date_violation, date_payment) VALUES ('Яковлев Г.Р.', 'М701АА', 'Превышение скорости(от 20 до 40)', '2020-01-
12', '2020-01-22'), ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', '2020-02-14', '2020-03-06'), ('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал
', '2020-03-03', '2020-03-23');
Query OK, 3 rows affected (0.11 sec)
Records: 3 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM payment;
+------------+-----------------------+--------------+--------------------------------------------------------+----------------+--------------+
| payment_id | name         | number_plate | violation                       | date_violation | date_payment |
+------------+-----------------------+--------------+--------------------------------------------------------+----------------+--------------+
|     1 | Яковлев Г.Р.     | М701АА   | Превышение скорости(от 20 до 40)           | 2020-01-12   | 2020-01-22 |
|     2 | Баранов П.Е.     | Р523ВТ   | Превышение скорости(от 40 до 60)           | 2020-02-14   | 2020-03-06 |
|     3 | Яковлев Г.Р.     | Т330ТТ   | Проезд на запрещающий сигнал             | 2020-03-03   | 2020-03-23 |
+------------+-----------------------+--------------+--------------------------------------------------------+----------------+--------------+
3 rows in set (0.00 sec)
mysql> SELECT * FROM fine;
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                       | sum_fine | date_violation | date_payment |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
|   1 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 500.00 | 2020-01-12   | 2020-01-17 |
|   2 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-01-14   | 2020-02-27 |
|   3 | Яковлев Г.Р.      | Т330ТТ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-23   | 2020-02-23 |
|   4 | Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-12   | NULL     |
|   5 | Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-02-01   | NULL     |
|   6 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 2000.00 | 2020-02-14   | NULL     |
|   7 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 2000.00 | 2020-02-23   | NULL     |
|   8 | Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-03-03   | NULL     |
|   9 | Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           |   NULL | 2020-01-12   | 2020-01-22 |
|   10 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           |   NULL | 2020-02-14   | 2020-03-06 |
|   11 | Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             |   NULL | 2020-03-03   | 2020-03-23 |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
11 rows in set (0.00 sec)
mysql> DELETE FROM fine WHERE sum_fine IS Null;
Query OK, 3 rows affected (0.03 sec)
mysql> SELECT * FROM fine;
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                       | sum_fine | date_violation | date_payment |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
|   1 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 500.00 | 2020-01-12   | 2020-01-17 |
|   2 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-01-14   | 2020-02-27 |
|   3 | Яковлев Г.Р.      | Т330ТТ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-23   | 2020-02-23 |
|   4 | Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-12   | NULL     |
|   5 | Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-02-01   | NULL     |
|   6 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 2000.00 | 2020-02-14   | NULL     |
|   7 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 2000.00 | 2020-02-23   | NULL     |
|   8 | Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-03-03   | NULL     |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
8 rows in set (0.01 sec)
Query OK, 3 rows affected (0.07 sec)
Rows matched: 3 Changed: 3 Warnings: 0
mysql> SELECT * FROM fine;
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                       | sum_fine | date_violation | date_payment |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
|   1 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 500.00 | 2020-01-12   | 2020-01-17 |
|   2 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-01-14   | 2020-02-27 |
|   3 | Яковлев Г.Р.      | Т330ТТ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-23   | 2020-02-23 |
|   4 | Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           | 250.00 | 2020-01-12   | 2020-01-22 |
|   5 | Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-02-01   | NULL     |
|   6 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 2000.00 | 2020-02-14   | 2020-03-06 |
|   7 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 2000.00 | 2020-02-23   | NULL     |
|   8 | Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             | 500.00 | 2020-03-03   | 2020-03-23 |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
8 rows in set (0.00 sec)
Task:
Создать новую таблицу back_payment, куда внести информацию о неоплаченных штрафах (Фамилию и инициалы водителя, номер машины, нарушение, сумму штрафа и дату нарушения) из таблицы fine.
# Написание Sql запросов.
Decision:
mysql> CREATE TABLE back_payment AS
SELECT name, number_plate, violation, sum_fine, date_violation
FROM fine
WHERE date_payment IS NULL;
Query OK, 2 rows affected (0.43 sec)
Records: 2 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM back_payment;
+-------------------------+--------------+--------------------------------------------------------+----------+----------------+
| name          | number_plate | violation                       | sum_fine | date_violation |
+-------------------------+--------------+--------------------------------------------------------+----------+----------------+
| Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-02-01   |
| Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 2000.00 | 2020-02-23   |
+-------------------------+--------------+--------------------------------------------------------+----------+----------------+
2 rows in set (0.00 sec)
Task:
Удалить из таблицы fine информацию о нарушениях, совершенных раньше 1 февраля 2020 года.
# Написание Sql запросов.
Decision:
mysql> SELECT * FROM fine;
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                       | sum_fine | date_violation | date_payment |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
|   1 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 500.00 | 2020-01-12   | 2020-01-17 |
|   2 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 1000.00 | 2020-01-14   | 2020-02-27 |
|   3 | Яковлев Г.Р.      | Т330ТТ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-01-23   | 2020-02-23 |
|   4 | Яковлев Г.Р.      | М701АА   | Превышение скорости(от 20 до 40)           | 250.00 | 2020-01-12   | 2020-01-22 |
|   5 | Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-02-01   | NULL     |
|   6 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 2000.00 | 2020-02-14   | 2020-03-06 |
|   7 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 2000.00 | 2020-02-23   | NULL     |
|   8 | Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             | 500.00 | 2020-03-03   | 2020-03-23 |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
8 rows in set (0.00 sec)
mysql> DELETE FROM fine
WHERE date_violation < '2020-02-01';
Query OK, 4 rows affected (0.13 sec)
mysql> SELECT * FROM fine;
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                       | sum_fine | date_violation | date_payment |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
|   5 | Колесов С.П.      | К892АХ   | Превышение скорости(от 20 до 40)           | 500.00 | 2020-02-01   | NULL     |
|   6 | Баранов П.Е.      | Р523ВТ   | Превышение скорости(от 40 до 60)           | 2000.00 | 2020-02-14   | 2020-03-06 |
|   7 | Абрамова К.А.     | О111АВ   | Проезд на запрещающий сигнал             | 2000.00 | 2020-02-23   | NULL     |
|   8 | Яковлев Г.Р.      | Т330ТТ   | Проезд на запрещающий сигнал             | 500.00 | 2020-03-03   | 2020-03-23 |
+---------+-------------------------+--------------+--------------------------------------------------------+----------+----------------+--------------+
4 rows in set (0.00 sec)
Task:
База данных Книжный интернет-магазин.
В интернет-магазине продаются книги. Каждая книга имеет название, написана одним автором, относится к одному жанру, имеет определенную цену. В магазине доступно по нескольку экземпляров каждой книги.
Покупатель регистрируется на сайте интернет-магазина, указывает свои имя и фамилию, адрес электронной почты и город проживания. Он может сформировать один или несколько заказов, написать несколько пожеланий к каждому заказу. Каждый заказ включает в себя одну или несколько книг, каждую книгу можно заказать в нескольких экземплярах. Затем заказ проходит ряд последовательных этапов (операций): он оплачивается, упаковывается, передается курьеру или транспортной компании для транспортировки и, наконец, доставляется покупателю. Дата каждой операции фиксирована. Среднее время доставки книг известно для каждого города.
В то же время магазин ведет учет книг, их количество уменьшается при покупке, увеличивается при поступлении товара, когда количество исчерпано, размещен заказ и т.д. Разработать базу данных Книжный интернет-магазин
# Написание Sql запросов.
Decision:
mysql> CREATE DATABASE OnlineBookStore;
Query OK, 1 row affected (0.32 sec)
mysql> show databases;
+--------------------+
| Database     |
+--------------------+
| OnlineBookStore  |
| information_schema |
| mysql       |
| performance_schema |
| sys        |
| testbdserver   |
+--------------------+
6 rows in set (0.01 sec)
mysql> USE OnlineBookStore;
Database changed
Task:
Установите связи между информационными объектами Жанр и Книга, Город и Клиент, Заказ и Этапы. Выберите верную концептуальную схему.
Наполнить таблицы информацией.
Структура и наполнение таблиц базы данных Интернет-магазин книг»
Таблица author (создание, заполнение):
author_id   name_author
1   Булгаков М.А.
2   Достоевский Ф.М.
3   Есенин С.А.
4   Пастернак Б.Л.
5   Лермонтов М.Ю.
Таблица genre (создание, заполнение, рассмотрено в качестве примеров):
genre_id   name_genre
1   Роман
2   Поэзия
3   Приключения
Таблица book (создание, заполнение):
book_id   title   author_id   genre_id   price   amount
1   Мастер и Маргарита   1   1   670.99   3
2   Белая гвардия   1   1   540.50   5
3   Идиот   2   1   460.00   10
4   Братья Карамазовы   2   1   799.01   2
5   Игрок   2   1   480.50   10
6   Стихотворения и поэмы   3   2   650.00   15
7   Черный человек   3   2   570.20   6
8   Лирика   4   2   518.99   2
Таблица city (в последнем столбце указано примерное количество дней, необходимое для доставки товара в каждый город):
city_id   name_city   days_delivery
INT PRIMARY KEY
AUTO_INCREMENT   VARCHAR(30)   INT
1   Москва   5
2   Санкт-Петербург   3
3   Владивосток   12
Таблица client:
client_id   name_client   city_id   email
INT PRIMARY KEY
AUTO_INCREMENT   VARCHAR(50)   INT   VARCHAR(30)
1   Баранов Павел   3   baranov@test
2   Абрамова Катя   1   abramova@test
3   Семенонов Иван   2   semenov@test
4   Яковлева Галина   1   yakovleva@test
Таблица buy (столбец buy_description предназначен для пожеланий покупателя, которые он хочет добавить в свой заказ, если пожеланий нет - поле остается пустым):
buy_id   buy_description   client_id
INT PRIMARY KEY
AUTO_INCREMENT   VARCHAR(100)   INT
1   Доставка только вечером   1
2     3
3   Упаковать каждую книгу по отдельности   2
4     1
Таблица buy_book:
buy_book_id   buy_id   book_id   amount
INT PRIMARY KEY
AUTO_INCREMENT   INT   INT   INT
1   1   1   1
2   1   7   2
3   1   3   1
4   2   8   2
5   3   3   2
6   3   2   1
7   3   1   1
8   4   5   1
Таблица step:
step_id   name_step
INT PRIMARY KEY
AUTO_INCREMENT   VARCHAR(30)
1   Оплата
2   Упаковка
3   Транспортировка
4   Доставка
Таблица buy_step ( если столбец date_step_end не заполнен (имеет значение Null), это означает что операция еще не выполнена, например для заказа с id 2, книги переданы для доставки 2020-03-02, но еще не доставлены):
buy_step_id   buy_id   step_id   date_step_beg   date_step_end
INT PRIMARY KEY
AUTO_INCREMENT   INT   INT   DATE   DATE
1   1   1   2020-02-20   2020-02-20
2   1   2   2020-02-20   2020-02-21
3   1   3   2020-02-22   2020-03-07
4   1   4   2020-03-08   2020-03-08
5   2   1   2020-02-28   2020-02-28
6   2   2   2020-02-29   2020-03-01
7   2   3   2020-03-02  
8   2   4    
9   3   1   2020-03-05   2020-03-05
10   3   2   2020-03-05   2020-03-06
11   3   3   2020-03-06   2020-03-10
12   3   4   2020-03-11  
13   4   1   2020-03-20  
14   4   2    
15   4   3    
16   4   4
# Написание Sql запросов.
Decision:
mysql> CREATE TABLE author( author_id INT PRIMARY KEY AUTO_INCREMENT, name_author VARCHAR(30));
Query OK, 0 rows affected (0.14 sec)
mysql> INSERT INTO author (name_author) VALUES ('Булгаков М.А.'), ('Достоевский Ф.М.'), ('Есенин С.А.'), ('Пастернак Б.Л.'), ('Лермонтов М.Ю.');
Query OK, 5 rows affected (0.04 sec)
Records: 5 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM author;
+-----------+-------------------------------+
| author_id | name_author         |
+-----------+-------------------------------+
|     1 | Булгаков М.А.         |
|     2 | Достоевский Ф.М.       |
|     3 | Есенин С.А.         |
|     4 | Пастернак Б.Л.        |
|     5 | Лермонтов М.Ю.        |
+-----------+-------------------------------+
5 rows in set (0.00 sec)
mysql> CREATE TABLE genre(genre_id INT PRIMARY KEY AUTO_INCREMENT, name_genre VARCHAR(30));
mysql> INSERT INTO genre(name_genre) VALUES ('Роман'), ('Поэзия'), ('Приключения');
Query OK, 3 rows affected (0.14 sec)
Records: 3 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM genre;
+----------+------------------------+
| genre_id | name_genre       |
+----------+------------------------+
|    1 | Роман         |
|    2 | Поэзия         |
|    3 | Приключения      |
+----------+------------------------+
3 rows in set (0.00 sec)
mysql> CREATE TABLE book
(
book_id INT PRIMARY KEY AUTO_INCREMENT,
title VARCHAR(50),
author_id INT NOT NULL,
genre_id INT,
price DECIMAL(8, 2),
amount INT,
FOREIGN KEY (author_id)
  REFERENCES author (author_id)
  ON DELETE CASCADE,
FOREIGN KEY (genre_id)
  REFERENCES genre (genre_id)
  ON DELETE SET NULL
);
Query OK, 0 rows affected (0.24 sec)
mysql> INSERT INTO book (title, author_id, genre_id, price, amount)
VALUES
('Мастер и Маргарита', 1, 1, 670.99, 3),
('Белая гвардия ', 1, 1, 540.50, 5),
('Идиот', 2, 1, 460.00, 10),
('Братья Карамазовы', 2, 1, 799.01, 2),
('Игрок', 2, 1, 480.50, 10),
('Стихотворения и поэмы', 3, 2, 650.00, 15),
('Черный человек', 3, 2, 570.20, 6),
('Лирика', 4, 2, 518.99, 2);
Query OK, 8 rows affected (0.06 sec)
Records: 8 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM book;
+---------+------------------------------------------+-----------+----------+--------+--------+
| book_id | title                  | author_id | genre_id | price | amount |
+---------+------------------------------------------+-----------+----------+--------+--------+
|   1 | Мастер и Маргарита           |     1 |    1 | 670.99 |   3 |
|   2 | Белая гвардия              |     1 |    1 | 540.50 |   5 |
|   3 | Идиот                  |     2 |    1 | 460.00 |   10 |
|   4 | Братья Карамазовы            |     2 |    1 | 799.01 |   2 |
|   5 | Игрок                  |     2 |    1 | 480.50 |   10 |
|   6 | Стихотворения и поэмы          |     3 |    2 | 650.00 |   15 |
|   7 | Черный человек             |     3 |    2 | 570.20 |   6 |
|   8 | Лирика                 |     4 |    2 | 518.99 |   2 |
+---------+------------------------------------------+-----------+----------+--------+--------+
8 rows in set (0.00 sec)
mysql> CREATE TABLE city(
city_id INT PRIMARY KEY AUTO_INCREMENT,
name_city VARCHAR(30),
days_delivery INT
);
Query OK, 0 rows affected (0.25 sec)
mysql> INSERT INTO city(name_city, days_delivery)
VALUES
('Москва', 5),
('Санкт-Петербург', 3),
('Владивосток', 12);
Query OK, 3 rows affected (0.06 sec)
Records: 3 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM city;
+---------+-------------------------------+---------------+
| city_id | name_city           | days_delivery |
+---------+-------------------------------+---------------+
|   1 | Москва            |       5 |
|   2 | Санкт-Петербург       |       3 |
|   3 | Владивосток         |      12 |
+---------+-------------------------------+---------------+
3 rows in set (0.00 sec)
mysql> CREATE TABLE client (
client_id INT PRIMARY KEY AUTO_INCREMENT,
name_client VARCHAR(50),
city_id INT,
email VARCHAR(30),
FOREIGN KEY (city_id) REFERENCES city (city_id)
);
Query OK, 0 rows affected (0.24 sec)
mysql> INSERT INTO client(name_client, city_id, email)
VALUES
('Баранов Павел', 3, 'baranov@test'),
('Абрамова Катя', 1, 'abramova@test'),
('Семенонов Иван', 2, 'semenov@test'),
('Яковлева Галина', 1, 'yakovleva@test');
Query OK, 4 rows affected (0.12 sec)
Records: 4 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM client;
+-----------+-------------------------------+---------+----------------+
| client_id | name_client         | city_id | email     |
+-----------+-------------------------------+---------+----------------+
|     1 | Баранов Павел         |   3 | baranov@test |
|     2 | Абрамова Катя         |   1 | abramova@test |
|     3 | Семенонов Иван        |   2 | semenov@test |
|     4 | Яковлева Галина       |   1 | yakovleva@test |
+-----------+-------------------------------+---------+----------------+
4 rows in set (0.01 sec)
mysql> CREATE TABLE buy(
buy_id INT PRIMARY KEY AUTO_INCREMENT,
buy_description VARCHAR(100),
client_id INT,
FOREIGN KEY (client_id) REFERENCES client (client_id)
);
Query OK, 0 rows affected (0.24 sec)
mysql> INSERT INTO buy (buy_description, client_id)
VALUES
('Доставка только вечером', 1),
(NULL, 3),
('Упаковать каждую книгу по отдельности', 2),
(NULL, 1);
Query OK, 4 rows affected (0.04 sec)
Records: 4 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM buy;
+--------+------------------------------------------------------------------------+-----------+
| buy_id | buy_description                            | client_id |
+--------+------------------------------------------------------------------------+-----------+
|   1 | Доставка только вечером                        |     1 |
|   2 | NULL                                 |     3 |
|   3 | Упаковать каждую книгу по отдельности                 |     2 |
|   4 | NULL                                 |     1 |
+--------+------------------------------------------------------------------------+-----------+
4 rows in set (0.00 sec)
mysql> CREATE TABLE buy_book (
buy_book_id INT PRIMARY KEY AUTO_INCREMENT,
buy_id INT,
book_id INT,
amount INT,
FOREIGN KEY (buy_id) REFERENCES buy (buy_id),
FOREIGN KEY (book_id) REFERENCES book (book_id)
);
Query OK, 0 rows affected (0.24 sec)
mysql> INSERT INTO buy_book(buy_id, book_id, amount)
VALUES
(1, 1, 1),
(1, 7, 2),
(1, 3, 1),
(2, 8, 2),
(3, 3, 2),
(3, 2, 1),
(3, 1, 1),
(4, 5, 1);
Query OK, 8 rows affected (0.03 sec)
Records: 8 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM buy_book;
+-------------+--------+---------+--------+
| buy_book_id | buy_id | book_id | amount |
+-------------+--------+---------+--------+
|     1 |   1 |   1 |   1 |
|     2 |   1 |   7 |   2 |
|     3 |   1 |   3 |   1 |
|     4 |   2 |   8 |   2 |
|     5 |   3 |   3 |   2 |
|     6 |   3 |   2 |   1 |
|     7 |   3 |   1 |   1 |
|     8 |   4 |   5 |   1 |
+-------------+--------+---------+--------+
8 rows in set (0.00 sec)
mysql> CREATE TABLE step (
step_id INT PRIMARY KEY AUTO_INCREMENT,
name_step VARCHAR(30)
);
Query OK, 0 rows affected (0.18 sec)
mysql> INSERT INTO step(name_step)
VALUES
('Оплата'),
('Упаковка'),
('Транспортировка'),
('Доставка');
Query OK, 4 rows affected (0.03 sec)
Records: 4 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM step;
+---------+--------------------------------+
| step_id | name_step           |
+---------+--------------------------------+
|   1 | Оплата             |
|   2 | Упаковка           |
|   3 | Транспортировка        |
|   4 | Доставка           |
+---------+--------------------------------+
4 rows in set (0.00 sec)
mysql> CREATE TABLE buy_step (
buy_step_id INT PRIMARY KEY AUTO_INCREMENT,
buy_id INT,
step_id INT,
date_step_beg DATE,
date_step_end DATE,
FOREIGN KEY (buy_id) REFERENCES buy (buy_id),
FOREIGN KEY (step_id) REFERENCES step (step_id)
);
Query OK, 0 rows affected (0.26 sec)
mysql> INSERT INTO buy_step(buy_id, step_id, date_step_beg, date_step_end)
VALUES (1, 1, '2020-02-20', '2020-02-20'),
(1, 2, '2020-02-20', '2020-02-21'),
(1, 3, '2020-02-22', '2020-03-07'),
(1, 4, '2020-03-08', '2020-03-08'),
(2, 1, '2020-02-28', '2020-02-28'),
(2, 2, '2020-02-29', '2020-03-01'),
(2, 3, '2020-03-02', NULL),
(2, 4, NULL, NULL),
(3, 1, '2020-03-05', '2020-03-05'),
(3, 2, '2020-03-05', '2020-03-06'),
(3, 3, '2020-03-06', '2020-03-10'),
(3, 4, '2020-03-11', NULL),
(4, 1, '2020-03-20', NULL),
(4, 2, NULL, NULL),
(4, 3, NULL, NULL),
(4, 4, NULL, NULL);
Query OK, 16 rows affected (0.14 sec)
Records: 16 Duplicates: 0 Warnings: 0
mysql> SELECT * FROM buy_step;
+-------------+--------+---------+---------------+---------------+
| buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
+-------------+--------+---------+---------------+---------------+
|     1 |   1 |   1 | 2020-02-20  | 2020-02-20  |
|     2 |   1 |   2 | 2020-02-20  | 2020-02-21  |
|     3 |   1 |   3 | 2020-02-22  | 2020-03-07  |
|     4 |   1 |   4 | 2020-03-08  | 2020-03-08  |
|     5 |   2 |   1 | 2020-02-28  | 2020-02-28  |
|     6 |   2 |   2 | 2020-02-29  | 2020-03-01  |
|     7 |   2 |   3 | 2020-03-02  | NULL     |
|     8 |   2 |   4 | NULL     | NULL     |
|     9 |   3 |   1 | 2020-03-05  | 2020-03-05  |
|     10 |   3 |   2 | 2020-03-05  | 2020-03-06  |
|     11 |   3 |   3 | 2020-03-06  | 2020-03-10  |
|     12 |   3 |   4 | 2020-03-11  | NULL     |
|     13 |   4 |   1 | 2020-03-20  | NULL     |
|     14 |   4 |   2 | NULL     | NULL     |
|     15 |   4 |   3 | NULL     | NULL     |
|     16 |   4 |   4 | NULL     | NULL     |
+-------------+--------+---------+---------------+---------------+
16 rows in set (0.00 sec)
Task:
Вывести все заказы Баранова Павла (id заказа, какие книги, по какой цене и в каком количестве он заказал) в отсортированном по номеру заказа и названиям книг виде.
Decision:
mysql> SELECT client_id, name_client FROM client;
+-----------+-------------------------------+
| client_id | name_client         |
+-----------+-------------------------------+
|     1 | Баранов Павел         |
|     2 | Абрамова Катя         |
|     3 | Семенонов Иван        |
|     4 | Яковлева Галина       |
+-----------+-------------------------------+
4 rows in set (0.01 sec)
mysql> SELECT buy_id, client_id FROM buy;
+--------+-----------+
| buy_id | client_id |
+--------+-----------+
|   1 |     1 |
|   4 |     1 |
|   3 |     2 |
|   2 |     3 |
+--------+-----------+
4 rows in set (0.00 sec)
mysql> SELECT buy_book_id, buy_id, book_id, amount FROM buy_book;
+-------------+--------+---------+--------+
| buy_book_id | buy_id | book_id | amount |
+-------------+--------+---------+--------+
|     1 |   1 |   1 |   1 |
|     2 |   1 |   7 |   2 |
|     3 |   1 |   3 |   1 |
|     4 |   2 |   8 |   2 |
|     5 |   3 |   3 |   2 |
|     6 |   3 |   2 |   1 |
|     7 |   3 |   1 |   1 |
|     8 |   4 |   5 |   1 |
+-------------+--------+---------+--------+
8 rows in set (0.00 sec)
mysql> SELECT book_id, title, price, amount FROM book;
+---------+------------------------------------------+--------+--------+
| book_id | title                  | price | amount |
+---------+------------------------------------------+--------+--------+
|   1 | Мастер и Маргарита           | 670.99 |   3 |
|   2 | Белая гвардия              | 540.50 |   5 |
|   3 | Идиот                  | 460.00 |   10 |
|   4 | Братья Карамазовы            | 799.01 |   2 |
|   5 | Игрок                  | 480.50 |   10 |
|   6 | Стихотворения и поэмы          | 650.00 |   15 |
|   7 | Черный человек             | 570.20 |   6 |
|   8 | Лирика                 | 518.99 |   2 |
+---------+------------------------------------------+--------+--------+
8 rows in set (0.00 sec)
mysql> SELECT buy_book.buy_id, book.title, book.price, buy_book.amount
FROM
client
INNER JOIN buy ON client.client_id=buy.client_id
INNER JOIN buy_book ON buy_book.buy_id = buy.buy_id
INNER JOIN book ON buy_book.book_id=book.book_id
WHERE name_client = 'Баранов Павел'
ORDER BY buy.buy_id, title;
+--------+------------------------------------+--------+--------+
| buy_id | title               | price | amount |
+--------+------------------------------------+--------+--------+
|   1 | Идиот               | 460.00 |   1 |
|   1 | Мастер и Маргарита         | 670.99 |   1 |
|   1 | Черный человек           | 570.20 |   2 |
|   4 | Игрок               | 480.50 |   1 |
+--------+------------------------------------+--------+--------+
4 rows in set (0.01 sec)
Task:
Посчитать, сколько раз была заказана каждая книга, для книги вывести ее автора (нужно посчитать, в каком количестве заказов фигурирует каждая книга). Вывести фамилию и инициалы автора, название книги, последний столбец назвать Количество. Результат отсортировать сначала по фамилиям авторов, а потом по названиям книг
# Написание Sql запросов.
Decision:
mysql> SELECT book_id, title, author_id FROM book;
+---------+------------------------------------------+-----------+
| book_id | title                  | author_id |
+---------+------------------------------------------+-----------+
|   1 | Мастер и Маргарита           |     1 |
|   2 | Белая гвардия              |     1 |
|   3 | Идиот                  |     2 |
|   4 | Братья Карамазовы            |     2 |
|   5 | Игрок                  |     2 |
|   6 | Стихотворения и поэмы          |     3 |
|   7 | Черный человек             |     3 |
|   8 | Лирика                 |     4 |
+---------+------------------------------------------+-----------+
8 rows in set (0.00 sec)
mysql> SELECT author_id, name_author FROM author;
+-----------+-------------------------------+
| author_id | name_author         |
+-----------+-------------------------------+
|     1 | Булгаков М.А.         |
|     2 | Достоевский Ф.М.       |
|     3 | Есенин С.А.         |
|     4 | Пастернак Б.Л.        |
|     5 | Лермонтов М.Ю.        |
+-----------+-------------------------------+
5 rows in set (0.00 sec)
mysql> SELECT book_id, amount FROM buy_book;
+---------+--------+
| book_id | amount |
+---------+--------+
|   1 |   1 |
|   7 |   2 |
|   3 |   1 |
|   8 |   2 |
|   3 |   2 |
|   2 |   1 |
|   1 |   1 |
|   5 |   1 |
+---------+--------+
8 rows in set (0.00 sec)
mysql> SELECT author.name_author,book.title,SUM(buy_book.amount) AS Количество
FROM
book
INNER JOIN buy_book ON book.book_id=buy_book.book_id
INNER JOIN author ON book.author_id=author.author_id
GROUP BY author.name_author, book.title
ORDER BY author.name_author, book.title;
+-------------------------------+------------------------------------+----------------------+
| name_author         | title               | Количество     |
+-------------------------------+------------------------------------+----------------------+
| Булгаков М.А.         | Белая гвардия           |          1 |
| Булгаков М.А.         | Мастер и Маргарита         |          2 |
| Достоевский Ф.М.       | Игрок               |          1 |
| Достоевский Ф.М.       | Идиот               |          3 |
| Есенин С.А.         | Черный человек           |          2 |
| Пастернак Б.Л.        | Лирика               |          2 |
+-------------------------------+------------------------------------+----------------------+
6 rows in set (0.01 sec)
mysql> SELECT author.name_author,book.title,SUM(buy_book.amount) AS Количество
FROM
book
LEFT JOIN buy_book ON book.book_id=buy_book.book_id
LEFT JOIN author ON book.author_id=author.author_id
GROUP BY author.name_author,book.title
ORDER BY author.name_author,book.title;
+-------------------------------+------------------------------------------+----------------------+
| name_author         | title                  | Количество     |
+-------------------------------+------------------------------------------+----------------------+
| Булгаков М.А.         | Белая гвардия              |          1 |
| Булгаков М.А.         | Мастер и Маргарита           |          2 |
| Достоевский Ф.М.       | Братья Карамазовы            |         NULL |
| Достоевский Ф.М.       | Игрок                  |          1 |
| Достоевский Ф.М.       | Идиот   &nbs
Task:
Установка PyQt5, создание первого GUI приложения
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
- https://pypi.org/project/PyQt5/ - cmd - от имени администратора
- C:\Windows\system32>pip install PyQt5
- https://build-system.fman.io/static/public/files/Qt%20Designer%20Setup.exe - Запуск - install - ok - Запуск программы QT - Dialog with Buttons Bottom - create - Widget BoX - List View> - Group Box> - push buttom> - Check box> -Text Edit> - save - .ui - запуск программы idle python - save - .py - (https://build-system.fman.io/qt-designer-download)
from PyQt5 import uic
from PyQt5.QtWidgets import QApplication
Form, Window = uic.loadUiType("testqt0.ui")
app = QApplication([])
window = Window()
form = Form()
form.setupUi(window)
window.show()
app.exec()
- run
tuser@kvmubuntu:~$ idle
Task:
Applications created in python using the tkinter module
# Разработка Calendar.
Decision:
tuser@kvmubuntu:~$ vim Py-ApplicationsCreatedInPythonUsingTheTkinterModule-Calendar.py
tuser@kvmubuntu:~$ cat Py-ApplicationsCreatedInPythonUsingTheTkinterModule-Calendar.py
from tkinter import *
import calendar
import datetime
root=Tk()
root.title('Calendar')
days=[]
now=datetime.datetime.now()
year=now.year
month=now.month
back_button=Button(root,text='<')
back_button.grid(row=0, column=0, sticky=NSEW)
next_button=Button(root,text='>')
next_button.grid(row=0, column=6, sticky=NSEW)
info_label=Label(root, text='0', width=1, height=1, font='Aria; 16 bold', fg='blue')
info_label.grid(row=0, column=1, columnspan=5, sticky=NSEW)
for n in range(7):
        lbl=Label(root, text=calendar.day_abbr[n], width=1, height=1, font='Arial 10 bold', fg='darkblue')
        lbl.grid(row=1, column=n, sticky=NSEW)
for row in range(6):
        for col in range(7):
                lbl=Label(root, text='0', width=4, height=2, font='Arial 16 bold')
                lbl.grid(row=row+2, column=col, sticky=NSEW)
                days.append(lbl)
root.mainloop()
tuser@kvmubuntu:~$ vim Py-ApplicationsCreatedInPythonUsingTheTkinterModule-Calendar.py    
tuser@kvmubuntu:~$ cat Py-ApplicationsCreatedInPythonUsingTheTkinterModule-Calendar.py    
from tkinter import *
import calendar
import datetime
def fill():
        info_label['text']=calendar.month_name[month]+', '+str(year)
        month_days=calendar.monthrange(year, month)[1]
        if month==1:
                back_month_days=calendar.monthrange(year-1, 12)[1]
        else:
                back_month_days=calendar.monthrange(year, month-1)[1]
        week_day=calendar.monthrange(year, month)[0]
        for n in range(month_days):
                days[n + week_day]['text']=n+1
                days[n + week_day]['fg']='black'
                if year == now.year and month == now.month and n == now.day:
                        days[week_day]['bg']='green'
                        days[n + week_day]['bg']='grey'
                else:
                        days[n + week_day]['bg']='gray'
root=Tk()
root.title('Calendar')
days=[]
now=datetime.datetime.now()
year=now.year
month=now.month
back_button=Button(root,text='<')
back_button.grid(row=0, column=0, sticky=NSEW)
next_button=Button(root,text='>')
next_button.grid(row=0, column=6, sticky=NSEW)
info_label=Label(root, text='0', width=1, height=1, font='Aria; 16 bold', fg='blue')
info_label.grid(row=0, column=1, columnspan=5, sticky=NSEW)
for n in range(7):
        lbl=Label(root, text=calendar.day_abbr[n], width=1, height=1, font='Arial 10 bold', fg='darkblue')
        lbl.grid(row=1, column=n, sticky=NSEW)
for row in range(6):
        for col in range(7):
                lbl=Label(root, text='0', width=4, height=2, font='Arial 16 bold')
                lbl.grid(row=row+2, column=col, sticky=NSEW)
                days.append(lbl)
fill()
root.mainloop()
tuser@kvmubuntu:~$ vim Py-ApplicationsCreatedInPythonUsingTheTkinterModule-Calendar.py    
tuser@kvmubuntu:~$ cat Py-ApplicationsCreatedInPythonUsingTheTkinterModule-Calendar.py    
from tkinter import *
import calendar
import datetime
def fill():
        info_label['text']=calendar.month_name[month]+', '+str(year)
        month_days=calendar.monthrange(year, month)[1]
        if month==1:
                back_month_days=calendar.monthrange(year-1, 12)[1]
        else:
                back_month_days=calendar.monthrange(year, month-1)[1]
        week_day=calendar.monthrange(year, month)[0]
        for n in range(month_days):
                days[n + week_day]['text']=n+1
                days[n + week_day]['fg']='black'
                if year == now.year and month == now.month and n == now.day:
                        days[week_day]['bg']='green'
                        days[n + week_day]['bg']='grey'
                else:
                        days[n + week_day]['bg']='gray'
        for n in range(week_day):
                days[week_day-n-1]['text']=back_month_days-n
                days[week_day-n-1]['fg']='gray'
                days[week_day-n-1]['bg']='#f3f3f3'
        for n in range(6*7-month_days-week_day):
                days[week_day+month_days+n]['text']=n+1
                days[week_day+month_days+n]['fg']='gray'
                days[week_day+month_days+n]['bg']='#f3f3f3'
root=Tk()
root.title('Calendar')
days=[]
now=datetime.datetime.now()
year=now.year
month=now.month
back_button=Button(root,text='<')
back_button.grid(row=0, column=0, sticky=NSEW)
next_button=Button(root,text='>')
next_button.grid(row=0, column=6, sticky=NSEW)
info_label=Label(root, text='0', width=1, height=1, font='Aria; 16 bold', fg='blue')
info_label.grid(row=0, column=1, columnspan=5, sticky=NSEW)
for n in range(7):
        lbl=Label(root, text=calendar.day_abbr[n], width=1, height=1, font='Arial 10 bold', fg='darkblue')
        lbl.grid(row=1, column=n, sticky=NSEW)
for row in range(6):
        for col in range(7):
                lbl=Label(root, text='0', width=4, height=2, font='Arial 16 bold')
                lbl.grid(row=row+2, column=col, sticky=NSEW)
                days.append(lbl)
fill()
root.mainloop()
tuser@kvmubuntu:~$ vim Py-ApplicationsCreatedInPythonUsingTheTkinterModule-Calendar.py    
tuser@kvmubuntu:~$ cat Py-ApplicationsCreatedInPythonUsingTheTkinterModule-Calendar.py    
from tkinter import *
import calendar
import datetime
def back():
	global month, year
	month -= 1
	if month == 0:
		month=12
		year -= 1
	fill()
def next():
	global month, year
	month += 1
	if month == 13:
		month=11
		year += 1
	fill()
def fill():
	info_label['text']=calendar.month_name[month]+', '+str(year)
	month_days=calendar.monthrange(year, month)[1]
	if month==1:
		back_month_days=calendar.monthrange(year-1, 12)[1]
	else:
		back_month_days=calendar.monthrange(year, month-1)[1]
	week_day=calendar.monthrange(year, month)[0]
	for n in range(month_days):
		days[n + week_day]['text']=n+1
		days[n + week_day]['fg']='black'
		if year == now.year and month == now.month and n == now.day:
			days[week_day]['bg']='green'
			days[n + week_day]['bg']='grey'
		else:
			days[n + week_day]['bg']='gray'
	for n in range(week_day):
		days[week_day-n-1]['text']=back_month_days-n
		days[week_day-n-1]['fg']='gray'
		days[week_day-n-1]['bg']='#f3f3f3'
	for n in range(6*7-month_days-week_day):
		days[week_day+month_days+n]['text']=n+1
		days[week_day+month_days+n]['fg']='gray'
		days[week_day+month_days+n]['bg']='#f3f3f3'
root=Tk()
root.title('Calendar')
days=[]
now=datetime.datetime.now()
year=now.year
month=now.month
back_button=Button(root,text='<',command=back)
back_button.grid(row=0, column=0, sticky=NSEW)
next_button=Button(root,text='>',command=next)
next_button.grid(row=0, column=6, sticky=NSEW)
info_label=Label(root, text='0', width=1, height=1, font='Aria; 16 bold', fg='blue')
info_label.grid(row=0, column=1, columnspan=5, sticky=NSEW)
for n in range(7):
	lbl=Label(root, text=calendar.day_abbr[n], width=1, height=1, font='Arial 10 bold', fg='darkblue')
	lbl.grid(row=1, column=n, sticky=NSEW)
for row in range(6):	
	for col in range(7):
		lbl=Label(root, text='0', width=4, height=2, font='Arial 16 bold')
		lbl.grid(row=row+2, column=col, sticky=NSEW)
		days.append(lbl)
fill()
root.mainloop()
Source: 
# https://www.youtube.com/playlist?list=PL9aGGxgLOVw44btcB1CM6j_jhrl7L95aH
Task:
# Разработка Високосный год
Decision:
year=int(input("Укажите год: "))
if year%4==0:
    if year%100==0:
        if year%400==0:
            print("Это високосный год")
        else:
            print("Это не високосный год")
    else:
        print("Это високосный год")
else:
    print("Это не високосный год")
Task:
# Разработка Погода
Decision:
#/usr/bin/python
# -*- encoding: utf-8 -*-
import pyowm
city=input('Какой город вас интересует? ')
owm = pyowm.OWM('566b41c32a6a99107ba96c215e9fafea')  # Yeu MUST provide a valid API key
# Have a pro subscription? Then use:
# owm = pyowm.OWM(API_key='your-API-key', subscription_type='pro')
# Search for current weather in London (Great Britain)
observation = owm.weather_at_place('city')
w = observation.get_weather()
temperature=w.get_temperature('celsius')['temp']
print("В городе" + city  +" Сейчас температура: " + str(temperature))                      # <Weather - reference time=2013-12-18 09:20,
                              # status=Clouds>
# Weather details
#w.get_wind()                  # {'speed': 4.6, 'deg': 330}
#w.get_humidity()              # 87
#w.get_temperature('celsius')  # {'temp_max': 10.5, 'temp': 9.7, 'temp_min': 9.0}
# Search current weather observations in the surroundings of
# lat=22.57W, lon=43.12S (Rio de Janeiro, BR)
#observation_list = owm.weather_around_coords(-2257, -43.12)
TasK:
# Разработка Paint.
Decision:
from kivy.app import App #1
from kivy.uix.widget import Widget #1
from kivy.graphics import (Color, Ellipse, Rectangle, Line) #3 чтобы начать что то рисовать нужны граф инструкци
#google -kivy graphics
from random import random
from kivy.uix.button import Button #23
from kivy.core.window import Window#34 чтоб узнать ширину и высоту окна
class PainterWidget(Widget): #2
    #4 pass #2
    ''' #12 Можем удалить
    def __init__(self, **kwargs):#5 теперь можем начать рисовать, сначала сделаемм инициализацию
        super(PainterWidget, self).__init__(**kwargs) #5

        with self.canvas:#6 после этого нужно обратиться к self canvas
            Color(0,1,0,1)#7 можно уже начать перечислять нужные граф инструкции, Цвет
            #9 Ellipse(pos=(100,100), size=(50,50))#7 адрессовать круг, если запусти увидим зеленый круг
            #9 Line(points=(100, 100, 150, 200, 200, 100), close=True, width=5)#7 Нарисуется треугольник
            self.line=Line(points=(), width=10, joint='miter', cap='square')#8 Можно сделать по другому. создадим линию
    '''
    def on_touch_down(self, touch):#10 Сделаем еще событие, которая вызывается тогда когда нажимается мышь или как при андроеде. touch содержит инфу о клике.
        #12 self.line.points += (touch.x, touch.y)#11 линию которую мы создали в #10, дополняемя точками, которым мы кликаем. на окошке мы увидим черный экран, и когда нажмем один раз и второй раз в другом есте пояится линия
        with self.canvas:#13 нарисуем круг зеленого цвет  с радиусом 30
            Color(random(),random(),random(),1)#13
            rad=30#13
            Ellipse(pos=(touch.x-rad/2, touch.y-rad/2), size=(rad,rad))#13 -rad/2 это чтоб рисовался по центру мыши
            #13 на экране при клике на любое место появится точки
            touch.ud['line']=Line(points=(touch.x, touch.y), width=15)#15 Теперь уже хотим нарисовать. с помощью ud можем передавать определенную инфу меж событиями on_touch_move и on_touch_down. И создадим ячейку line            
    def on_touch_move(self, touch):#14 добавим еще одно событие, 
        #16 pass
        touch.ud['line'].points += (touch.x, touch.y)#17 на эране теперь уже что то рисуем
class PaintApp(App): #1
    def build(self): #1
        #pass #1
        #19 return PainterWidget() #2
        #18 Хотим теперь чтоб наши данные записывались
        parent=Widget() #20
        #27 parent.add_widget(PainterWidget()) #21
        self.painter=PainterWidget()#28
        parent.add_widget(self.painter)#29
        parent.add_widget(Button(text='Ochistit', on_press=self.clear_canvas, size=(100, 50))) #24
        parent.add_widget(Button(text='Save', on_press=self.save, size=(100, 50), pos=(100,0))) #29
        parent.add_widget(Button(text='Screen', on_press=self.screen, size=(100, 50), pos=(200,0))) #33        
        return parent #22
    def clear_canvas(self, instance):#25 Объявим эту функцию clear_canvas
        #27 pass #26 на окошке появится кнопка
        self.painter.canvas.clear()#30 очистит
    def save(self, instance):#31 Объявим эту функцию save
        self.painter.size=(Window.size[0], Window.size[1])#33 изменим размер виджета, так как сохраняет только маленькую часть. 0 -по оси х, 1 - по оси у
        self.painter.export_to_png('image.png') #32 идет сохранение
    def screen(self, instance):#35
        Window.screenshot('screen.png')
if __name__ == '__main__': #1
    PaintApp().run() #1
Task:
# Разработка текстового редактора.
Decision:
tuser@kvmubuntu:~$ vim Py-ApplicationsCreatedInPythonUsingTheTkinterModule-TextEditor.py    
tuser@kvmubuntu:~$ cat Py-ApplicationsCreatedInPythonUsingTheTkinterModule-TextEditor.py
from tkinter import *
root=Tk()
root.title('Text editor')
root.geometry('600x700')
#root.iconbitmap('notepad.ico')
f_text=Frame(root)
f_text.pack(fill=BOTH, expand=1)
text_fild=Text(f_text,
        bg='black',
        fg='lime',
        padx=10,
        pady=10,
        wrap=WORD,
        insertbackground='blue',
        selectbackground='white',
        spacing3=10,
        width=30
        )
text_fild.pack(expand=1, fill=BOTH, side=LEFT)
scroll=Scrollbar(f_text,command=text_fild.yview)
scroll.pack(side=LEFT, fill=Y)
text_fild.config(yscrollcommand=scroll.set)
root.mainloop()
tuser@kvmubuntu:~$ vim Py-ApplicationsCreatedInPythonUsingTheTkinterModule-TextEditor.py    
tuser@kvmubuntu:~$ cat Py-ApplicationsCreatedInPythonUsingTheTkinterModule-TextEditor.py
from tkinter import *
root=Tk()
root.title('Text editor')
root.geometry('600x700')
#root.iconbitmap('notepad.ico')
main_menu=Menu(root)
#File
file_menu=Menu(main_menu, tearoff=0)
file_menu.add_command(label='Open')
file_menu.add_command(label='Save')
file_menu.add_separator()
file_menu.add_command(label='Close')
#View
view_menu=Menu(main_menu, tearoff=0)
view_menu_sub=Menu(view_menu, tearoff=0)
font_menu_sub=Menu(view_menu, tearoff=0)
view_menu_sub.add_command(label='Dark')
view_menu_sub.add_command(label='Light')
view_menu.add_cascade(label='Theme', menu=view_menu_sub)
font_menu_sub.add_command(label='Arial')
font_menu_sub.add_command(label='Comic Sans MS')
font_menu_sub.add_command(label='Times New Rowan')
view_menu.add_cascade(label='font',menu=font_menu_sub)
root.config(menu=view_menu)
#Add lists menu
main_menu.add_cascade(label='File', menu=file_menu)
main_menu.add_cascade(label='View', menu=view_menu)
root.config(menu=main_menu)
f_text=Frame(root)
f_text.pack(fill=BOTH, expand=1)
text_fild=Text(f_text,
        bg='black',
        fg='lime',
        padx=10,
        pady=10,
        wrap=WORD,
        insertbackground='blue',
        selectbackground='white',
        spacing3=10,
        width=30
        )
text_fild.pack(expand=1, fill=BOTH, side=LEFT)
scroll=Scrollbar(f_text,command=text_fild.yview)
scroll.pack(side=LEFT, fill=Y)
text_fild.config(yscrollcommand=scroll.set)
root.mainloop()
tuser@kvmubuntu:~$ cat Py-ApplicationsCreatedInPythonUsingTheTkinterModule-TextEditor.py
from tkinter import *
from tkinter import messagebox
from tkinter import filedialog
def chenge_theme(theme):
    text_fild['bg']=view_colors[theme]['text_bg']
    text_fild['fg']=view_colors[theme]['text_fg']
    text_fild['insertbackground']=view_colors[theme]['cursor']
    text_fild['selectbackground']=view_colors[theme]['select_bg']
def chenge_fonts(fontss):
    text_fild['font']=fonts[fontss]['font']
def notepad_exit():
    answer=messagebox.askokcancel('Quit','Are you sure?')
    if answer:
        root.destroy()
def open_file():
    file_path=filedialog.askopenfilename(title='choice file', filetypes=(('Text docs (*.txt)','*.txt'),('All files', '*.*')))
    if file_path:
        text_fild.delete('1.0', END)
        text_fild.insert('1.0', open(file_path, encoding='utf-8').read())
def save_file():
    file_path=filedialog.asksaveasfilename(filetypes=(('Text docs (*.txt)','*.txt'),('All files', '*.*')))
    f=open(file_path, 'w', encoding='utf-8')
    text=text_fild.get('1.0', END)
    f.write(text)
    f.close()
root=Tk()
root.title('Text editor')
root.geometry('600x700')
#root.iconbitmap('notepad.ico')
main_menu=Menu(root)
#File
file_menu=Menu(main_menu, tearoff=0)
file_menu.add_command(label='Open', command=open_file)
file_menu.add_command(label='Save', command=save_file)
file_menu.add_separator()
file_menu.add_command(label='Close', command=notepad_exit)
#View
view_menu=Menu(main_menu, tearoff=0)
view_menu_sub=Menu(view_menu, tearoff=0)
font_menu_sub=Menu(view_menu, tearoff=0)
view_menu_sub.add_command(label='Dark', command=lambda: chenge_theme('dark'))
view_menu_sub.add_command(label='Light', command=lambda: chenge_theme('light'))
view_menu.add_cascade(label='Theme', menu=view_menu_sub)
font_menu_sub.add_command(label='Arial', command=lambda: chenge_fonts('Arial'))
font_menu_sub.add_command(label='Comic Sans MS', command=lambda: chenge_fonts('CSMS'))
font_menu_sub.add_command(label='Times New Rowan', command=lambda: chenge_fonts('TNR'))
view_menu.add_cascade(label='font',menu=font_menu_sub)
root.config(menu=view_menu)
#Add lists menu
main_menu.add_cascade(label='File', menu=file_menu)
main_menu.add_cascade(label='View', menu=view_menu)
root.config(menu=main_menu)
f_text=Frame(root)
f_text.pack(fill=BOTH, expand=1)
text_fild=Text(f_text,
        bg='black',
        fg='lime',
        padx=10,
        pady=10,
        wrap=WORD,
        insertbackground='blue',
        selectbackground='white',
        spacing3=10,
        width=30,
        font='Arial 14 bold'
        )
view_colors={'dark':{'text_bg':'black',
            'text_fg':'lime',
            'cursor':'blue',
            'select_bg':'white'},
        'light':{
            'text_bg':'white',
            'text_fg':'black',
            'cursor':'blue',
            'select_bg':'black'}}
fonts={
        'Arial':{
                'font':'Arial 14 bold'
        },
        'CSMS':{
                'font':('Comic Sans MS', 14, 'bold')
        },
        'TNR':{
                'font':('Times New Roman', 14, 'bold')
        }
}
text_fild.pack(expand=1, fill=BOTH, side=LEFT)
scroll=Scrollbar(f_text,command=text_fild.yview)
scroll.pack(side=LEFT, fill=Y)
text_fild.config(yscrollcommand=scroll.set)
root.mainloop()
Source: 
# https://www.youtube.com/playlist?list=PL9aGGxgLOVw44btcB1CM6j_jhrl7L95aH
Task:
Работаем с ПДФ файлами. Выведем только первые 5 страниц
# Разработка Парсинг ПДФ файлов.
Decision:
import fitz # Фитз входит в состав библиотеки PyMuPDF
spisok=list(range(5)) # Список с номерами первых 5 страниц
docu=fitz.open("pdf_file.pdf")
docu.select(spisok) # Удаляются все, кроме 5 страниц
docu.save("pdf_file2.pdf", garbage=3)
docu.close()
"""
import  fitz
stroka_1="ABCD"; stroka_2="EFGH"; stroka_3="IJKL"
new_docu=fitz.open()
new_docu.insertPage(text=stroka_1, fontsize=11)
new_docu.insertPage(text=stroka_2, fontsize=20)
new_docu.insertPage(text=None, fontsize=20)
new_docu.insertPage(text=stroka_3, fontsize=20)
new_docu.save("NewFile.pdf", garbage=3)
new_docu_2=fitz.open("NewFile.pdf")
spisok2=list(range(new_docu_2.pageCount))
for page_number in spisok2:
    if not new_docu.getPageText(page_number):
        spisok2.remove(page_number)
new_docu_2.select(spisok2)
new_docu_2.save("NewFileResult.pdf", garbage=3)
new_docu.close()
new_docu_2.close()
"""
Task:
How to Build A Machine Learning Web App with Python
From scratch, we will deploy a linear regression model using Flask, a Python framework for developing web applications
# Разработка A Machine Learning Web App.
Decision:
tuser@kvmubuntu:~$ python3 -m venv Py-FrankAndrade-WebAppMO-Env
tuser@kvmubuntu:~$ mkdir Py-FrankAndrade-WebAppMO-Project
tuser@kvmubuntu:~$ source Py-FrankAndrade-WebAppMO-Env/bin/activate
tuser@kvmubuntu:~$ pip list
Package    Version
---------- -------
pip        22.0.2
setuptools 59.6.0
tuser@kvmubuntu:~$ pip install flask
tuser@kvmubuntu:~$ pip list
Package      Version
------------ -------
click        8.1.3
Flask        2.1.2
itsdangerous 2.1.2
Jinja2       3.1.2
MarkupSafe   2.1.1
pip          22.0.2
setuptools   59.6.0
Werkzeug     2.1.2
tuser@kvmubuntu:~$ vim Py-FrankAndrade-WebAppMO-Project/app.py
tuser@kvmubuntu:~$ cat Py-FrankAndrade-WebAppMO-Project/app.py
from flask import Flask
app = Flask(__name__)
@app.route("/")
def hello_world():
    return "<p>Hello, World!</p>"
if __name__ == "__main__":
    app.run()
tuser@kvmubuntu:~$ cd Py-FrankAndrade-WebAppMO-Project/
tuser@kvmubuntu:~$ python app.py
 * Serving Flask app 'app' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
- Заходим в браузер и пишем адрес: http://127.0.0.1:5000. должно появиться приветсвие
tuser@kvmubuntu:~$ pip install sklearn
tuser@kvmubuntu:~$ pip install pandas
tuser@kvmubuntu:~$ cd templates/
/templates$ vim index.html
rade-WebAppMO/Py-FrankAndrade-WebAppMO-Project/templates$ cat index.html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title> Web App MO </title>
</head>
<body>
    <h1>My first WebSite</h1>
</body>
</html>
tuser@kvmubuntu:~$ cat model.py
from sklearn import linear_model
import pandas as pd
import pickle
df = pd.read_csv('prices.csv')
y = df['Value'] # dependent variable
X = df[['Rooms', 'Distance']] # independent variable
lm = linear_model.LinearRegression()
lm.fit(X, y) # fitting the model
pickle.dump(lm, open('model.pkl','wb')) # save the model
print(lm.predict([[15, 61]]))  # format of input
print(f'score: {lm.score(X, y)}')
tuser@kvmubuntu:~$ python app.py
/home/user/Py-FrankAndrade-WebAppMO/Py-FrankAndrade-WebAppMO-Env/lib/python3.10/site-packages/sklearn/base.py:329: UserWarning: Trying to unpickle estimator LinearRegression from version 1.0.2 when using version 1.1.1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(
 * Serving Flask app 'app' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
- Заходим в браузер и пишем адрес: http://127.0.0.1:5000.
tuser@kvmubuntu:~$ vim templates/index.html
tuser@kvmubuntu:~$ cat templates/index.html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title> Web App MO </title>
    <!-- CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a class="nav-link active" aria-current="page" href="#">Home</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Link</a>
            </li>
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                Dropdown
              </a>
              <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                <li><a class="dropdown-item" href="#">Action</a></li>
                <li><a class="dropdown-item" href="#">Another action</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#">Something else here</a></li>
              </ul>
            </li>
            <li class="nav-item">
              <a class="nav-link disabled">Disabled</a>
            </li>
          </ul>
          <form class="d-flex">
            <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
            <button class="btn btn-outline-success" type="submit">Search</button>
          </form>
        </div>
      </div>
    </nav>    
</head>
<body>
    <!--<h1>My first WebSite</h1>-->
</body>
</html>
tuser@kvmubuntu:~$ python app.py
/home/user/Py-FrankAndrade-WebAppMO/Py-FrankAndrade-WebAppMO-Env/lib/python3.10/site-packages/sklearn/base.py:329: UserWarning: Trying to unpickle estimator LinearRegression from version 1.0.2 when using version 1.1.1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(
 * Serving Flask app 'app' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
- Заходим в браузер и пишем адрес: http://127.0.0.1:5000.
tuser@kvmubuntu:~$ vim templates/index.html
tuser@kvmubuntu:~$ cat templates/index.html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title> Web App MO </title>
    <!-- CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a class="nav-link active" aria-current="page" href="#">Home</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Link</a>
            </li>
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                Dropdown
              </a>
              <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                <li><a class="dropdown-item" href="#">Action</a></li>
                <li><a class="dropdown-item" href="#">Another action</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#">Something else here</a></li>
              </ul>
            </li>
            <li class="nav-item">
              <a class="nav-link disabled">Disabled</a>
            </li>
          </ul>
          <form class="d-flex">
            <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
            <button class="btn btn-outline-success" type="submit">Search</button>
          </form>
        </div>
      </div>
    </nav>    
</head>
<body>
    <!--<h1>My first WebSite</h1>-->
    <div class="login">
        <h2>Price Prediction</h2>
            <p>Introduce the number of rooms and distance:</p>
            <form action="{{url_for('predict')}}" method="post">
                <input type="text" name="rooms" placeholder="Rooms" required="required">
                <input type="text" name="distance" placeholder="Distance" required="required">
                <button type="submit" class="btn btn-primary btn-block btn-large"> Predict Value!</button>
            </form>
            <br>
            <br>    
        <b>{{prediction_text}}</b>
    </div>
</body>
</html>
tuser@kvmubuntu:~$ vim app.py
tuser@kvmubuntu:~$ cat app.py
from flask import Flask, render_template, request
import pickle
app = Flask(__name__)
model=pickle.load(open('model.pkl', 'rb'))
@app.route("/")
#def hello_world():
def hello():
    #return "<p>Hello, World!</p>"
    return render_template('index.html')
@app.route("/predict", methods=['POST'])
def predict():
    rooms = int(request.form['rooms'])
    distance = int(request.form['distance'])
    prediction = model.predict([[rooms, distance]])
    output = round(prediction[0], 2)
    return render_template('index.html', prediction_text=f'A house with {rooms} rooms per dwelling and located {distance} km to employment centers has a value of ${output}K')
if __name__ == "__main__":
    app.run()
tuser@kvmubuntu:~$ python app.py
/home/user/Py-FrankAndrade-WebAppMO/Py-FrankAndrade-WebAppMO-Env/lib/python3.10/site-packages/sklearn/base.py:329: UserWarning: Trying to unpickle estimator LinearRegression from version 1.0.2 when using version 1.1.1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(
 * Serving Flask app 'app' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
- Заходим в браузер и пишем адрес: http://127.0.0.1:5000.
Source:
# https://www.youtube.com/c/FrankAndrade5/videos
Task:
Calling sleep() via time.sleep()
# Разработка Режим засыпания.
Decision:
tuser@kvmubuntu:~$ python3 -m venv Py-Env
tuser@kvmubuntu:~$ source Py-Env/bin/activate
tuser@kvmubuntu:~$ ls
Py-Env
tuser@kvmubuntu:~$ vim Py-SLeep.py
tuser@kvmubuntu:~$ python3 Py-SLeep.py
tuser@kvmubuntu:~$ cat Py-SLeep.py
#Вызов sleep() через time.sleep()
import time
time.sleep(3) # Сон в 3 секунды
tuser@kvmubuntu:~$ python3 -m timeit -n 3 "import time; time.sleep(3)"
3 loops, best of 5: 3 sec per loop
Task:
Системному администратору всегда нужно быть в курсе, если какой-то из сайтов упал. 
Вы бы хотели иметь возможность проверить код состояния сайта регулярно, но запрашивать веб сервер постоянно нельзя, ведь это сильно повлияет на производительность. В Python одним из простых способов совершить такую проверку является использование системного вызова sleep()
# Разработка Режим засыпания.
Decision:
tuser@kvmubuntu:~$ vim Py-SLeep1.py
tuser@kvmubuntu:~$ cat Py-SLeep1.py
import time
import urllib.request
import urllib.error
def uptime_bot(url):
    while True:
        try:
            conn = urllib.request.urlopen(url)
        except urllib.error.HTTPError as e:
            # Отправка admin / log
            print(f'HTTPError: {e.code} для {url}')
        except urllib.error.URLError as e:
            # Отправка admin / log
            print(f'URLError: {e.code} для {url}')
        else:
            # Сайт поднят
            print(f'{url} поднят')
        time.sleep(60)
if __name__ == '__main__':
    url = 'http://www.google.com/py'
    uptime_bot(url)
tuser@kvmubuntu:~$ pip install requests
tuser@kvmubuntu:~$ python3 Py-SLeep1.py
HTTPError: 404 для http://www.google.com/py
tuser@kvmubuntu:~$ vim Py-SLeep1.py
tuser@kvmubuntu:~$ cat Py-SLeep1.py
import time
import urllib.request
import urllib.error
def uptime_bot(url):
    while True:
        try:
            conn = urllib.request.urlopen(url)
        except urllib.error.HTTPError as e:
            # Отправка admin / log
            print(f'HTTPError: {e.code} для {url}')
        except urllib.error.URLError as e:
            # Отправка admin / log
            print(f'URLError: {e.code} для {url}')
        else:
            # Сайт поднят
            print(f'{url} поднят')
        time.sleep(60)
if __name__ == '__main__':
    url = 'http://www.google.com'
    uptime_bot(url)
tuser@kvmubuntu:~$ python3 Py-SLeep1.py
http://www.google.com поднят
Task:
Вызов sleep() с декораторами
# Разработка Режим засыпания.
Decision:
tuser@kvmubuntu:~$ vim Py-SLeep2.py
tuser@kvmubuntu:~$ cat Py-SLeep2.py
import time
import urllib.request
import urllib.error
def sleep(timeout, retry=3):
    def the_real_decorator(function):
        def wrapper(*args, **kwargs):
            retries = 0
            while retries < retry:
                try:
                    value = function(*args, **kwargs)
                    if value is None:
                        return
                except:
                    print(f'Сон на {timeout} секунд')
                    time.sleep(timeout)
                    retries += 1
        return wrapper
    return the_real_decorator
@sleep(3)
def uptime_bot(url):
    try:
        conn = urllib.request.urlopen(url)
    except urllib.error.HTTPError as e:
        # Отправка admin / log
        print(f'HTTPError: {e.code} для {url}')
        # Повторное поднятие ошибки исключения для декоратора
        raise urllib.error.HTTPError
    except urllib.error.URLError as e:
        # Отправка admin / log
        print(f'URLError: {e.code} для {url}')
        # Повторное поднятие ошибки исключения для декоратора
        raise urllib.error.URLError
    else:
        # Сайт поднят
        print(f'{url} поднят')
if __name__ == '__main__':
    url = 'http://www.google.com/py'
    uptime_bot(url)
tuser@kvmubuntu:~$ python3 Py-SLeep2.py
HTTPError: 404 для http://www.google.com/py
Сон на 3 секунд
HTTPError: 404 для http://www.google.com/py
Сон на 3 секунд
HTTPError: 404 для http://www.google.com/py
Сон на 3 секунд
Task:
Использование time.sleep() в threading
# Разработка Режим засыпания.
Decision:
tuser@kvmubuntu:~$ vim Py-SLeep3.py
tuser@kvmubuntu:~$ cat Py-SLeep3.py
import logging
import threading
import time
def worker(arg):
    while not arg["stop"]:
        logging.debug("рабочий поток вносится")
        time.sleep(1)
def main():
    logging.basicConfig(
        level=logging.DEBUG,
        format="%(relativeCreated)6d %(threadName)s %(message)s"
    )
    info = {"stop": False}
    thread = threading.Thread(target=worker, args=(info,))
    thread_two = threading.Thread(target=worker, args=(info,))
    thread.start()
    thread_two.start()
    while True:
        try:
            logging.debug("Добавление из главного потока")
            time.sleep(0.75)
        except KeyboardInterrupt:
            info["stop"] = True
            logging.debug('Остановка')
            break
    thread.join()
    thread_two.join()
if __name__ == "__main__":
    main()
tuser@kvmubuntu:~$ python3 Py-SLeep3.py
     2 Thread-1 (worker) рабочий поток вносится
     3 Thread-2 (worker) рабочий поток вносится
     3 MainThread Добавление из главного потока
   754 MainThread Добавление из главного потока
  1004 Thread-1 (worker) рабочий поток вносится
  1004 Thread-2 (worker) рабочий поток вносится
  1505 MainThread Добавление из главного потока
  2005 Thread-1 (worker) рабочий поток вносится
  2006 Thread-2 (worker) рабочий поток вносится
  2256 MainThread Добавление из главного потока
  3007 Thread-1 (worker) рабочий поток вносится
  3007 MainThread Добавление из главного потока
  3007 Thread-2 (worker) рабочий поток вносится
  3759 MainThread Добавление из главного потока
  4009 Thread-1 (worker) рабочий поток вносится
  4009 Thread-2 (worker) рабочий поток вносится
  4510 MainThread Добавление из главного потока
  5010 Thread-1 (worker) рабочий поток вносится
  5010 Thread-2 (worker) рабочий поток вносится
  5261 MainThread Добавление из главного потока
^C  5880 MainThread Остановка
Task:
Вызов sleep() с Async IO
# Разработка Режим засыпания.
Decision:
tuser@kvmubuntu:~$ vim Py-SLeep4.py
tuser@kvmubuntu:~$ cat Py-SLeep4.py
#Вызов sleep() с Async IO
import asyncio
async def main():
    print('Hello ...')
    await asyncio.sleep(1)
    print('... World!')
# Python 3.7+
asyncio.run(main())
tuser@kvmubuntu:~$ python3 Py-SLeep4.py
Hello ...
... World!
tuser@kvmubuntu:~$ vim Py-SLeep5.py
tuser@kvmubuntu:~$ cat Py-SLeep5.py
import asyncio
import time
async def output(sleep, text):
    await asyncio.sleep(sleep)
    print(text)
async def main():
    print(f"Started: {time.strftime('%X')}")
    await output(1, 'First')
    await output(2, 'Second')
    await output(3, 'Third')
    print(f"Ended: {time.strftime('%X')}")
# Python 3.7+
asyncio.run(main())
tuser@kvmubuntu:~$ python3 Py-SLeep5.py
Started: 11:41:57
First
Second
Third
Ended: 11:42:03
tuser@kvmubuntu:~$ vim Py-SLeep6.py
tuser@kvmubuntu:~$ cat Py-SLeep6.py
import asyncio
import time
async def output(text, sleep):
    while sleep > 0:
        await asyncio.sleep(1)
        print(f'{text} counter: {sleep} seconds')
        sleep -= 1
async def main():
    task_1 = asyncio.create_task(output('First', 1))
    task_2 = asyncio.create_task(output('Second', 2))
    task_3 = asyncio.create_task(output('Third', 3))
    print(f"Started: {time.strftime('%X')}")
    await task_1
    await task_2
    await task_3
    print(f"Ended: {time.strftime('%X')}")
if __name__ == '__main__':
    asyncio.run(main())
tuser@kvmubuntu:~$ python3 Py-SLeep6.py
Started: 11:43:16
First counter: 1 seconds
Second counter: 2 seconds
Third counter: 3 seconds
Second counter: 1 seconds
Third counter: 2 seconds
Third counter: 1 seconds
Ended: 11:43:19
Task:
Метод after() — Погружение в сон для Tkinter
# Разработка Режим засыпания.
Decision:
tuser@kvmubuntu:~$ vim Py-SLeep7.py
tuser@kvmubuntu:~$ cat Py-SLeep7.py
import tkinter
import time
class MyApp:
    def __init__(self, parent):
        self.root = parent
        self.root.geometry("400x400")
        self.frame = tkinter.Frame(parent)
        self.frame.pack()
        b = tkinter.Button(text="click me", command=self.delayed)
        b.pack()
    def delayed(self):
        time.sleep(3)
if __name__ == "__main__":
    root = tkinter.Tk()
    app = MyApp(root)
    root.mainloop()
Task:
Для должного погружения tkinter в сон потребуется использовать after()
# Разработка Режим засыпания.
Decision:
tuser@kvmubuntu:~$ vim Py-SLeep8.py
tuser@kvmubuntu:~$ cat Py-SLeep8.py
import tkinter
class MyApp:
    def __init__(self, parent):
        self.root = parent
        self.root.geometry("400x400")
        self.frame = tkinter.Frame(parent)
        self.frame.pack()
        self.root.after(3000, self.delayed)
    def delayed(self):
        print('Я задержался')
if __name__ == "__main__":
    root = tkinter.Tk()
    app = MyApp(root)
    root.mainloop()
tuser@kvmubuntu:~$ python3 Py-SLeep8.py
Я задержался
Task:
# Разработка Обработка логов.
Decision:
tuser@kvmubuntu:~$ mkdir Py-Logging
tuser@kvmubuntu:~$ cd Py-Logging
tuser@kvmubuntu:~$ python3 -m venv Py-Env
tuser@kvmubuntu:~$ source Py-Env/bin/activate
tuser@kvmubuntu:~$ vim Py-Logging.py
tuser@kvmubuntu:~$ cat Py-Logging.py
import logging
logging.basicConfig(
    level=logging.DEBUG,
    filename="mylog.log",
    format="%(asctime)s - %(module)s - %(levelname)s - %(funcName)s: %(lineno)d - %(message)s",
    datefmt='%H:%M:%S',
    )
logging.info('Hello')
tuser@kvmubuntu:~$ python Py-Logging.py
tuser@kvmubuntu:~$ ls
mylog.log  Py-Env  Py-Logging.py
tuser@kvmubuntu:~$ cat mylog.log
12:35:11 - Py-Logging - INFO - <module>: 8 - Hello
tuser@kvmubuntu:~$ deactivate
Task:
Make a program for viewing images
# Разработка viewing images.
Decision:
tuser@kvmubuntu:~$ mkdir Py-ViewingImages
tuser@kvmubuntu:~$ cd Py-ViewingImages
tuser@kvmubuntu:~$ python3 -m venv Py-Env
tuser@kvmubuntu:~$ source Py-Env/bin/activate
tuser@kvmubuntu:~$ vim Py-ViewingImages.py
tuser@kvmubuntu:~$ cat Py-ViewingImages.py
import tkinter as tk
from PIL import Image, ImageTk
from resizeimage import resizeimage
win=tk.Tk()
win.title("Image Viewer")
win.geometry("300x300")
path=r'/home/user/Документы/.Git/Py/Py-ViewingImages/img/test.jpg'
resized_image=resizeimage.resize_cover(Image.open(path), [300, 300])
render_pic=ImageTk.PhotoImage(resized_image)
img.pack()
win.mainloop()
tuser@kvmubuntu:~$ sudo apt-get install python3-tk
tuser@kvmubuntu:~$ pip install Pillow
tuser@kvmubuntu:~$ pip install python-resize-image
tuser@kvmubuntu:~$ vim Py-ViewingImages.py
tuser@kvmubuntu:~$ cat Py-ViewingImages.py
import tkinter as tk
from PIL import Image, ImageTk
from resizeimage import resizeimage
win=tk.Tk()
win.title("Image Viewer")
win.geometry("300x300")
path=r'/home/user/Документы/.Git/Py/Py-ViewingImages/img/test.jpg'
resized_image=resizeimage.resize_cover(Image.open(path), [300, 300])
render_pic=ImageTk.PhotoImage(resized_image)
img=tk.Label(win,image=render_pic)
img.pack()
win.mainloop()
tuser@kvmubuntu:~$ python Py-ViewingImages.py
tuser@kvmubuntu:~$ deactivate
Task:
Вам дан английский текст. Закодируйте его с помощью азбуки Морзе. Каждая буква заменяется на последовательность точек и тире. В качестве тире используйте обычный дефис «-», а в качестве точки — точку «.». Например, буква «g» превратится в трёхсимвольную строку «--.». Ниже в переменной morze для вашего удобства хранится словарь соответствия английских букв коду Морзе. Входные данные Весь текст записан в единственной строке. Текст состоит из английских букв и пробелов, других символов в тексте нет. В тексте не может быть двух или более пробелов подряд. Выходные данные Выведите каждое слово исходного текста, закодированное азбукой Морзе, на отдельной строке. Количество строк в ответе должно совпадать с количеством слов в исходном тексте. Между закодированными буквами ставится ровно один пробел. Например, слово «Help» превратится в «.... . .-.. .--.». Обратите внимание, что строчные и заглавные буквы кодируются одинаково.
# Разработка Кодировка с помощью азбуки Морзе.
Decision:
tuser@kvmubuntu:~$ cat test.py            
morze = {'a': '•—', 'b': '—•••', 'c': '—•—•', 'd': '—••',
        'e': '•', 'f': '••—•', 'g': '——•', 'h': '••••',
        'i': '••', 'j': '•———', 'k': '—•—', 'l': '•—••',
        'm': '——', 'n': '—•', 'o': '———', 'p': '•——•',
        'q': '——•—', 'r': '•—•', 's': '•••', 't': '—',
        'u': '••—', 'v': '•••—', 'w': '•——', 'x': '—••—',
        'y': '—•——', 'z': '——••'}
text= input()
text= text.lower()
i=0
for key in text:
    i=i+1
    if key == ' ': 
        print('') 
        i=0
    else:
        if i>=2: 
                print (' ', end='')
        val = str(morze[key])
        print (val, end='')  
tuser@kvmubuntu:~$ python3 test.py
I want cheeseburger
••
•—— •— —• —
—•—• •••• • • ••• • —••• ••— •—• ——• • •—• 
Task:
Мне нужно написать программу, которая считывает возраст человека. Программа сначала запрашивает год рождения.
# Разработка Когда День рождение.
Decision:
tuser@kvmubuntu:~$ cat Cpp-AgeDetermination.cpp
#include <iostream>
using namespace std;
int age(int current_date, int current_month, int current_year, int birth_date, int birth_month, int birth_year)
{
  //если дата рождения больше текущей даты рождения тогда не считайте в этом месяце и добавьте 30 к дате так как вычесть дату и получить оставшиеся дни
  int month[]={31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  if (birth_date > current_date)
  {
    current_month = current_month - 1;
    current_date = current_date + month[birth_month-1];
  }
  //если месяц рождения превышает текущий месяц, то  Не считайте в этом году и добавьте 12 к месяц, чтобы мы могли вычесть и выяснить различия
  if (birth_month > current_month)
  {
    current_year = current_year - 1;
        current_month = current_month + 12;
  }
    // вычислить дату, месяц, год
    int calculated_date = current_date - birth_date;
    int calculated_month = current_month - birth_month;
    int calculated_year = current_year - birth_year;
  // печать нынешнего возраста
    cout<<"Present Age:"<<endl;
    cout<<"Years: "<<calculated_year<<" Months: "<<calculated_month<<" Days: "<<calculated_date<<endl;
  return 0;
}
int main()
{
  int current_date, current_month, current_year, birth_date, birth_month, birth_year;
  //код пользователя
  cout<<"Today:"<<endl;
  cout<<"DD: ";
  cin>>current_date;
  cout<<"MM: ";
  cin>>current_month;
  cout<<"YYYY: ";
  cin>>current_year;
  //рождение дд // мм // гггг
  cout<<"You'r Birthday:"<<endl;
  cout<<"DD: ";
  cin>>birth_date;
    cout<<"MM: ";
  cin>>birth_month;
    cout<<"YYYY:";
  cin>>birth_year;
  age(current_date, current_month, current_year, birth_date, birth_month, birth_year);
  system("pause");
  return 0;
}
tuser@kvmubuntu:~$ cat Py-AgeDetermination.py
def age(current_date, current_month, current_year, birth_date, birth_month, birth_year):
    #если дата рождения больше текущей даты рождения тогда не считайте в этом месяце и добавьте 30 к дате так как вычесть дату и получить оставшиеся дни
    month =[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if (birth_date > current_date):
        current_month = current_month - 1
        current_date = current_date + month[birth_month-1]
    #если месяц рождения превышает текущий месяц, то Не считайте в этом году и добавьте 12 к месяц, чтобы мы могли вычесть и выяснить различия
    if (birth_month > current_month):
        current_year = current_year - 1;
        current_month = current_month + 12;
    # вычислить дату, месяц, год
    calculated_date = current_date - birth_date;
    calculated_month = current_month - birth_month;
    calculated_year = current_year - birth_year;
    # печать нынешнего возраста
    print("Present Age:")
    print("Years:", calculated_year, "Months:", calculated_month, "Days:", calculated_date)
print("Today:")
# код пользователя
current_date = int(input("DD: "))
current_month = int(input("MM: "))
current_year = int(input("YYYY: "))
# рождение дд // мм // гггг
print("You'r Birthday:")
birth_date = int(input("DD: "))
birth_month = int(input("MM: "))
birth_year = int(input("YYYY: "))
age(current_date, current_month, current_year, birth_date, birth_month, birth_year)
tuser@kvmubuntu:~$ python3 Py-AgeDetermination.py
Today:
DD: 18
MM: 07
YYYY: 2022
You'r Birthday:
DD: 23
MM: 09
YYYY: 1992
Present Age:
Years: 29 Months: 9 Days: 25
tuser@kvmubuntu:~$ g++ Cpp-AgeDetermination.cpp -o output
tuser@kvmubuntu:~$ ./output
Today:
DD: 18
MM: 07
YYYY: 2022
You'r Birthday:
DD: 23
MM: 09
YYYY:1992
Present Age:
Years: 29 Months: 9 Days: 25
Task:
Создайте конвертер валют, который получает данные из национального банка с помощью json и выводит данные о стоимости рубля к доллару, евро и юаню. Запустите программу через терминал.
# Разработка Конвертер валют.
Decision:
tuser@kvmubuntu:~$ cat Cpp-CurrencyConverter.cpp
#include <iostream>
using namespace std;
int main()
{
  float dollar, euro, yuan;
  cout<<"current dollar data: ";
  cin>>dollar;
        cout<<"current euro data: ";
  cin>>euro;
        cout<<"current yuan data: ";
  cin>>yuan;
  //cout<<dollar<<" "<<euro<<" "<<yuan<<" "<<endl;
  cout<<"1) Convert to dollars, Euros, yuan"<<endl<<"2) Transfer from dollars, Euros, yuan"<<endl<<"Choose your actions: ";
  int choise;
  cin>>choise;
  //cout<<choise; 
  if (choise==1){
    float ruble, resultDollar, resultEuro, resultYuan;
    cout<<"Enter the number of rubles: ";
    cin>>ruble;
    resultDollar=ruble/dollar;
    resultEuro=ruble/euro;
    resultYuan=ruble/yuan;
    cout<<"The result of your transfer = "<<resultDollar<<endl<<"The result of your transfer = "<<resultEuro<<endl<<"The result of your transfer = "<<resultYuan<<endl;
  } else if (choise==2) {
    float d, e, y, resultDollar, resultEuro, resultYuan;
    cout<<"Enter the number of dollars: ";
    cin>>d;
    cout<<"Enter the number of euroes: ";
    cin>>e;
    cout<<"Enter the number of yuans: ";
    cin>>y;
    resultDollar=d*dollar;
    resultEuro=e*euro;
    resultYuan=y*yuan;
    cout<<"The result of your transfer = "<<resultDollar<<endl<<"The result of your transfer = "<<resultEuro<<endl<<"The result of your transfer = "<<resultYuan<<endl;
  } else {
    cout<<"Error! Enter only 1 or 2: "<<endl;
    exit(0);
  }
  //system("pause");
  return 0;
}
tuser@kvmubuntu:~$ cat Py-CurrencyConverter.py 
from pprint import pprint
import requests
data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
dictionaryU=data['Valute']['USD']
dictionaryE=data['Valute']['EUR']
dictionaryC=data['Valute']['CNY']
'''
lists=[dictionaryU, dictionaryE, dictionaryC]
for index in lists:
  print(index)
'''
'''
print(dictionaryU['Value'],dictionaryU['Name'])
print(dictionaryE['Value'],dictionaryE['Name'])
print(dictionaryC['Value'],dictionaryC['Name'])
'''
'''
dollar=float(input("Enter the dollar rate: "))
euro=float(input("Enter the euro exchange rate: "))
yuan=float(input("Enter the yuan exchange rate: "))
'''
dollar=dictionaryU['Value']
euro=dictionaryE['Value']
yuan=dictionaryC['Value']
print("Dollar exchange rate: ",dollar)
print("Euro exchange rate: ",euro)
print("Yuan exchange rate: ",yuan)
print("1) Convert to dollars, Euros, yuan\n2) Transfer from dollars, Euros, yuan\n")
choise=int(input("Choose your actions:\n"))
if choise==1:
  ruble=float(input("Enter the number of rubles: "))
  resultDollar=ruble/dollar
  resultEuro=ruble/euro
  resultYuan=ruble/yuan
  print("The result of your transfer = ", '{:.2f}'.format(resultDollar))
  print("The result of your transfer = ", '{:.2f}'.format(resultEuro))
  print("The result of your transfer = ", '{:.2f}'.format(resultYuan))
elif choise==2:
  d=float(input("Enter the number of dollars: "))
  e=float(input("Enter the number of euroes: "))  
  y=float(input("Enter the number of yuans: "))
  resultDollar=d*dollar
  resultEuro=e*euro
  resultYuan=y*yuan
  print("The result of your transfer = ", '{:.2f}'.format(resultDollar))
  print("The result of your transfer = ", '{:.2f}'.format(resultEuro))
  print("The result of your transfer = ", '{:.2f}'.format(resultYuan))
else:
  print("Error! Enter only 1 or 2")
  exit(0)
tuser@kvmubuntu:~$ python3 Py-CurrencyConverter.py
Dollar exchange rate:  61.3101
Euro exchange rate:  62.5695
Yuan exchange rate:  92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions:
1
Enter the number of rubles: 500
The result of your transfer =  8.16
The result of your transfer =  7.99
The result of your transfer =  5.43
tuser@kvmubuntu:~$ python3 Py-CurrencyConverter.py
Dollar exchange rate:  61.3101
Euro exchange rate:  62.5695
Yuan exchange rate:  92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions:
2
Enter the number of dollars: 1000
Enter the number of euroes: 900
Enter the number of yuans: 100
The result of your transfer =  61310.10
The result of your transfer =  56312.55
The result of your transfer =  9216.36
tuser@kvmubuntu:~$ python3 Py-CurrencyConverter.py
Dollar exchange rate:  61.3101
Euro exchange rate:  62.5695
Yuan exchange rate:  92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions:
3
Error! Enter only 1 or 2
tuser@kvmubuntu:~$ g++ Cpp-CurrencyConverter.cpp -o output
tuser@kvmubuntu:~$ ./output
current dollar data: 61.3101
current euro data: 62.5695
current yuan data: 92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions: 1
Enter the number of rubles: 500
The result of your transfer = 8.15526
The result of your transfer = 7.99111
The result of your transfer = 5.42514
tuser@kvmubuntu:~$ ./output
current dollar data: 61.3101
current euro data: 62.5695
current yuan data: 92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions: 2
Enter the number of dollars: 1000
Enter the number of euroes: 900
Enter the number of yuans: 100
The result of your transfer = 61310.1
The result of your transfer = 56312.6
The result of your transfer = 9216.36
tuser@kvmubuntu:~$ ./output
current dollar data: 61.3101
current euro data: 62.5695
current yuan data: 92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions: 3
Error! Enter only 1 or 2:
Task:
Создайте простой калькулятор, который запускается через терминал.
# Разработка калькулятор.
Decision:
tuser@kvmubuntu:~$ cat Cpp-Calculator.cpp
#include <iostream>
using namespace std;
int main()
{
  string repeat="y";
  while (repeat == "y"){
      int numb1, numb2;
      cout<<("Enter number1: ");
      cin>>numb1;
      cout<<("Enter number2: ");
      cin>>numb2;
      char operation;
      cout<<("Enter the operation: ");
      cin>>operation;
      if (operation == '+')
          cout<<(numb1 + numb2)<<endl;
      else if (operation == '-')
          cout<<(numb1 - numb2)<<endl;
      else if (operation == '*')
          cout<<(numb1 * numb2)<<endl;
      else if (operation == '/'){
          if (numb2 == 0)
              cout<<("You cant divide by zero!")<<endl;
          else
              cout<<(numb1 / numb2)<<endl;
      }else{
          cout<<("Invalid operation")<<endl;
      }
      cout<<("Do you want to continue? (y/n): ");
      cin>>repeat;
      if (repeat == "n"){
          break;
      }
      while (repeat!="y" && repeat!="n"){
          cout<<("Please enter the correct answer (y/n): ");
          cin>>repeat;
      }
  }
  return 0;
}
tuser@kvmubuntu:~$ cat Py-Calculator.py
repeat="y"
while repeat == "y":
    numb1, numb2 = int(input("Enter number1: ")), int(input("Enter number2: "))
    operation = input("Enter the operation: ")
    if operation == '+':
        print(numb1 + numb2)
    elif operation == '-':
        print(numb1 - numb2)
    elif operation == '*':
        print(numb1 * numb2)
    elif operation == '/':
        if numb2 == 0:
            print('You cant divide by zero!')
        else:
            print(numb1 / numb2)
    else:
        print('Invalid operation')
    repeat = input("Do you want to continue? (y/n): ")
    if repeat == "n":
        break
    while (repeat!="y" and repeat!="n"):
        repeat = input("Please enter the correct answer (y/n): ")
tuser@kvmubuntu:~$ python3 Py-Calculator.py
Enter number1: 16
Enter number2: 0
Enter the operation: /
You cant divide by zero!
Do you want to continue? (y/n): t
Please enter the correct answer (y/n): t
Please enter the correct answer (y/n): y
Enter number1: 16
Enter number2: 1
Enter the operation: t
Invalid operation
Do you want to continue? (y/n): y
Enter number1: 16
Enter number2: 1
Enter the operation: -
15
Do you want to continue? (y/n): n
tuser@kvmubuntu:~$ g++ Cpp-Calculator.cpp -o output
tuser@kvmubuntu:~$ ./output
Enter number1: 16
Enter number2: 0
Enter the operation: /
You cant divide by zero!
Do you want to continue? (y/n): t
Please enter the correct answer (y/n): t
Please enter the correct answer (y/n): y
Enter number1: 16
Enter number2: 1
Enter the operation: t
Invalid operation
Do you want to continue? (y/n): y
Enter number1: 16
Enter number2: 1
Enter the operation: -
15
Do you want to continue? (y/n): n
Task:
Планирование и автоматический запуск сценариев по времени
# Разработка Планировщик задач.
Decision:
tuser@kvmubuntu:~$ python3 -m venv Py-SchedulingAndAutorunScriptsByTime
tuser@kvmubuntu:~$ source Py-SchedulingAndAutorunScriptsByTime/bin/activate
tuser@kvmubuntu:~$ pip list
Package       Version
------------- -------
pip           20.0.2
pkg-resources 0.0.0
setuptools    44.0.0
tuser@kvmubuntu:~$ pip install schedule requests
tuser@kvmubuntu:~$ pip list
Package            Version
------------------ ---------
certifi            2022.6.15
charset-normalizer 2.1.0
idna               3.3
pip                20.0.2
pkg-resources      0.0.0
requests           2.28.1
schedule           1.1.0
setuptools         44.0.0
urllib3            1.26.10
tuser@kvmubuntu:~$ vim Py-SchedulingAndAutorunScriptsByTime.py
tuser@kvmubuntu:~$ python Py-SchedulingAndAutorunScriptsByTime.py
day's tasks
08:00-Drink coffee
11:00-Work meeting
23:59-Hack the Planet!
tuser@kvmubuntu:~$ cat Py-SchedulingAndAutorunS
criptsByTime.py
import schedule
import requests
def greeting():
    todos_dict={
        '08:00':'Drink coffee',
        '11:00':'Work meeting',
        '23:59':'Hack the Planet!'
    }
    print("day's tasks")
    for k, v in todos_dict.items():
        print(f'{k}-{v}')
def main():
    greeting()
if __name__=='__main__':
    main()
tuser@kvmubuntu:~$ vim Py-SchedulingAndAutorunScriptsByTime.py
tuser@kvmubuntu:~$ python Py-SchedulingAndAutorunScriptsByTime.py
day's tasks
08:00-Drink coffee
11:00-Work meeting
23:59-Hack the Planet!
{'btc_usd': {'high': 24399.99999999, 'low': 22401.00005001, 'avg': 23400.500025, 'vol': 45134.35781963, 'vol_cur': 1.92382651, 'last': 23953.00002, 'buy': 23958.50007, 'sell': 24195.2, 'updated': 1658287860}}
tuser@kvmubuntu:~$ cat Py-SchedulingAndAutorunScriptsByTime.py
import schedule
import requests
def greeting():
    todos_dict={
        '08:00':'Drink coffee',
        '11:00':'Work meeting',
        '23:59':'Hack the Planet!'
    }
    print("day's tasks")
    for k, v in todos_dict.items():
        print(f'{k}-{v}')
    response = requests.get(url='https://yobit.net/api/3/ticker/btc_usd')
    data = response.json()
    print(data)
def main():
    greeting()
if __name__=='__main__':
    main()
tuser@kvmubuntu:~$ vim Py-SchedulingAndAutorunScriptsByTime.py
tuser@kvmubuntu:~$ python Py-SchedulingAndAutorunScriptsByTime.py
day's tasks
08:00-Drink coffee
11:00-Work meeting
23:59-Hack the Planet!
23953.00002
tuser@kvmubuntu:~$ cat Py-SchedulingAndAutorunScriptsByTime.py
import schedule
import requests
def greeting():
    todos_dict={
        '08:00':'Drink coffee',
        '11:00':'Work meeting',
        '23:59':'Hack the Planet!'
    }
    print("day's tasks")
    for k, v in todos_dict.items():
        print(f'{k}-{v}')
    response = requests.get(url='https://yobit.net/api/3/ticker/btc_usd')
    data = response.json()
    #print(data)
    btc_price = data.get('btc_usd').get('last')
    print(btc_price)
def main():
    greeting()
if __name__=='__main__':
    main()
tuser@kvmubuntu:~$ vim Py-SchedulingAndAutorunScriptsByTime.py
tuser@kvmubuntu:~$ python Py-SchedulingAndAutorunScriptsByTime.py
day's tasks
08:00-Drink coffee
11:00-Work meeting
23:59-Hack the Planet!
BTC: 23953.0$
tuser@kvmubuntu:~$ cat Py-SchedulingAndAutorunScriptsByTime.py
import schedule
import requests
def greeting():
    todos_dict={
        '08:00':'Drink coffee',
        '11:00':'Work meeting',
        '23:59':'Hack the Planet!'
    }
    print("day's tasks")
    for k, v in todos_dict.items():
        print(f'{k}-{v}')
    response = requests.get(url='https://yobit.net/api/3/ticker/btc_usd')
    data = response.json()
    #print(data)
    #btc_price = data.get('btc_usd').get('last')
    btc_price = f"BTC: {round(data.get('btc_usd').get('last'), 2)}$\n"
    print(btc_price)
def main():
    greeting()
if __name__=='__main__':
    main()
tuser@kvmubuntu:~$ vim Py-SchedulingAndAutorunScriptsByTime.py
tuser@kvmubuntu:~$ python Py-SchedulingAndAutorunScriptsByTime.py
day's tasks
08:00-Drink coffee
11:00-Work meeting
23:59-Hack the Planet!
BTC: 23953.0$
day's tasks
08:00-Drink coffee
11:00-Work meeting
23:59-Hack the Planet!
BTC: 23953.0$
day's tasks
08:00-Drink coffee
11:00-Work meeting
23:59-Hack the Planet!
BTC: 23953.0$
^CTraceback (most recent call last):
  File "Py-SchedulingAndAutorunScriptsByTime.py", line 24, in <module>
    main()
  File "Py-SchedulingAndAutorunScriptsByTime.py", line 22, in main
    schedule.run_pending()
  File "/mnt/c/Users/david/Documents/MySkills/Py-Lessons/Py-SchedulingAndAutorunScriptsByTime/lib/python3.8/site-packages/schedule/__init__.py", line 780, in run_pending
    default_scheduler.run_pending()
  File "/mnt/c/Users/david/Documents/MySkills/Py-Lessons/Py-SchedulingAndAutorunScriptsByTime/lib/python3.8/site-packages/schedule/__init__.py", line 99, in run_pending
    for job in sorted(runnable_jobs):
  File "/mnt/c/Users/david/Documents/MySkills/Py-Lessons/Py-SchedulingAndAutorunScriptsByTime/lib/python3.8/site-packages/schedule/__init__.py", line 98, in <genexpr>
    runnable_jobs = (job for job in self.jobs if job.should_run)
  File "/mnt/c/Users/david/Documents/MySkills/Py-Lessons/Py-SchedulingAndAutorunScriptsByTime/lib/python3.8/site-packages/schedule/__init__.py", line 636, in should_run
    @property
KeyboardInterrupt
tuser@kvmubuntu:~$ cat Py-SchedulingAndAutorunScriptsByTime.py
import schedule
import requests
def greeting():
    todos_dict={
        '08:00':'Drink coffee',
        '11:00':'Work meeting',
        '23:59':'Hack the Planet!'
    }
    print("day's tasks")
    for k, v in todos_dict.items():
        print(f'{k}-{v}')
    response = requests.get(url='https://yobit.net/api/3/ticker/btc_usd')
    data = response.json()
    #print(data)
    #btc_price = data.get('btc_usd').get('last')
    btc_price = f"BTC: {round(data.get('btc_usd').get('last'), 2)}$\n"
    print(btc_price)
def main():
    #greeting()
    schedule.every(4).seconds.do(greeting)
    while True:
        schedule.run_pending()
if __name__=='__main__':
    main()
tuser@kvmubuntu:~$ cat Py-SchedulingAndAutorunScriptsByTime.py
import schedule
import requests
def greeting():
    todos_dict={
        '08:00':'Drink coffee',
        '11:00':'Work meeting',
        '23:59':'Hack the Planet!'
    }
    print("day's tasks")
    for k, v in todos_dict.items():
        print(f'{k}-{v}')
    response = requests.get(url='https://yobit.net/api/3/ticker/btc_usd')
    data = response.json()
    #print(data)
    #btc_price = data.get('btc_usd').get('last')
    btc_price = f"BTC: {round(data.get('btc_usd').get('last'), 2)}$\n"
    print(btc_price)
def main():
    #greeting()
    '''schedule.every(4).seconds.do(greeting)
    schedule.every(5).minutes.do(greeting)
    schedule.every().hour.do(greeting)'''
    schedule.every().day.at('12:00').do(greeting)
    schedule.every().thursday.do(greeting)
    schedule.every().friday.at('23:45').do(greeting)
    while True:
        schedule.run_pending()
if __name__=='__main__':
    main()
tuser@kvmubuntu:~$ deactivate
Task:
Как определить местоположение с помощью IP
# Разработка местоположение по IP.
Decision:
tuser@kvmubuntu:~$ python3 -m venv Py-HowToDetermineTheLocationByIp
tuser@kvmubuntu:~$ source Py-HowToDetermineTheLocationByIp/bin/activate
tuser@kvmubuntu:~$ pip install requests pyfiglet
tuser@kvmubuntu:~$ vim Py-HowToDetermineTheLocationByIp.py
tuser@kvmubuntu:~$ python Py-HowToDetermineTheLocationByIp.py
Please enter a target IP: 222.12.154.103
{'status': 'success', 'country': 'Japan', 'countryCode': 'JP', 'region': '27', 'regionName': 'Ōsaka', 'city': 'Osaka', 'zip': '540-0002', 'lat': 34.6937, 'lon': 135.502, 'timezone': 'Asia/Tokyo', 'isp': 'Kddi Corporation', 'org': 'DION (KDDI CORPORATION)', 'as': 'AS2516 KDDI CORPORATION', 'query': '222.12.154.103'}
tuser@kvmubuntu:~$ cat Py-HowToDetermineTheLocationByIp.py
import requests
def get_info_by_ip(ip='127.0.0.1'):
    try:
        response = requests.get(url=f'http://ip-api.com/json/{ip}').json()
        print(response)
    except requests.exceptions.ConnectionError:
        print('[!] Please check your connection!')
def main():
    ip = input('Please enter a target IP: ')
    get_info_by_ip(ip=ip)
if __name__ == '__main__':
    main()
tuser@kvmubuntu:~$ vim Py-HowToDetermineTheLocationByIp.py
tuser@kvmubuntu:~$ python Py-HowToDetermineTheLocationByIp.py
    ________     _____   ___________
   /  _/ __ \   /  _/ | / / ____/ __ \
   / // /_/ /   / //  |/ / /_  / / / /
 _/ // ____/  _/ // /|  / __/ / /_/ /
/___/_/      /___/_/ |_/_/    \____/
Please enter a target IP: 222.12.154.103
[IP] : 222.12.154.103
[Int prov] : Kddi Corporation
[Org] : DION (KDDI CORPORATION)
[Country] : Japan
[Region Name] : Ōsaka
[City] : Osaka
[ZIP] : 540-0002
[Lat] : 34.6937
[Lon] : 135.502
tuser@kvmubuntu:~$ cat Py-HowToDetermineTheLocationByIp.py
import requests
from pyfiglet import Figlet
def get_info_by_ip(ip='127.0.0.1'):
    try:
        response = requests.get(url=f'http://ip-api.com/json/{ip}').json()
        #print(response)
        data = {
            '[IP]': response.get('query'),
            '[Int prov]': response.get('isp'),
            '[Org]': response.get('org'),
            '[Country]': response.get('country'),
            '[Region Name]': response.get('regionName'),
            '[City]': response.get('city'),
            '[ZIP]': response.get('zip'),
            '[Lat]': response.get('lat'),
            '[Lon]': response.get('lon'),
        }
        for k, v in data.items():
            print(f'{k} : {v}')
    except requests.exceptions.ConnectionError:
        print('[!] Please check your connection!')
def main():
    preview_text = Figlet(font='slant')
    print(preview_text.renderText('IP INFO'))
    ip = input('Please enter a target IP: ')
    get_info_by_ip(ip=ip)
if __name__ == '__main__':
    main()
tuser@kvmubuntu:~$ pip install folium
tuser@kvmubuntu:~$ vim Py-HowToDetermineTheLocationByIp.py
tuser@kvmubuntu:~$ python Py-HowToDetermineTheLocationByIp.py
    ________     _____   ____________
   /  _/ __ \   /  _/ | / / ____/ __ \
   / // /_/ /   / //  |/ / /_  / / / /
 _/ // ____/  _/ // /|  / __/ / /_/ /
/___/_/      /___/_/ |_/_/    \____/
Please enter a target IP: 222.12.154.103
[IP] : 222.12.154.103
[Int prov] : Kddi Corporation
[Org] : DION (KDDI CORPORATION)
[Country] : Japan
[Region Name] : Ōsaka
[City] : Osaka
[ZIP] : 540-0002
[Lat] : 34.6937
[Lon] : 135.502
tuser@kvmubuntu:~$ ls 222.12.154.103_Osaka.html
222.12.154.103_Osaka.html
tuser@kvmubuntu:~$ cat Py-HowToDetermineTheLocationByIp.py
import requests
from pyfiglet import Figlet
import folium
def get_info_by_ip(ip='127.0.0.1'):
    try:
        response = requests.get(url=f'http://ip-api.com/json/{ip}').json()
        #print(response)
        data = {
            '[IP]': response.get('query'),
            '[Int prov]': response.get('isp'),
            '[Org]': response.get('org'),
            '[Country]': response.get('country'),
            '[Region Name]': response.get('regionName'),
            '[City]': response.get('city'),
            '[ZIP]': response.get('zip'),
            '[Lat]': response.get('lat'),
            '[Lon]': response.get('lon'),
        }
        for k, v in data.items():
            print(f'{k} : {v}')
        area = folium.Map(location=[response.get('lat'), response.get('lon')])
        area.save(f'{response.get("query")}_{response.get("city")}.html')
    except requests.exceptions.ConnectionError:
        print('[!] Please check your connection!')
def main():
    preview_text = Figlet(font='slant')
    print(preview_text.renderText('IP INFO'))
    ip = input('Please enter a target IP: ')
    get_info_by_ip(ip=ip)
if __name__ == '__main__':
    main()
tuser@kvmubuntu:~$ deactivate
Task:
Результаты анализов приходят в зашифрованном виде в файле medicine.xlsx. На сервере лежат таблицы de.med_an_name, de.med_name для расшифровки показаний. В ответе приложите два файла - скрипт python и результат работы (xlsx).
Легкий режим: Вы забираете данные с листа 'easy'. Нужно отыскать пациентов, у которых не в норме хотя бы один анализ. Вывести телефон, имя, название анализа и заключение 'Повышен' или 'Понижен'. Сохранить в xlsx.
Сложный режим: Вы забираете данные с листа 'hard'. Нужно отыскать пациентов, у которых не в норме два и более анализов. Вывести телефон, имя, название анализа и заключение 'Повышен', 'Понижен' или 'Положительный'. Сохранить в xlsx.
Дополнительно сохраните таблицу с расшифрованными значениями и результатами анализа в таблице xxxx_med_results в базе данных (помните про 4 буквы в начале, идентифицирующие вашу таблицу).
# Разработка медицинская клиника.
Decision:
tuser@kvmubuntu:~$ cat Py-Medicine.py
import pandas as pd
import psycopg2
conn = psycopg2.connect(database = "database",
    host = "host.ru",
    user = "de13ma",
    password = "meriadocbrandybuck",
    port = "5432")
conn.autocommit = False
cursor = conn.cursor()
sel = input('Please select the mode (e/h/q): ') 
while (sel.lower() != "e" or sel.lower() != "h" or sel.lower() != "q"): 
    if sel.lower() == "e": 
        # Чтение из файла
        df = pd.read_excel( 'medicine.xlsx', sheet_name='easy', header=0, index_col=None )
        print( df )
        cursor.execute("CREATE TABLE de13ma.gabn_med_easy (patient_code int, analysis varchar, value numeric);")
        # Выполнение SQL кода вставки в базу данных
        cursor.executemany( """INSERT INTO de13ma.gabn_med_easy (patient_code, analysis, value)
            VALUES (%s, %s, %s)""", df.values.tolist() )
        # Выполнение SQL кода в базе данных с возвратом результата
        #cursor.execute( "SELECT * FROM de.med_an_name" )
        #cursor.execute( "SELECT * FROM de.med_name" )
        cursor.execute("""CREATE TABLE de13ma.gabn_med_easy1 AS (
            SELECT 
                * 
            FROM (
                SELECT 
                        --*
                        dmn.phone,
                        dmn.name,
                        dma.name AS analysis,  
                        (CASE 
                                WHEN dmt.value<dma.min_value 
                                        THEN 'Понижен'
                                WHEN dmt.value>dma.max_value 
                                        THEN 'Повышен'
                        --ELSE
                          --'Это нормально'
                        END) AS results--,
                        --dmt.value,
                        --dma.min_value,
                        --dma.max_value 
                FROM de13ma.gabn_med_easy AS dmt
                LEFT JOIN de.med_name AS dmn
                        ON dmt.patient_code = dmn.id
                LEFT JOIN de.med_an_name AS dma
                        ON dmt.analysis = dma.id
                ) AS temp_result
                WHERE results IS NOT null);""")
        conn.commit()
        cursor.execute("SELECT * from de13ma.gabn_med_easy1;")
        records = cursor.fetchall()
        for row in records:
            print( row )
        # Формирование DataFrame
        names = [ x[0] for x in cursor.description ]
        df = pd.DataFrame( records, columns = names )
        df
        print( df )
        # Запись в файл
        df.to_excel( 'gabn_med_res_e.xlsx', sheet_name='easy', header=True, index=False )
        break; 
    elif sel.lower() == "h": 
        df = pd.read_excel( 'medicine.xlsx', sheet_name='hard', header=0, index_col=None )
        print( df )
        cursor.execute("CREATE TABLE de13ma.gabn_med_hard (patient_code int, analysis varchar, value varchar);")
        cursor.executemany( """INSERT INTO de13ma.gabn_med_hard (patient_code, analysis, value)
            VALUES (%s, %s, %s)""", df.values.tolist() )
        cursor.execute("""create table de13ma.gabn_med_hard1 as (
	    with t2 as (
	        select 
		    name,
		    count(*) as cnt 
		from (
		    select 
			--*,
			mn.phone,
			mn.name,
			man.name AS analysis,
			(case 
		            when 
			        lower(gmh.value) = 'положит.' 
				or lower(gmh.value) = 'положительно' 
				or lower(gmh.value) = '+' 
			    then 
			        'Положительный'
			    when 
				lower(gmh.value) = 'отриц.'
				or lower(gmh.value) = '-' 
				or lower(gmh.value) = 'отр' 
			    then 
				'Отрицательный'
			    when 
				cast(gmh.value as numeric) > cast(man.max_value as numeric)
			    then 
				'Повышен' 
			    when 
				cast(gmh.value as numeric) < cast(man.min_value as numeric)
			    then 
				'Понижен'
			    when 
			    	cast(gmh.value as numeric) >= cast(man.min_value as numeric)  
				and cast(gmh.value as numeric) <= cast(man.max_value as numeric)  
			    then 
				'Это нормально'
                        else 
			    'Не определено'  
			end) as results--,		
			--gmh.value,
			--man.min_value,
			--man.max_value
			from de13ma.gabn_med_hard as gmh
			left join de.med_name as mn
			    on gmh.patient_code = mn.id
			left join de.med_an_name as man
			    on gmh.analysis = man.id
			where 
			    (case 
			        when 
				    lower(gmh.value) = 'положит.' 
				    or lower(gmh.value) = 'положительно' 
				    or lower(gmh.value) = '+' 
				then 
				    'Положительный'
				when 
				    lower(gmh.value) = 'отриц.'
				    or lower(gmh.value) = '-' 
				    or lower(gmh.value) = 'отр' 
				then 
				    'Отрицательный'
				when 
				    cast(gmh.value as numeric) > cast(man.max_value as numeric)
				then 
				    'Повышен' 
				when 
				    cast(gmh.value as numeric) < cast(man.min_value as numeric)
				then 
				    'Понижен'
				when 
				    cast(gmh.value as numeric) >= cast(man.min_value as numeric)  
				    and cast(gmh.value as numeric) <= cast(man.max_value as numeric)  
				then 
				    'Это нормально'
			    else 
				'Не определено'  
			    end) in ('Положительный', 'Повышен' ,'Понижен')) as t1
		        group by name
		        having count(*) > 1)
	            select 
		        * 
	            from (
		        select 
			    --*,
			    mn.phone,
			    mn.name,
			    man.name AS analysis,
			    (case 
				when 
				    lower(gmh.value) = 'положит.' 
				    or lower(gmh.value) = 'положительно' 
				    or lower(gmh.value) = '+' 
				then 
				    'Положительный'
				when 
				    lower(gmh.value) = 'отриц.'
				    or lower(gmh.value) = '-' 
				    or lower(gmh.value) = 'отр' 
				then 
				    'Отрицательный'
				when 
				    cast(gmh.value as numeric) > cast(man.max_value as numeric)
				then 
				    'Повышен' 
				when 
				    cast(gmh.value as numeric) < cast(man.min_value as numeric)
				then 
				    'Понижен'
				when 
				    cast(gmh.value as numeric) >= cast(man.min_value as numeric)  
				    and cast(gmh.value as numeric) <= cast(man.max_value as numeric)  
				then 
				    'Это нормально'
			    else 
				'Не определено'  
			    end) as results--,		
			    --gmh.value,
			    --man.min_value,
			    --man.max_value
		            from de13ma.gabn_med_hard as gmh
		            left join de.med_name as mn
			        on gmh.patient_code = mn.id
		            left join de.med_an_name as man
			        on gmh.analysis = man.id
		            where 
			        (case 
				    when 
				        lower(gmh.value) = 'положит.' 
					or lower(gmh.value) = 'положительно' 
					or lower(gmh.value) = '+' 
				    then 
					'Положительный'
				    when 
					lower(gmh.value) = 'отриц.'
					or lower(gmh.value) = '-' 
					or lower(gmh.value) = 'отр' 
				    then 
					'Отрицательный'
				    when 
					cast(gmh.value as numeric) > cast(man.max_value as numeric)
				    then 
					'Повышен' 
				    when 
					cast(gmh.value as numeric) < cast(man.min_value as numeric)
				    then 
					'Понижен'
				    when 
					cast(gmh.value as numeric) >= cast(man.min_value as numeric)  
					and cast(gmh.value as numeric) <= cast(man.max_value as numeric)  
				    then 
					'Это нормально'
			        else 
				    'Не определено'  
			        end) in ('Положительный', 'Повышен' ,'Понижен')) as t1
	                where name in (
		            select 
			        name 
		            from t2)
	                order by name, results);""")
        conn.commit()
        cursor.execute("SELECT * from de13ma.gabn_med_hard1;")
        records = cursor.fetchall()
        for row in records:
            print( row )
        # Формирование DataFrame
        names = [ x[0] for x in cursor.description ]
        df = pd.DataFrame( records, columns = names )
        df
        print( df )
        # Запись в файл
        df.to_excel( 'gabn_med_res_h.xlsx', sheet_name='easy', header=True, index=False )
        break; 
    elif sel.lower() == "q":
        break;
    else: 
        sel = input('Please select the mode (e/h/q): ')
# Закрываем соединение
cursor.close()
conn.close()
Task:
Code Review.
На обработку поступает последовательность из 8 целых чисел. Известно, что вводимые числа по абсолютной величине не превышают 10^12. Нужно написать программу, которая выводит на экран количество делящихся нацело на 4 чисел в исходной последовательности и максимальное делящееся нацело на 4 число. Если делящихся нацело на 4 чисел нет, требуется на экран вывести «NO». Программист торопился и написал программу неправильно.
Найдите все ошибки в этой программе (их может быть одна или несколько). Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
# Разработка Code Review.
Decision:
n = 8 # n = 7, по условию чисел 8
count = 0
maximum = -10**6 - 1 # maximum = 1000, все случаи, когда все числа меньше 1000, обрабатываются неверно
for i in range(1, n + 1):
    x = int(input())
    if x % 4 == 0: # x // 4 == 0, по условию нужно найти числа, дел. на 4 без остатка
        count += 1
        if x > maximum: # if x < maximum, если число больше максимума, оно его заменяет, не если меньше максимума
            maximum = x
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')
Task:
На обработку поступает последовательность из 4 целых чисел. Известно, что вводимые числа по абсолютной величине не превышают 10^8. Нужно написать программу, которая выводит на экран количество нечётных чисел в исходной последовательности и максимальное нечётное число. Если нечётных чисел нет, требуется на экран вывести «NO». Программист торопился и написал программу неправильно.
Найдите все ошибки в этой программе (их может быть одна или несколько). Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
# Разработка Code Review.
Decision:
#n = 4
count = 0
maximum = -1
for i in range(4):
    x = int(input())
    if x % 2 != 0:
        count += 1
        if x > maximum:
            maximum = x
            #break
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')
Task:
Color Mixer.
Красный, синий и желтый называются основными цветами, потому что их нельзя получить путем смешения других цветов. При смешивании двух основных цветов получается вторичный цвет:
    если смешать красный и синий, то получится фиолетовый;
    если смешать красный и желтый, то получится оранжевый;
    если смешать синий и желтый, то получится зеленый.
Напишите программу, которая считывает названия двух основных цветов для смешивания. Если пользователь вводит что-нибудь помимо названий «красный», «синий» или «желтый», то программа должна вывести сообщение об ошибке. В противном случае программа должна вывести название вторичного цвета, который получится в результате.
# Разработка Color Mixer.
Decision:
color1, color2 = input(), input()
if color1 == 'красный' and color2 == 'синий' or (color1 == 'синий' and color2 == 'красный'):
    print('фиолетовый')
elif color1 == 'желтый' and color2 == 'синий' or (color1 == 'синий' and color2 == 'желтый'):
    print('зеленый')
elif color1 == 'красный' and color2 == 'желтый' or (color1 == 'желтый' and color2 == 'красный'):
    print('оранжевый')
elif color1 == 'красный' and color2 == 'красный' or color1 == 'желтый' and color2 == 'желтый' or color1 == 'синий' and color2 == 'синий':
    print(color1)
else:
    print('ошибка цвета')
Task:
# Разработка Pin Ball.
Decision:
#1) создать поле
from tkinter import *#1
import random #44) Содаем отскок
WIDTH=900#2 настройки окна глоб переменная
HEIGHT=300#3 настройки окна глоб переменная
PAD_W=10#ракетка
PAD_H=100#ракетка
BALL_RADIUS=40#мяч
#15) двигаем мяч
BALL_X_CHANCGE=20#16 переменная для скорости мяча, горизонтально и вертикально
BALL_Y_CHANCGE=0#16
root=Tk()#7
root.title("Ping-pong")#8
c=Canvas(root,
         width=WIDTH,
         height=HEIGHT,
         background="#008B8B")#9 создаем область, в котором все это делается
c.pack()#10 ставим наш канвас
c.create_line(PAD_W,
              0,
              PAD_W,
              HEIGHT,
              fill="white")#11 Сделаем левую и правую ракетку на поле, мяч и линию, он будет касаться
c.create_line(WIDTH-PAD_W,
              0,
              WIDTH-PAD_W,
              HEIGHT,
              fill="white")#11 Вычитаем, потому что с обратной стороны, для правой ракетки
c.create_line(WIDTH/2,
              0,
              WIDTH/2,
              HEIGHT,
              fill="white")#12 сделаем линию, которая разделяет игровое поле
BALL=c.create_oval(WIDTH/2-BALL_RADIUS/2,
                   HEIGHT/2-BALL_RADIUS/2,
                   WIDTH/2+BALL_RADIUS/2,
                   HEIGHT/2+BALL_RADIUS/2, fill="#FF4500")#13 создаем мяч
LEFT_PAD=c.create_line(PAD_W/2,
                       0,
                       PAD_W/2,
                       PAD_H,
                       width=PAD_W,
                       fill="#DA70D6")#13 создаем левую и правую ракетку, чтоб они просто были
RIGHT_PAD=c.create_line(WIDTH-PAD_W/2,
                        0,
                        WIDTH-PAD_W/2,
                        PAD_H,
                        width=PAD_W,
                        fill="#DA70D6")#13
PLAYER1_SCORE=0#66) считаем очки и возвращаем мяч на изначальную точку
PLAYER2_SCORE=0
#68 нужны функции смена счета и функции смены положения мяча
INITIAL_SPEED=20#69 переменная для счета скорости
p_1_text=c.create_text(WIDTH-WIDTH/6,
                       PAD_H/4,
                       text=PLAYER1_SCORE,
                       font='Arial 20',
                       fill='aqua')#67 создаем текст очков
p_2_text=c.create_text(WIDTH/6,
                       PAD_H/4,
                       text=PLAYER2_SCORE,
                       font='Arial 20',
                       fill='aqua')
#22) создаем упраление ракетами
PAD_SPEED=20#23 задаем сначала общую скорость ракетки
LEFT_PAD_SPEED=0#24  скорость левой и правой ракетки, задаем 0, ибо изначально она не двигается
RIGHT_PAD_SPEED=0#24
BALL_SPEED_UP=1.00#45 скорость мяча с каждым ударом
BALL_MAX_SPEED=30#46 максимальная скорость мяча
BALL_X_SPEED=20#47 начальная скорость по горизонтали
BALL_Y_SPEED=20#48 po vertikali
right_line_distance=WIDTH-PAD_W#49 расстояние да правого края
def update_score(player):#70  создадим функцию, которая будет обнвлять счет
    global PLAYER1_SCORE, PLAYER2_SCORE
    if player=='right':
        PLAYER1_SCORE+=1
        c.itemconfig(p_1_text, text=PLAYER1_SCORE)
    else:
        PLAYER2_SCORE+=1
        c.itemconfig(p_2_text, text=PLAYER2_SCORE)
def spawn_ball():#71 respoun
    global BALL_X_SPEED#72
    c.coords(BALL,
             WIDTH/2-BALL_RADIUS/2,
             HEIGHT/2-BALL_RADIUS/2,
             WIDTH/2+BALL_RADIUS/2,
             HEIGHT/2+BALL_RADIUS/2)#73
    BALL_X_SPEED=-(BALL_X_SPEED*INITIAL_SPEED)/abs(BALL_X_SPEED)#74
def bounce(actiom):#50 напишем функию, которая будет отскакиать мяч
    global BALL_X_SPEED, BALL_Y_SPEED#51 переменные, которые понадобятся для мяча
    if actiom=='strike':#52 если ужарим ракеткй, то мы повернем в случайном направлении от -10 дo +10
        BALL_Y_SPEED=random.randrange(-10, 10)#52
        if abs(BALL_X_SPEED)<BALL_MAX_SPEED:#53 и если скорость мяча < скорости максимального мяча, то мы эту скорость увеличим
            BALL_X_SPEED *= -BALL_SPEED_UP
        else:#54 иначе оставляем ее на месте
            BALL_X_SPEED= -BALL_X_SPEED
    else:#55
        BALL_Y_SPEED= -BALL_Y_SPEED#56
def move_ball():#17 Сделаем функцию движения мяча
    #57c.move(BALL, BALL_X_CHANCGE, BALL_Y_CHANCGE)#18 двигаем мяча по определенному скорости
    ball_left, ball_top, ball_right, ball_bot=c.coords(BALL) # 58 нужно переписать движение мяча с учетом движения, которое мы написали в функции bounce. то есть нужно определять координаты мяча oт центра
    ball_center=(ball_top+ball_bot)/2#59 теперь нужно это все определеить, например центр
    if ball_right + BALL_X_SPEED < right_line_distance and  ball_left +BALL_X_SPEED > PAD_W:#60 теперь нужно сделатьь так, чтоб вертикально отскакивал
        c.move(BALL, BALL_X_SPEED, BALL_Y_SPEED)#61 тогда двигаем дальше
    elif ball_right==right_line_distance or ball_left==PAD_W:#62 проверяем, проверим какой именно стороны поля мы коснулись, если правой стороны -сравниваем позицию центра мяча, и если мяч в пределах ракетки, то делаем отскок
        if ball_right>WIDTH/2:
            if c.coords(RIGHT_PAD)[1]<ball_center<c.coords(RIGHT_PAD)[3]:
                bounce('strike')#63 тогда мы делаем отскок
            else:
                #76pass
                update_score('left')#77
                spawn_ball()#78
        else:
            if c.coords(LEFT_PAD)[1]<ball_center<c.coords(LEFT_PAD)[3]:
                bounce('strike')#63 тогда мы делаем отскок
            else:
                #76pass
                update_score('right')#77
                spawn_ball()#78    else:#64 теперь нужно проверить момент, когда мяч выходит за пределы игрового поля
    else:
        if ball_right > WIDTH/2:
            c.move(BALL,
                   right_line_distance-ball_right,
                   BALL_Y_SPEED)
        else:
            c.move(BALL,
                   -ball_left+PAD_W,
                   BALL_Y_SPEED)
    if ball_top+BALL_Y_SPEED<0 or ball_bot+BALL_Y_SPEED>HEIGHT:
        bounce('ricochet')
        #65 на экране мы должны увидеть отскок
def move_pads():#25 напишим функию двжиения обих ракеток сразу
    PADS={LEFT_PAD: LEFT_PAD_SPEED,
          RIGHT_PAD: RIGHT_PAD_SPEED}#26 нужно сделать так чтоб левая ракеткка двигалась ско скорость левой ракеткой, а праввая - правой. для этого создаим словарик
    for pad in PADS:#27 теперь нужно перебррать ракетки, и двигать с заданной скоростью, черех цикл FOR
        c.move(pad, 0, PADS[pad])#27
        if c.coords(pad)[1]<0:#28 Если ракетка входит выше поля, то мы ее возращаем на место
            c.move(pad, 0, -c.coords(pad)[1])#29 отталкиваем нашу ракетку
        elif c.coords(pad)[3]>HEIGHT:#30 если снизу, то отталкиваем вниз
            c.move(pad, 0, HEIGHT-c.coords(pad)[3])#30
def main():#19  main вызывает функию move_ball при помощи рекурсии
    move_ball()#19
    move_pads()# 31 вставим move_pads в функцию main,  чтоб когда мы вызывали эту функциюу нас не только летел, но идвигались наши ракетки
    root.after(30, main)#20
c.focus_get()#32 фокус на сanvas, чтоб реагировал на нажатие клавиши
def moveent_hadeler(event):#33 функция обработки нажатия клавиш
    global LEFT_PAD_SPEED, RIGHT_PAD_SPEED#34
    if event.keysym=='w':#35
        LEFT_PAD_SPEED= -PAD_SPEED#36 когда мы нажимаем верх, ракетка должна идти верх
    elif event.keysym=='s':#36
        LEFT_PAD_SPEED= PAD_SPEED#36
    elif event.keysym=='Up':#37 для 2ой ракетки
        RIGHT_PAD_SPEED= -PAD_SPEED
    elif event.keysym=='Down':#37 для 2ой ракетки
        RIGHT_PAD_SPEED= PAD_SPEED
c.bind("<KeyPress>", moveent_hadeler)#38 теперь нужно привязывать Сanvas  эту функцию
#39 po idee na ekrane dlojni reagirovat uje raketki, klavishi, a zdes ERROR 15:46
def stop_pad(event):#40 сделаем функцию реагирования на отпускания
    global LEFT_PAD_SPEED, RIGHT_PAD_SPEED#41
    if event.keysym in 'ws':#42 если эти клавиши не нажаты, то мы ставим скорость 0
        LEFT_PAD_SPEED=0
    elif event.keysym in ('Up', 'Down'):
        RIGHT_PAD_SPEED=0
c.bind("<KeyRelease>", stop_pad)#43 делаем привязку этой функцииdelaem privyazku etoi funkcii
main()#21 запуск самого двжиения
root.mainloop()#14 запуск окна
Task:
# Разработка Snake.
Decision:
import pygame, random, sys, time
"""print("hello")
def privet():
    error = pygame.init()
    if error[1]==0:
        print("Hello! It's been a rain, weather")
    else:
        print("error detected!")
        sys.exit()
privet()
#выводит, что было выполненно 6 команд, и 0 ошибок
"""
playSurface=pygame.display.set_mode((800,600)) # Создаем экран
pygame.display.set_caption("Snake") # Даем имя экрану
#time.sleep(56)
position=[50, 50] # Координаты змейки
body=[[80,50],[70,50],[60,50]] # Структура тела змейки
bait=[random.randrange(1,80)*10, random.randrange(1,60)*10] # Пища
baitVisible=True
fpsController=pygame.time.Clock()
direction='RIGHT' # Направление движения
changeto=direction # Изменение направления
score=0 # Игровой счет
"""
Нужно еще создать цвета, таблица цветов rgb - google
color=pygame.Color(r,b,a)
"""
white=pygame.Color(255,255,255) # Фон
black=pygame.Color(0,0,0) # Конец игры
red=pygame.Color(255,0,0) # Шрифт
green=pygame.Color(0,255,0) # Змейка
blue=pygame.Color(0,0,255)
lightslateblue=pygame.Color(132,112,255) # Пища для змейки
def gameOver():
"""
Сделаем надпись, которая будет появляться в конце игры.
Чтобы несколько раз не писать pygame, мы объекту передаем дополнительные
параметры
"""
    gaOFont=pygame.font.SysFont('Garamond', 48)
# Объект, который отвечает за шрифт, и то, какой будет шрифт
    gaOSurface=gaOFont.render('Game over!', True, white)
"""
Здесь нужно было создать надпись GAMEOVER. Для этого мы используем Функцию render,
которая отвечает за то, чтобы создать саму надпись
"""
    gaORectangular=gaOSurface.get_rect()
    gaORectangular.midtop=(400, 25) # Тут задаем координаты для надписи
    playSurface.blit(gaOSurface, gaORectangular)
""" blit отвечает за то, что бы нарисовать 1 объект поверх другого, т.е.
поверх gaOSurface нужно разместить gaORectangular
"""
    showScore(2) # Строим счетчик
    pygame.display.flip()
"""
Выводим на экран воображаемые объекты. Если эту строку не писать, то мы увидим
пустой экра. flip - прописывает то, что мы написали в коде
"""
    time.sleep(8) # Задержка
    pygame.quit()
# Чтобы игра была завершена технически, нужно закончить pygame 
    sys.exit() # Чтобы закончить саму программу в Питоне
def showScore (choice=1):
    scoreFont=pygame.font.SysFont('Garamond', 24)
    scoreSurface=scoreFont.render('Score: {0}'.format(score), True, red)
#   scoreSurface=scoreFont.render('Score:'+str(score), True, red)
    scoreRectangular=scoreSurface.get_rect()
    if choice==1:
        scoreRectangular.midtop=(50, 25)
    else:
        scoreRectangular.midtop=(400, 125)
# Два варианта, которые будут позиционировать блок со шрифтом
    playSurface.blit(scoreSurface, scoreRectangular)
    pygame.display.flip()

#                       Создаем осноной элемент игры
while True:
"""
Сделаем бесконечную игру с помощью цикла.
Игра ждет действие игрока, т.е. во время бесконечного цикла мы будем забирать
событие event
"""
    for event in pygame.event.get(): # очередь событии, т.е. последовательности
"""
Для работы с последовательностью, чтобы работать с каждым элементом в поисках
элемента только с определенным типом. Поэтому используем цикл for
"""
        if event.type == pygame.QUIT:
# Мы каждый раз проверяем не хочет ли игрок выйти из игры
            pygame.guit()
            sys.exit()
# Если хочет игрок выйти, тогда мы закрываем программу
        elif event.type == pygame.KEYDOWN:
# Проверяем на нажатие клавиши, но мы должны посмотреть какую именно клавишу
            if event.key==pygame.K_RIGHT or event.key == ord('d'):
                changeto='RIGHT'
# Если K_RIGHT, то нужно изменить направление
# ord('d') - Кодировка клавиши - 100
            if event.key==pygame.K_LEFT or event.key == ord('a'):
                changeto='LEFT'
            if event.key==pygame.K_UP or event.key == ord('w'):
                changeto='UP'
            if event.key==pygame.K_DOWN or event.key == ord('d'):
                changeto='DOWN'
            if event.key==pygame.K_ESCAPE:
# и рассмотрим случаи, когда работает кнопка ESC
#               pygame.event.post(pygame.event.Event(QUIT))
# Для этого Сделаем метод post, чтобы отправить в очередь событие
                gameOver()
#                   Обработка направления движения змейки
"""
Что делать при смене определения направления движения. определение направления
движения влиеяет на положение Змейки на карте с координатами POSITION[50,50].
Т.е. direction будет влиять на значение Х или У
Мы должны прописать связку, которая образовывает changeto
Представим, что есть Змейка [][][]. Слева хвост, справа голова. и он сейчас
движется вправо, если игрок нажал RIGHT, а если вверх - UP, а это значит, что
голова будет находиться в других координатах
  []
[][]
а потом так
  []
  []
  []
т.е. голова вверху, а хвост внизу. Но если игрок нажмет в таком слуаче вниз, а
это неправильный ход. Сначала голова же должна повернуться, а потом уже внизу.
Именно это нужно сейчас прописать. Сделаем так, чтобы змея не меняла направление
в таких случаях
"""
    if direction != 'LEFT' and changeto == 'RIGHT':
        direction='RIGHT'
    if direction != 'RIGHT' and changeto == 'LEFT':
        direction = 'LEFT'
    if direction != 'UP' and changeto == 'DOWN':
        direction = 'DOWN'
    if direction != 'DOWN' and changeto == 'UP':
        direction = 'UP'
"""
Если направление движения не было вниз, а мы получили указание двигаться вверх,
то мы двигаемся вверх
"""
#                   Изменение позиции в зависимости от направления
    if direction == 'RIGHT':
        position[0] += 10
"""
Мы производим увеличение оси Х, обращаясь к элементу с индексом 0, т.к. Х идет по
этому индексу, а с индексом 1 - У. Поэтому мы меняем значение Х по списке на 10.
10 это то на что мы делим - длины, позиции, и т.д. кратное 10
"""
    if direction == 'LEFT':
        position[0] -= 10 # Влево, значит уменьшенное на 10
    if direction == 'UP':
        position[1] -= 10
    if direction == 'DOWN':
        position[1] += 10
# Тут надо еще учитывать, что оси Х и У в pygame, не такие ккак в математике
"""
Двигается змейка вправо и состоит из 3х блоков
[][][]
При каждом поедании нужно проверить съел ли он пищу (BAIT), и если съел -
увеличить его на один блок
[][][][]
Увлеличение будем осуществлять методом insert в начало списка. А дальше еда
исчезает, добавляется новый блок и пища появляется в другом месте. в новом теле
будем добавлять новый элемент, потом сразу проверим на совпадение координат тела
и координаты пищи. Если совпадение произошло, то будем оставлять новый добавленный
блок, если нет - просто удаляем
"""
#               Работа над длиной тела змейки, увеличение счета
    body.insert(0, list(position))
    if position[0]==bait[0] and position[1]==bait[1]:
        baitVisible=False
        score+=1
    else:
        body.pop() # pop - удаляет последний элемент из списка
#           Ввдимость пишем на карте
    if baitVisible== False:
# Проверим является пища не видимой, потому что она должна появиться сново
        baitVisible=True # Тут рисуем новую пищу
        bait = [random.randrange(1, 80) * 10, random.randrange(1, 60) * 10]  # primanka
# Тут рисуем пищу в другом координате. этот же код был наверху.
    playSurface.fill(white)
# у нас есть элемент поверхностный - PLAYSURFACE, сделаем белым    
"""
Но нам еще нужно прописать тело змейки (BODY, он  состоит из списка), мы можем
прописать эти элементы в списке по очереди, что делаем с помощью цикла for
"""
    for element in body:
        pygame.draw.rect(playSurface, green, pygame.Rect(element[0], element[1], 10, 10))
"""
В библиотеке pygame есть класс DRAW, в этом классе, есть метод RECT(Рисование
прямоугольника), мы передаем ему 3 элемента: поверхность, цвет, и еще 1 кдасс,
который тоже рисует прямоугольник. у него координата Х (element[0]), У, и
отдельно указываем ширину и высоту прямоугольника
"""
# рисуем пищу
    pygame.draw.rect(playSurface, lightslateblue, pygame.Rect(bait[0], bait[1], 10, 10))
# исправляем проблему, когда змейкка выходит за пределы экрана
    if position[0]>790 or position[0]<0:
        position[0]=400
    if position[1]>590 or position[1]<0:
        position[1]=300
# чтоб змейка себя не съела
    for element in body[1: ]:
        if position[0]==element[0] and position[1]==element[1]:
            position=[50,50] # координаты змейки
            body=[[80,50], [70,50], [60,50]] # структура тела змейки
    showScore()
# чтобы выполнилось функция SCRORE счетчик
    fpsController.tick(12)
# чтобы змейка двигаласчь по медленее
    pygame.display.flip()
Task:
# Разработка Тетрис.
Decision:
import pygame as pg
import random, time, sys
from pygame.locals import *
#Затем определяем основные константы – кадровую частоту fps, высоту и ширину окна программы, размер базового элемента фигур-букв block (20 х 20 пикселей), параметры стакана, символ для обозначения пустых ячеек на игровом поле:
fps = 25
window_w, window_h = 600, 500
block, cup_h, cup_w = 20, 20, 10
#Параметры side_freq и down_freq задают время, которое затрачивается на перемещение фигуры в сторону или вниз, если игрок удерживает клавишу нажатой:
side_freq, down_freq = 0.15, 0.1
#Для размещения стакана и информационных надписей, а также для конвертации координат нам также понадобятся константы side_margin и top_margin – первая задает дистанцию между правой и левой сторонами окна программы и стаканом; вторая определяет расстояние между верхней границей стакана и окном:
side_margin = int((window_w - cup_w * block) / 2)
top_margin = window_h - (cup_h * block) - 5
#Цвета фигур задаются двумя кортежами: colors и lightcolors. Последний включает чуть более светлые оттенки тех же цветов, что и colors – для создания псевдо 2.5 D эффекта.
colors = ((0, 0, 225), (0, 225, 0), (225, 0, 0), (225, 225, 0)) # синий, зеленый, красный, желтый
lightcolors = ((30, 30, 255), (50, 255, 50), (255, 30, 30), (255, 255, 30)) # светло-синий, светло-зеленый, светло-красный, светло-желтый
white, gray, black  = (255, 255, 255), (185, 185, 185), (0, 0, 0)
brd_color, bg_color, txt_color, title_color, info_color = white, black, white, colors[3], colors[0]
#Поскольку каждая фигура состоит из 4 блоков, размер шаблона должен быть 5 х 5: 
fig_w, fig_h = 5, 5
empty = 'o'
#Поскольку каждую фигуру-букву можно поворачивать на 90 градусов, все возможные варианты поворотов описаны в словаре figures с помощью вложенных списков, элементы которых состоят из строк: символом x отмечены занятые ячейки, o – пустые. Количество вращений зависит от формы буквы: у O, к примеру, будет всего один вариант:
figures = {'S': [['ooooo',
                  'ooooo',
                  'ooxxo',
                  'oxxoo',
                  'ooooo'],
                 ['ooooo',
                  'ooxoo',
                  'ooxxo',
                  'oooxo',
                  'ooooo']],
           'Z': [['ooooo',
                  'ooooo',
                  'oxxoo',
                  'ooxxo',
                  'ooooo'],
                 ['ooooo',
                  'ooxoo',
                  'oxxoo',
                  'oxooo',
                  'ooooo']],
           'J': [['ooooo',
                  'oxooo',
                  'oxxxo',
                  'ooooo',
                  'ooooo'],
                 ['ooooo',
                  'ooxxo',
                  'ooxoo',
                  'ooxoo',
                  'ooooo'],
                 ['ooooo',
                  'ooooo',
                  'oxxxo',
                  'oooxo',
                  'ooooo'],
                 ['ooooo',
                  'ooxoo',
                  'ooxoo',
                  'oxxoo',
                  'ooooo']],
           'L': [['ooooo',
                  'oooxo',
                  'oxxxo',
                  'ooooo',
                  'ooooo'],
                 ['ooooo',
                  'ooxoo',
                  'ooxoo',
                  'ooxxo',
                  'ooooo'],
                 ['ooooo',
                  'ooooo',
                  'oxxxo',
                  'oxooo',
                  'ooooo'],
                 ['ooooo',
                  'oxxoo',
                  'ooxoo',
                  'ooxoo',
                  'ooooo']],
           'I': [['ooxoo',
                  'ooxoo',
                  'ooxoo',
                  'ooxoo',
                  'ooooo'],
                 ['ooooo',
                  'ooooo',
                  'xxxxo',
                  'ooooo',
                  'ooooo']],
           'O': [['ooooo',
                  'ooooo',
                  'oxxoo',
                  'oxxoo',
                  'ooooo']],
           'T': [['ooooo',
                  'ooxoo',
                  'oxxxo',
                  'ooooo',
                  'ooooo'],
                 ['ooooo',
                  'ooxoo',
                  'ooxxo',
                  'ooxoo',
                  'ooooo'],
                 ['ooooo',
                  'ooooo',
                  'oxxxo',
                  'ooxoo',
                  'ooooo'],
                 ['ooooo',
                  'ooxoo',
                  'oxxoo',
                  'ooxoo',
                  'ooooo']]}
#Заливку сплошным цветом реализовать очень просто, но полупрозрачную заставку сделать сложнее – как ни странно, метод draw в Pygame до сих пор не поддерживает эту опцию. Есть несколько способов решения этой проблемы. Мы воспользуемся методом, который предусматривает создание дополнительной поверхности с попиксельным альфа-смешением, и последующую заливку экрана паузы цветом с наложением на поверхность окна игры:
def pauseScreen():
    pause = pg.Surface((600, 500), pg.SRCALPHA)
    pause.fill((0, 0, 255, 127))
    display_surf.blit(pause, (0, 0))
#Эта функция отвечает за создание нескольких дополнительных глобальных констант, инициализирует модуль Pygame, рисует стартовое окно игры, вызывает запуск Тетриса runTetris() и в случае необходимости отображает сообщение о проигрыше:
def main():
    global fps_clock, display_surf, basic_font, big_font
    pg.init()
    fps_clock = pg.time.Clock()
    display_surf = pg.display.set_mode((window_w, window_h))
    basic_font = pg.font.SysFont('arial', 20)
    big_font = pg.font.SysFont('verdana', 45)
    pg.display.set_caption('Тетрис Lite')
    showText('Тетрис Lite')
    while True: # начинаем игру
        runTetris()
        pauseScreen()
        showText('Игра закончена')
#Код игры располагается в функции runTetris():
def runTetris():
    cup = emptycup()
    last_move_down = time.time()
    last_side_move = time.time()
    last_fall = time.time()
    going_down = False
    going_left = False
    going_right = False
    points = 0
    level, fall_speed = calcSpeed(points)
    fallingFig = getNewFig()
    nextFig = getNewFig()
    #Основной цикл обрабатывает все основные события, связанные с генерацией фигур, движением вниз и показом следующей фигуры:
    while True: 
        if fallingFig == None:
            # если нет падающих фигур, генерируем новую
            fallingFig = nextFig
            nextFig = getNewFig()
            last_fall = time.time()
            if not checkPos(cup, fallingFig):
                return # если на игровом поле нет свободного места - игра закончена
        quitGame()
        for event in pg.event.get(): 
            if event.type == KEYUP:
                if event.key == K_SPACE:
                    pauseScreen()
                    showText('Пауза')
                    last_fall = time.time()
                    last_move_down = time.time()
                    last_side_move = time.time()
                #Цикл обрабатывает паузу и определяет момент, когда пользователь нажимает и отпускает клавиши со стрелками. Если клавиши →, ← и ↓ не нажаты, значения соответствующих переменных меняются на False:
                elif event.key == K_LEFT:
                    going_left = False
                elif event.key == K_RIGHT:
                    going_right = False
                elif event.key == K_DOWN:
                    going_down = False
            #Управление движением фигур происходит в ветке elif event.type == KEYDOWN: если нажата клавиша со стрелкой и функция checkPos() возвращает True, положение фигуры изменяется на один блок в соответствующем направлении:
            elif event.type == KEYDOWN:
                if event.key == K_LEFT and checkPos(cup, fallingFig, adjX=-1):
                    fallingFig['x'] -= 1
                    going_left = True
                    going_right = False
                    last_side_move = time.time()
                elif event.key == K_RIGHT and checkPos(cup, fallingFig, adjX=1):
                    fallingFig['x'] += 1
                    going_right = True
                    going_left = False
                    last_side_move = time.time()                    
                # поворачиваем фигуру, если есть место
                elif event.key == K_UP:
                    fallingFig['rotation'] = (fallingFig['rotation'] + 1) % len(figures[fallingFig['shape']])
                    #При нажатии ↑ происходит вращение фигуры – варианты берутся из словаря figures. Чтобы не получить ошибку IndexError: list index out of range, мы используем конструкцию, которая обнуляет индекс элемента, когда инкремент достигает максимального значения: fallingFig['rotation'] + 1) % len(figures[fallingFig['shape']]. Если функция checkPos() сообщает, что очередное вращение невозможно из-за того, что фигура натыкается на какой-то блок, нужно вернуться к предыдущему варианту из списка:
                    if not checkPos(cup, fallingFig):
                        fallingFig['rotation'] = (fallingFig['rotation'] - 1) % len(figures[fallingFig['shape']])
                #Для ускорения падения игрок нажимает и удерживает клавишу ↓:
                elif event.key == K_DOWN:
                    going_down = True
                    if checkPos(cup, fallingFig, adjY=1):
                        fallingFig['y'] += 1
                    last_move_down = time.time()
                #Если пользователь хочет мгновенно сбросить фигуру на дно, он может нажать Enter. Цикл for здесь определяет максимально низкую свободную позицию в стакане:
                elif event.key == K_RETURN:
                	going_down = False
                	going_left = False
                	going_right = False
                	for i in range(1, cup_h):
                    	    if not checkPos(cup, fallingFig, adjY=i):
                      	        break
                	fallingFig['y'] += i - 1
        #Чтобы определить, удерживает ли пользователь клавишу движения, программа использует условия:
        if (going_left or going_right) and time.time() - last_side_move > side_freq:
            if going_left and checkPos(cup, fallingFig, adjX=-1):
                fallingFig['x'] -= 1
            elif going_right and checkPos(cup, fallingFig, adjX=1):
                fallingFig['x'] += 1
            last_side_move = time.time()
        if going_down and time.time() - last_move_down > down_freq and checkPos(cup, fallingFig, adjY=1):
            fallingFig['y'] += 1
            last_move_down = time.time()
        #Если пользователь никак не вмешивается в управление фигурой, движение вниз происходит так:
        if time.time() - last_fall > fall_speed: # свободное падение фигуры
            if not checkPos(cup, fallingFig, adjY=1): # проверка "приземления" фигуры
                addToCup(cup, fallingFig) # фигура приземлилась, добавляем ее в содержимое стакана
                points += clearCompleted(cup)
                level, fall_speed = calcSpeed(points)
                fallingFig = None
            else: # фигура пока не приземлилась, продолжаем движение вниз
                fallingFig['y'] += 1
                last_fall = time.time()
        #Функцию runTetris() завершает набор функций, обеспечивающих отрисовку игрового поля, вывод названия игры, падающей и следующих фигур, а также информационных надписей:
        display_surf.fill(bg_color)
        drawTitle()
        gamecup(cup)
        drawInfo(points, level)
        drawnextFig(nextFig)
        if fallingFig != None:
            drawFig(fallingFig)
        pg.display.update()
        fps_clock.tick(fps)
#ункция txtObjects() принимает текст, шрифт и цвет, и с помощью метода render() возвращает готовые объекты Surface (поверхность) и Rect (прямоугольник). Эти объекты в дальнейшем обрабатываются методом blitв функции showText(), выводящей информационные надписи и название игры.
def txtObjects(text, font, color):
    surf = font.render(text, True, color)
    return surf, surf.get_rect()
#Выход из игры обеспечивает функция stopGame(), в которой используется sys.exit() из импортированного в начале кода модуля sys.
def stopGame():
    pg.quit()
    sys.exit()
def checkKeys():
    quitGame()
    for event in pg.event.get([KEYDOWN, KEYUP]):
        if event.type == KEYDOWN:
            continue
        return event.key
    return None
def showText(text):
    titleSurf, titleRect = txtObjects(text, big_font, title_color)
    titleRect.center = (int(window_w / 2) - 3, int(window_h / 2) - 3)
    display_surf.blit(titleSurf, titleRect)
    pressKeySurf, pressKeyRect = txtObjects('Нажмите любую клавишу для продолжения', basic_font, title_color)
    pressKeyRect.center = (int(window_w / 2), int(window_h / 2) + 100)
    display_surf.blit(pressKeySurf, pressKeyRect)
    while checkKeys() == None:
        pg.display.update()
        fps_clock.tick()
def quitGame():
    for event in pg.event.get(QUIT): # проверка всех событий, приводящих к выходу из игры
        stopGame() 
    for event in pg.event.get(KEYUP): 
        if event.key == K_ESCAPE:
            stopGame() 
        pg.event.post(event) 
def calcSpeed(points):
    # вычисляет уровень
    level = int(points / 10) + 1
    fall_speed = 0.27 - (level * 0.02)
    return level, fall_speed
def getNewFig():
    # возвращает новую фигуру со случайным цветом и углом поворота
    shape = random.choice(list(figures.keys()))
    newFigure = {'shape': shape,
                'rotation': random.randint(0, len(figures[shape]) - 1),
                'x': int(cup_w / 2) - int(fig_w / 2),
                'y': -2, 
                'color': random.randint(0, len(colors)-1)}
    return newFigure
#За добавление фигур к содержимому стакана отвечает addToCup():
def addToCup(cup, fig):
    for x in range(fig_w):
        for y in range(fig_h):
            if figures[fig['shape']][fig['rotation']][y][x] != empty:
                cup[x + fig['x']][y + fig['y']] = fig['color']
#Пустой стакан создается функцией emptycup():
def emptycup():
    # создает пустой стакан
    cup = []
    for i in range(cup_w):
        cup.append([empty] * cup_h)
    return cup
def incup(x, y):
    return x >= 0 and x < cup_w and y < cup_h
#Функция checkPos() следит за тем, чтобы падающая фигура оставалась в пределах игрового поля и не накладывалась на предыдущие. На примере слева фигура остается в допустимой области, на примере справа – ошибочно накладывается на предыдущую. Чтобы определить положение фигуры в стакане, нужно суммировать собственные координаты фигуры со «стаканными»:
def checkPos(cup, fig, adjX=0, adjY=0):
    # проверяет, находится ли фигура в границах стакана, не сталкиваясь с другими фигурами
    for x in range(fig_w):
        for y in range(fig_h):
            abovecup = y + fig['y'] + adjY < 0
            if abovecup or figures[fig['shape']][fig['rotation']][y][x] == empty:
                continue
            if not incup(x + fig['x'] + adjX, y + fig['y'] + adjY):
                return False
            if cup[x + fig['x'] + adjX][y + fig['y'] + adjY] != empty:
                return False
    return True
#За обнаружение и удаление заполненных рядов отвечает функция clearCompleted() вместе со вспомогательной isCompleted(). Если isCompleted() возвращает True, программе нужно последовательно переместить вниз все ряды, располагающиеся над удаляемым, после чего заполнить нулевой ряд empty-значениями о:
def isCompleted(cup, y):
    # проверяем наличие полностью заполненных рядов
    for x in range(cup_w):
        if cup[x][y] == empty:
            return False
    return True
def clearCompleted(cup):
    # Удаление заполенных рядов и сдвиг верхних рядов вниз
    removed_lines = 0
    y = cup_h - 1
    while y >= 0:
        if isCompleted(cup, y):
           for pushDownY in range(y, 0, -1):
                for x in range(cup_w):
                    cup[x][pushDownY] = cup[x][pushDownY-1]
           for x in range(cup_w):
                cup[x][0] = empty
           removed_lines += 1
        else:
            y -= 1
    return removed_lines
def convertCoords(block_x, block_y):
    return (side_margin + (block_x * block)), (top_margin + (block_y * block))
#Каждая фигура состоит из 4 элементов – блоков. Блоки рисует функция drawBlock(), которая получает координаты из convertCoords():
def drawBlock(block_x, block_y, color, pixelx=None, pixely=None):
    #отрисовка квадратных блоков, из которых состоят фигуры
    if color == empty:
        return
    if pixelx == None and pixely == None:
        pixelx, pixely = convertCoords(block_x, block_y)
    pg.draw.rect(display_surf, colors[color], (pixelx + 1, pixely + 1, block - 1, block - 1), 0, 3)
    pg.draw.rect(display_surf, lightcolors[color], (pixelx + 1, pixely + 1, block - 4, block - 4), 0, 3)
    pg.draw.circle(display_surf, colors[color], (pixelx + block / 2, pixely + block / 2), 5)
def gamecup(cup):
    # граница игрового поля-стакана
    pg.draw.rect(display_surf, brd_color, (side_margin - 4, top_margin - 4, (cup_w * block) + 8, (cup_h * block) + 8), 5)
    # фон игрового поля
    pg.draw.rect(display_surf, bg_color, (side_margin, top_margin, block * cup_w, block * cup_h))
    for x in range(cup_w):
        for y in range(cup_h):
            drawBlock(x, y, cup[x][y])
def drawTitle():
    titleSurf = big_font.render('Тетрис Lite', True, title_color)
    titleRect = titleSurf.get_rect()
    titleRect.topleft = (window_w - 425, 30)
    display_surf.blit(titleSurf, titleRect)
def drawInfo(points, level):
    pointsSurf = basic_font.render(f'Баллы: {points}', True, txt_color)
    pointsRect = pointsSurf.get_rect()
    pointsRect.topleft = (window_w - 550, 180)
    display_surf.blit(pointsSurf, pointsRect)
    levelSurf = basic_font.render(f'Уровень: {level}', True, txt_color)
    levelRect = levelSurf.get_rect()
    levelRect.topleft = (window_w - 550, 250)
    display_surf.blit(levelSurf, levelRect)
    pausebSurf = basic_font.render('Пауза: пробел', True, info_color)
    pausebRect = pausebSurf.get_rect()
    pausebRect.topleft = (window_w - 550, 420)
    display_surf.blit(pausebSurf, pausebRect)
    escbSurf = basic_font.render('Выход: Esc', True, info_color)
    escbRect = escbSurf.get_rect()
    escbRect.topleft = (window_w - 550, 450)
    display_surf.blit(escbSurf, escbRect)
def drawFig(fig, pixelx=None, pixely=None):
    figToDraw = figures[fig['shape']][fig['rotation']]
    if pixelx == None and pixely == None:    
        pixelx, pixely = convertCoords(fig['x'], fig['y'])
    #отрисовка элементов фигур
    for x in range(fig_w):
        for y in range(fig_h):
            if figToDraw[y][x] != empty:
                drawBlock(None, None, fig['color'], pixelx + (x * block), pixely + (y * block))
def drawnextFig(fig):  # превью следующей фигуры
    nextSurf = basic_font.render('Следующая:', True, txt_color)
    nextRect = nextSurf.get_rect()
    nextRect.topleft = (window_w - 150, 180)
    display_surf.blit(nextSurf, nextRect)
    drawFig(fig, pixelx=window_w-150, pixely=230)
if __name__ == '__main__':
    main()
Task:
Даны две различные клетки шахматной доски. Напишите программу, которая определяет, может ли ладья попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом ладьи можно попасть во вторую, или «NO» в противном случае.
# Разработка шахматы.
Decision:
x1,y1,x2,y2=int(input()),int(input()),int(input()),int(input())
if x1==x2 or y1==y2:
    print("YES")
else:    
    print("NO")
Task:
Даны две различные клетки шахматной доски. Напишите программу,  которая определяет, может ли король попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом короля можно попасть во вторую, или «NO» в противном случае.
# Разработка шахматы.
Decision:
x1,y1,x2,y2=int(input()),int(input()),int(input()),int(input())
if (x2==x1+1 and y2==y1) or (x2==x1+1 and y2==y1-1) or (x2==x1+1 and y2==y1+1) or (x2==x1 and y2==y1+1) or (x2==x1 and y2==y1-1) or (x2==x1-1 and y2==y1) or (x2==x1-1 and y2==y1-1) or (x2==x1-1 and y2==y1+1):
    print("YES")
else:    
    print("NO")
Task:
Заданы две клетки шахматной доски. Напишите программу, которая определяет имеют ли указанные клетки один цвет или нет. Если они покрашены в один цвет, то выведите слово «YES», а если в разные цвета — то «NO».
# Разработка шахматы.
Decision:
x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if (x1 + y1 + x2 + y2) % 2 == 0:
    print('YES')
else:
    print('NO')
Task:
Даны две различные клетки шахматной доски. Напишите программу, которая определяет, может ли слон попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом слона можно попасть во вторую или «NO» в противном случае.
# Разработка шахматы.
Decision:
x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if (x1 - y1 == x2 - y2) or (x1 + y1 == x2 + y2):
    print('YES')
else:
    print('NO')
Task:
Даны две различные клетки шахматной доски. Напишите программу,  которая определяет, может ли конь попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом коня можно попасть во вторую или «NO» в противном случае.
# Разработка шахматы.
Decision:
x1,y1,x2,y2= int(input()),int(input()),int(input()),int(input())
if (x2==x1-1 or x2==x1+1) and y2==y1-2:
    print('YES')
elif (x2==x1-2 or x2==x1+2) and y2==y1-1:
    print('YES')
elif (x2==x1-2 or x2==x1+2) and y2==y1+1:
    print('YES')
elif (x2==x1-1 or x2==x1+1) and y2==y1+2:
    print('YES')
else:
    print('NO')
Task:
Даны две различные клетки шахматной доски. Напишите программу,  которая определяет, может ли ферзь попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом ферзя можно попасть во вторую или «NO» в противном случае.
# Разработка шахматы.
Decision:
x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if (x1 - y1 == x2 - y2) or (x1 + y1 == x2 + y2):#слон
    print('YES')
elif (x1==x2 or x2==x1+1 or x2==x1-1) and (y1==y2 or y2==y1+1 or y2==y1-1): #король
    print('YES')
elif x1==x2 or y1==y2:#ладья
    print('YES')
else :
    print('NO')
Task:
Нарисуйте шахматную доску размера nхn, состоящую из нулей и единиц. Верхний левый символ должен быть единицей.
Примечание: между единицами и нулями в строке не должно быть пробелов, каждая строка должна быть на новой строке (в тестах отображается по-другому для экономии пространства).
# Разработка шахматы.
Decision:
tuser@kvmubuntu:~$ cat Py-Draft.py
n = int(input())
for i in range(n):
  row = ""
  for j in range(n):
    if (i+j)%2==0:
      row += "1"
    else:
      row += "0"
  print(row)
tuser@kvmubuntu:~$ python3 Py-Draft.py
3
101
010
101
tuser@kvmubuntu:~$ python3 Py-Draft.py
5
10101
01010
10101
01010
10101
tuser@kvmubuntu:~$ python3 Py-Draft.py
6
101010
010101
101010
010101
101010
010101
Task:
Converting a dictionary list to html code. From this:
[{"A":"a_1", "B":"b_1", "C":"c_1"},
{"A":"a_2", "B":"b_2", "C":"c_2"}]
Convert to this:
<tr>
    <td>
        <select>
            <option value="A">
            A
            </option>
            <option value="a_1">
            a_1
            </option>
            <option value="a_2">
            a_2
            </option>
        </select>
    </td>
    <td>
        <select>
            <option value="B">
            B
            </option>
            <option value="b_1">
            b_1
            </option>
            <option value="b_2">
            b_2
            </option>
        </select>
    </td>
    <td>
        <select>
            <option value="C">
            C
            </option>
            <option value="c_1">
            c_1
            </option>
            <option value="c_2">
            c_2
            </option>
        </select>
    </td>
</tr>
<tr>
    <td>
        a_1
    </td>
    <td>
        b_1
    </td>
    <td>
        c_1
    </td>
</tr>
<tr>
    <td>
        a_2
    </td>
    <td>
        b_2
    </td>
    <td>
        c_2
    </td>
</tr>
# Разработка Data Conversion.
Decision:
'''
listOfDictionaries = [
        {"A":"a_1", "B":"b_1", "C":"c_1"}, 
        {"A":"a_2", "B":"b_2", "C":"c_2"}
    ]
'''
listOfDictionaries=[]
listOfDictionaries.append({"A":"a_1", "B":"b_1", "C":"c_1"})
listOfDictionaries.append({"A":"a_2", "B":"b_2", "C":"c_2"})
'''
numb=int(input("Enter number: "))
for dictionary in range(1,numb):
    listOfDictionaries.append({"A":"a_$dictionary", "B":"b_$dictionary", "C":"c_$dictionary"})
    print(dictionary)
'''
'''
for dictionary in listOfDictionaries:
    #print(dictionary)
    #print(listOfDictionaries[0]['A'])
    for k in dictionary:
        print(k)
    for v in dictionary:
        print(dictionary[v])
'''
html="""{0}"""
tr="<tr>{0}</tr>"
td="<td>{0}</td>"
dictionary=[tr.format(''.join([td.format(a) for a in item])) for item in listOfDictionaries[:1]]
dictionary.extend([tr.format(''.join([td.format(item[a]) for a in item])) for item in listOfDictionaries])
print (html.format("".join(dictionary)))
Task:
Нужно чтобы на рабочем столе периодично отображались курсы доллара. заходим в центральный банк  смотрим курс валют, просмотрим тег. зацепимся именно за знак доллара, он один на этой странице. у него тег ins, и цепляюсь за него, потом есть родительский тег tr и забираю последний элемент td
# Разработка курсы доллара.
Decision:
#!/usr/bin/python3.7
import requests #1 импортирую бибилиотеку, так как она будет отвечать за отправку запросов
from bs4 import BeautifulSoup
import os #26 отвечает за взаимодействие с ОС
def get_html(): #6 создаем фугкцию которая отправляет запрос
	url='http://www.cbr.ru/'
	r=requests.get(url) #8 делаем запрос на сервер
	return r.text #9 функция возвращает свойство text, уоторая содержит информацию об html
def get_dollar_rate(html): 
	soup = BeatifulSoup(html, 'lxml')
	# t = soup.find('ins', text='$') #13 ищем ins в теге tr 
	# t = soup.find('ins', text='$').find_parent('tr') #17 обратимся к его родительскому контейнеру tr
 	t = soup.find('ins', text='$').find_parent('tr').find_all('td')[-1].text #19 получим тег tr
	result=t.split('>')[-1] #21 указываем до какого числа нуно пропустить инфу (>) и какой элемент нам нужен (-1)
 	return result #23 получим число курс
def send_message(message): #24 хотим выводить это число на экран
 	title='dollar SHA:'
	#26 os.system('notify-send "title" "message"')
	os.system('notify-send "{}" "{}"'.format(title, message)) 
def main():
 	rate=get_dollar_rate(get_html()) #27 получаем курс доллара
 	send_message(rate)
if __name__ == '__main__':
	main()
Task:
Генерация.
Данная программа очень простая, она брет два случайных слова из файла words.txt и комбинирует их
Зачем это нужно?
При комбинировании слов включается фантазия, позволяющая представить какую вещь можно было бы создать, скомбинировав
два предмета или их свойства
Данный подход примняется в ТРИЗ для генерации идей, и изобретений
# Разработка Генерация.
Decision:
import random#1 Импортируем библиотеку
mas=[]#2 создаем пустой список
f=open(u'words.txt', 'r')#3 Открываем файлы со словами (существит)
for x in f:#4 и в цикле
    mas.append(x.replace('\n',''))#5 добавляем их всех в массив, добавляя знак переноса строки
l=len(mas)-1#6 получаем длину этого массива
z=''
print('-----------------------------------------')
print('Генератор идей на основе случайного скрещивания предметов')#
print('-----------------------------------------')
print('Нажимайте Enter для генерации пар')#
print('\n')
while(z!='exit'):#7 и пока не напечатаем exit
    a=random.randint(0,l)#8 сгенерируем 2 случайных числа а
    b=random.randint(0,l)#8 и b с диапозоном от 0 до длина массива
    print(mas[a]+'-'+mas[b])# 9 и печатаем случайные строчки из файла words.txt после чего мы получаем различные комбинации случайных предметов
    z=input('')#    
Task:
Для выполнения данного задания:
Создайте файл my_calc.py,
В этом файле напишите функцию calc_sum, которая на вход принимает два целых числа и возвращает их сумму. Пропишите аннотации к переменным, а также докстринг для функции,
Загрузите файл во временное сессионное хранилище Google Colab
Импортируйте файл в ноутбук:
import my_calc
Воспользуйтесь вашей функцией для сложения двух чисел: 10 и 5
Выведите результат на экран
# Разработка собстенного модуля.
Decision:
tuser@kvmubuntu:~$ touch my_calc.py
tuser@kvmubuntu:~$ cat my_calc.py 
def calc_sum(oper1: int = 20, oper2: int = 30) -> int:
    """_summary_
    This method returns sum of 2 input arguments
    """
    total_sum = oper1 + oper2
    return total_sum                                                                                                                
tuser@kvmubuntu:~$ cat test.py            
import my_calc as mc
print(mc.calc_sum())
tuser@kvmubuntu:~$ /bin/python3.11 test.py
50
Task:
Create a new git-repository on the command lineю
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
tuser@kvmubuntu:~$ git init
tuser@kvmubuntu:~$ git add .
tuser@kvmubuntu:~$ git commit -m "first commit"
tuser@kvmubuntu:~$ git branch -M main
tuser@kvmubuntu:~$ git remote add origin https://github.com/thost/myportfolio.git
tuser@kvmubuntu:~$ git push -u origin main
Task:
Добавление почты и логина в Git
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
tuser@kvmubuntu:~$ git config --global user.email "tmail@yandex.ru"
tuser@kvmubuntu:~$ git config --global user.name "tname"
Task:
Изменения в проекте Github
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
tuser@kvmubuntu:~$ git status
tuser@kvmubuntu:~$ git add .
tuser@kvmubuntu:~$ git commit -m "second commit"
tuser@kvmubuntu:~$ git push -u origin main
Task:
Скопируем проект в другом компе
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
tuser@kvmubuntu:~$ git clone https://github.com/David138it/tProject
tuser@kvmubuntu:~$ cd tProject/
Task:
Возвращаемся в первый комп и там уже вносим копируем данные другого компа 
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
tuser@kvmubuntu:~$ git fetch origin
tuser@kvmubuntu:~$ cat tFile1 
tuser@kvmubuntu:~$ git merge
tuser@kvmubuntu:~$ cat tFile1
Source:
# https://docs.github.com/ru/repositories/creating-and-managing-repositories/cloning-a-repository
Task:   
сделать rebase на main branch
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
tuser@kvmubuntu:~$ git checkout your-branch
tuser@kvmubuntu:~$ git rebase main
- Когда вы сделаете готовый branch, вы хотите все обнволения main добавить себе в branch
Source:
# https://www.youtube.com/playlist?list=PLg5SS_4L6LYuu1RAT4l1tCkZrJzkIaNgL
Task:
Я не хочу кидать в гитхаб репозитория папку Env. Показать последний коммит, последние 2 коммита и статистику внесенных ими изменений.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
tuser@kvmubuntu:~$ vim .gitignore
tuser@kvmubuntu:~$ cat .gitignore
Env/
Env/*
tuser@kvmubuntu:~$ git show HEAD^
tuser@kvmubuntu:~$ git log -2 --stat
tuser@kvmubuntu:~$ git add .
Task:
Есть master (публичная версия сайта), в двух параллельных ветках (branch_1 и branch_2) было отредактировано одно и то же место одного и того же файла, первую ветку (branch_1) влили в master, попытка влить вторую вызывает конфликт.переключаемся на ветку master
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
tuser@kvmubuntu:~$ git checkout master
tuser@kvmubuntu:~$ git checkout -b branch_1
subl .
tuser@kvmubuntu:~$ git commit -a -m "Правка 1"
tuser@kvmubuntu:~$ git checkout master
tuser@kvmubuntu:~$ git checkout -b branch_2
subl .
tuser@kvmubuntu:~$ git commit -a -m "Правка 2"
tuser@kvmubuntu:~$ git checkout master
tuser@kvmubuntu:~$ git merge branch_1
tuser@kvmubuntu:~$ git merge branch_2
subl .
tuser@kvmubuntu:~$ git commit -a -m "Устранение конфликта"
Task:
Если в разных ветках, в одних и тех же файлов, разные изменения, значит будет конфликт. Для этого установим утилиту kdiff3 с официального сайта. Укажем утилиту в Гит
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
tuser@kvmubuntu:~$ git config --global merge.tool kdiff3
tuser@kvmubuntu:~$ git merge master
tuser@kvmubuntu:~$ git mergetool
tuser@kvmubuntu:~$ git status
Task:
Удалим не нужные файлы, которые появились из-за бекапа и коммитим переделанный файл
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
tuser@kvmubuntu:~$ git merge new_vetka создать новую ветку с указанным именем
tuser@kvmubuntu:~$ git branch new_branch
tuser@kvmubuntu:~$ git branch -d hotfix
tuser@kvmubuntu:~$ git branch —merged
tuser@kvmubuntu:~$ git branch —no-merged
tuser@kvmubuntu:~$ git branch -a
Task:
Есть master (публичная версия сайта), хотим масштабно что-то поменять (переверстать «шапку»), но по ходу работ возникает необходимость подправить критичный баг (неправильно указан контакт в «подвале»).создадим новую ветку для задачи изменения «шапки» и перейдём в неё. устраняем баг и сохраняем разметку.  «подвала». удаляем ветку footer_hotfix
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
tuser@kvmubuntu:~$ git checkout -b new_page_header
subl inc/header.html
tuser@kvmubuntu:~$ git commit -a -m "Новая шапка: смена логотипа"
tuser@kvmubuntu:~$ git checkout master
tuser@kvmubuntu:~$ git checkout -b footer_hotfix
tuser@kvmubuntu:~$ subl inc/footer.html
tuser@kvmubuntu:~$ git commit -a -m "Исправление контакта в подвале"
tuser@kvmubuntu:~$ git checkout master
tuser@kvmubuntu:~$ git merge footer_hotfix 
tuser@kvmubuntu:~$ git branch -d footer_hotfix
tuser@kvmubuntu:~$ git checkout new_page_header
tuser@kvmubuntu:~$ subl inc/header.html
tuser@kvmubuntu:~$ git commit -a -m "Новая шапка: смена навигации"
tuser@kvmubuntu:~$ git checkout master
tuser@kvmubuntu:~$ git merge new_page_header
tuser@kvmubuntu:~$ git branch -d new_page_header
Source:
# https://www.youtube.com/playlist?list=PLoonZ8wII66iUm84o7nadL-oqINzBLk5g
Task:
Поиск информации об инструментах в системе.
# Администрирование локальных, виртуальных и облачных серверов.
Decision:
[tuser@kvmredhat ~]$ hostnamectl
[tuser@kvmredhat ~]$ python -V
Python 2.7.5
PS C:\Windows\system32> cd c:\Users\tuser\Documents\py\
PS C:\Windows\system32> python -m venv tenv
PS C:\Windows\system32> ls
Mode         LastWriteTime     Length Name
----         -------------     ------ ----
d-----    09.09.2024   16:20        tenv
-a----    09.09.2024   15:59      264 tpy.py
PS C:\Windows\system32> .\tenv\Scripts\activate
PS C:\Windows\system32> pip list
Package      Version
------------------ ---------
certifi      2024.8.30
charset-normalizer 3.3.2
idna       3.8
pip        21.2.3
requests     2.32.3
setuptools     57.4.0
urllib3      2.2.3
WARNING: You are using pip version 21.2.3; however, version 24.2 is available.
You should consider upgrading via the 'C:\Users\tuser\Documents\py\tenv\Scripts\python.exe -m pip install --upgrade pip' command.
PS C:\Windows\system32> C:\Users\tuser\Documents\py\tenv\Scripts\python.exe -m pip install --upgrade pip --proxy http://t2rs-fgproxy.tdomain.ru:8080
PS C:\Windows\system32> pip install requests --proxy http://t2rs-fgproxy.tdomain.ru:8080
Source:
# https://docs.python.org/3/library/venv.html - Creating virtual environments.
# https://realpython.com/python-coding-setup-windows/#installing-python-with-pyenv-for-windows - Installing Python With pyenv for Windows.
# https://wiki.merionet.ru/articles/kak-opredelit-versiyu-linux#:~:text=%D0%A1%D0%B0%D0%BC%D1%8B%D0%B9%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE%D0%B9%20%D1%81%D0%BF%D0%BE%D1%81%D0%BE%D0%B1%20%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%B8%D1%82%D1%8C%20%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8E,%D0%B2%D0%BC%D0%B5%D1%81%D1%82%D0%B5%20%D1%81%20%D0%BA%D0%BE%D0%BD%D0%BA%D1%80%D0%B5%D1%82%D0%BD%D0%BE%D0%B9%20%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B5%D0%B9%20%D1%8F%D0%B4%D1%80%D0%B0. - Как определить версию Linux?
Task:
Пробежаться по всем ячейкам выделенной области и для каждой ячейки аменять формулу на начение.
# Разработка макросов в VBA.
Decision:
- Файл - Параметры - Настроить ленту - Выбрать команды - ОСновные вкладки - Раработчик - Добавить - Ок
- Раработчик - Visual Basic - Insert - Module
Sub Аменитель()
For Each cell In Selection
cell.Formula = cell.Value
Next cell
MsgBox "Я все сделал!"
End Sub
- Save - *.xlsm - выделяем ячейки - Макросы - аменитель - Выполнить
Task:
Рассчитать сумму НДС
# Разработка макросов в VBA.
Decision:
...
Function NDS(Summa)
    NDS = Summa * 0.13
End Function
- сохранить - Вставить функцию - Категория - Определенные польователем - NDS - ок
Source:
# https://www.planetaexcel.ru/techniques/3/59/ - Создание макросов и пользовательских функций на VBA.
# https://learn.microsoft.com/ru-ru/office/vba/api/overview/ - Справочник по VBA для Excel.
# https://habr.com/ru/articles/112080/ - Автоматизация рутины в Microsoft Excel при помощи VBA.
Task:
Создать макрос в Excel, который будет автоматически проверять данные на упаковке, используя API OpenAI, и формировать отчет с результатами проверки.
Структура и описание работы макроса
1. Подбор файлов:
# Макрос запускается вручную пользователем.
# Пользователь указывает папку с файлами макетов через проводник.
# Для выбора папки с макетами на первой странице создается кнопка "Выбрать папку".
# По нажатию на кнопку открывается проводник для выбора папки с макетами.
# Макрос ищет файлы PDF для каждой строки в таблице, где имя файла начинается со значения в столбце "EAN" и заканчивается на "notforprint.pdf".
# Ссылки на найденные файлы выводятся в отдельный столбец.
# Если файл не найден, соответствующая ячейка окрашивается в красный цвет.
2. Создание страницы PARAM:
# Макрос создает вторую страницу в файле Excel под названием PARAM.
# На этой странице создаются параметры:
system (значение по умолчанию: "gpt-4o-mini")
user (значение по умолчанию: "контекст")
model (значение по умолчанию: "запрос")
API_KEY (значение по умолчанию: "a16z")
3. Проверка данных:
# На первой странице создается кнопка "Проверить".
# При нажатии на кнопку формируется JSON для каждой строки, который состоит из названия столбцов и параметров в каждом столбце.
# Файл по ссылке кодируется в base64.
# Отправляется запрос на API OpenAI с параметрами:
model (берется со страницы PARAM)
system (берется со страницы PARAM)
user (значение из страницы PARAM + конкатенация JSON)
API_KEY (берется со страницы PARAM)
Обязательное указание response_format={"type": "json_object"}
# Результат запроса (JSON) распарсивается и добавляется в таблицу как новые столбцы.
# Лог выполнения и результаты каждого шага записываются на новую страницу LOG.
4. Условное форматирование:
o После завершения обработки всех строк, добавить условное форматирование.
o Выделить красным те ячейки в новых столбцах, которые не соответствуют начальным значениям.
Требования к реализации
1. Обработка ошибок:
o Макрос должен корректно обрабатывать случаи, когда API возвращает ошибку или некорректные данные.
o При возникновении ошибки отображать сообщение пользователю и продолжать выполнение для следующих строк.
# Разработка макросов в VBA.
Decision:
- Module1
Function GetFolderPath(Optional ByVal Title As String = "Выберите папку", _
                       Optional ByVal InitialPath As String = "c:\") As String
    ' функция выводит диалоговое окно выбора папки с заголовком Title,
    ' начиная обзор диска с папки InitialPath
    ' возвращает полный путь к выбранной папке, или пустую строку в случае отказа от выбора
    Dim PS As String: PS = Application.PathSeparator
    With Application.FileDialog(msoFileDialogFolderPicker)
        If Not Right$(InitialPath, 1) = PS Then InitialPath = InitialPath & PS
        .ButtonName = "Выбрать": .Title = Title: .InitialFileName = InitialPath
        If .Show <> -1 Then Exit Function
        GetFolderPath = .SelectedItems(1)
        If Not Right$(GetFolderPath, 1) = PS Then GetFolderPath = GetFolderPath & PS
    End With
End Function
- Лист 1
Sub ПримерИспользования_GetFolderPath()
    ПутьКПапке = GetFolderPath("Заголовок окна", ThisWorkbook.Path)   ' запрашиваем имя папки
    If ПутьКПапке = "" Then Exit Sub    ' выход, если пользователь отказался от выбора папки
    MsgBox "Выбрана папка: " & ПутьКПапке, vbInformation
End Sub
- Лист 1
Sub CommandButton1_Click()
    Dim V As String
    Dim BrowseFolder As String
    'открываем диалоговое окно выбора папки
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Выберите папку или диск"
        .Show
        On Error Resume Next
        Err.Clear
        V = .SelectedItems(1)
        If Err.Number <> 0 Then
            MsgBox "Вы ничего не выбрали!"
            Exit Sub
        End If
    End With
    BrowseFolder = CStr(V)
    'добавляем лист и выводим на него шапку таблицы
    'ActiveWorkbook.Sheets.Add
    With Range("A1:E1")
        .Font.Bold = True
        .Font.Size = 12
    End With
    Range("A1").Value = "Имя файла"
    'Range("B1").Value = "Путь"
    Range("B1").Value = "Размер"
    'Range("D1").Value = "Дата создания"
    'Range("E1").Value = "Дата изменения"
    'вызываем процедуру вывода списка файлов
    'измените True на False, если не нужно выводить файлы из вложенных папок
    ListFilesInFolder BrowseFolder, True
End Sub
Private Sub ListFilesInFolder(ByVal SourceFolderName As String, ByVal IncludeSubfolders As Boolean)
    Dim FSO As Object
    Dim SourceFolder As Object
    Dim SubFolder As Object
    Dim FileItem As Object
    Dim r As Long
    Set FSO = CreateObject("Scripting.FileSystemObject")
    Set SourceFolder = FSO.getfolder(SourceFolderName)
    r = Range("A65536").End(xlUp).Row + 1 'Находм первую пустую строку
    'Выводим данные по файлу
    For Each FileItem In SourceFolder.Files
        Cells(r, 1).Formula = FileItem.Name
        'Cells(r, 2).Formula = FileItem.Path
        Cells(r, 2).Formula = FileItem.Size
        'Cells(r, 4).Formula = FileItem.DateCreated
        'Cells(r, 5).Formula = FileItem.DateLastModified
        r = r + 1
        X = SourceFolder.Path
    Next FileItem
    'Вызываем процедуру повторно для каждой вложенной папки
    If IncludeSubfolders Then
        For Each SubFolder In SourceFolder.SubFolders
            ListFilesInFolder SubFolder.Path, True
        Next SubFolder
    End If
    Columns("A:B").AutoFit
    Set FileItem = Nothing
    Set SourceFolder = Nothing
    Set FSO = Nothing
End Sub
- Лист 1
...
    For Each FileItem In SourceFolder.Files
        'MsgBox FileItem
        'pdfFiles = Application.GetOpenFilename("PDF Files (*.pdf), *.pdf")
        If FileItem.Name Like "EAN*notforprint.pdf" Then
            'MsgBox FileItem.Name
            Cells(r, 1).Formula = FileItem.Name
            'Cells(r, 2).Formula = FileItem.Path
            Cells(r, 2).Formula = FileItem.Size
            'Cells(r, 4).Formula = FileItem.DateCreated
            'Cells(r, 5).Formula = FileItem.DateLastModified
            r = r + 1
        'ElseIf FileItem.Name <> "EAN*notforprint2.pdf" Then
        Else
            Range("A2").Interior.Color = vbRed
        End If
        X = SourceFolder.Path
    Next FileItem
...
- Лист 1
Sub CommandButton1_Click()
    ...
    'ActiveWorkbook.Sheets.Add.Name = "PARAM"
    'ActiveWorkbook.Sheets.Add After:=ActiveWorkbook.Worksheets(ActiveWorkbook.Worksheets.Count)
    ActiveWorkbook.Sheets.Add(After:=ActiveWorkbook.Worksheets(ActiveWorkbook.Worksheets.Count)).Name = "PARAM"
    With Sheets("PARAM").Range("A1:D1")
        .Font.Bold = True
        .Font.Size = 12
    End With
    Sheets("PARAM").Range("A1").Value = "system"
    Sheets("PARAM").Range("B1").Value = "user"
    Sheets("PARAM").Range("C1").Value = "model"
    Sheets("PARAM").Range("D1").Value = "API_KEY"
End Sub
...
Source:
# https://support.microsoft.com/ru-ru/office/%D0%BD%D0%B0%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BC%D0%B0%D0%BA%D1%80%D0%BE%D1%81%D0%B0-%D0%BA%D0%BD%D0%BE%D0%BF%D0%BA%D0%B5-%D1%84%D0%BE%D1%80%D0%BC%D0%B0-%D0%B8%D0%BB%D0%B8-%D0%BA%D0%BD%D0%BE%D0%BF%D0%BA%D0%B5-%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82-%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-d58edd7d-cb04-4964-bead-9c72c843a283 - Добавить командную кнопку (элемент ActiveX).
# https://excelvba.ru/code/GetFileOrFolderPath?ysclid=m1yeem32al851955275 - Вывод диалоговых окон выбора файла и папки средствами VBA (выбрать файл или папку).
# https://www.planetaexcel.ru/techniques/3/45/ - Способ 2. Готовый макрос для ленивых.
# https://vremya-ne-zhdet.ru/vba-excel/tsvet-yacheyki-zalivka-fon/?ysclid=m1zynai2ah725271390 - Заливка ячейки цветом в VBA Excel.
# https://learn.microsoft.com/ru-ru/office/vba/api/excel.sheets.add - Пример.
# https://vremya-ne-zhdet.ru/vba-excel/rabochiy-list-sozdaniye-kopirovaniye-udaleniye/?ysclid=m25gff1p5c565317341 - Примеры создания листов.
# https://dzen.ru/a/Y3pim_-6nCuOxj9k?ysclid=m25h1dcl3j61592152 - Вставить лист после другого листа.
# https://www.cyberforum.ru/vba/thread1472349.html?ysclid=m28fdjxpam550866220 - Создание кнопки на листе программно.
Task:
Закон Хаббла. Расширение Вселенной. Основы теории Большого Взрыва.
# Астрофизика.
Decision:
Закон Хаббла (закон всеобщего разбегания галактик) — космологический закон, описывающий расширение Вселенной. В статьях и научной литературе в зависимости от её специализации и даты публикаций он формулируется по-разному.
Классическое определение: ν=Н0*r, где ν — скорость галактики, r — расстояние до неё, а Н0 — коэффициент пропорциональности, сегодня называемый постоянной Хаббла.
Однако в современных работах наблюдателей эта зависимость принимает вид c*z=H0*r, где с — скорость света, а z — красное смещение. Также, последнее является стандартным обозначением расстояния во всех современных космологических работах.
Третий вид закона Хаббла можно встретить в теоретических публикациях:
H='a(t1)/a(t1)
где a — масштабный фактор, зависящий только от времени, 'a — его производная по времени.
Закон Хаббла является одним из основных наблюдаемых фактов в космологии. С его помощью можно примерно оценить время расширения Вселенной (так называемый Хаббловский возраст Вселенной):
tH=r/V=1/H0
Эта величина с точностью до численного множителя порядка единицы соответствует возрасту Вселенной, рассчитываемому по стандартной космологической модели Фридмана.
Расширение Вселенной — явление, состоящее в почти однородном и изотропном расширении космического пространства в масштабах всей Вселенной, выводимое через наблюдаемое с Земли космологическое красное смещение.
Экспериментально расширение Вселенной подтверждается выполнением закона Хаббла, а также уменьшением светимости экстремально удалённых «стандартных свеч» (сверхновых типа Ia). Согласно теории Большого взрыва, Вселенная расширяется из начального сверхплотного и сверхгорячего состояния. Является ли это исходное состояние сингулярным (как предсказывает классическая теория гравитации — общая теория относительности) или нет — активно дебатируемый вопрос, разрешить который надеются разработкой квантовой теории гравитации.
Теоретически явление было предсказано и обосновано А. Фридманом на раннем этапе разработки общей теории относительности из общефилософских соображений об однородности и изотропности Вселенной.
«Большой взрыв» - это научная теория о том, как зародились звезды, блохи и все то, что мы видим сегодня.
Вселенная начиналась как очень горячая, маленькая и плотная сверхсила (сочетание четырех фундаментальных сил), без звезд, атомов, формы и структуры (называемой «сингулярностью»). Около 13,8 миллиардов лет назад пространство расширилось невероятно быстро, словно произошел большой взрыв. Он и образовал галактики, звездные системы, планеты и стал точкой отсчета возникновения всего сущего. В 1927 году Жорж Леметр впервые заметил, что расширяющуюся вселенную можно проследить во времени до исходной точки. Кстати, она все еще расширяется и становится все холоднее. Ученые, изучающие космологию, согласны с тем, что теория Большого Взрыва соответствует тому, что они наблюдают сейчас.
Название теории возникло во время радиоэфира на шоу Фреда Хойла. Он не знал как обозвать это открытие и в шутку обозначил его как "Большой Взрыв". Ученые посчитали характеристику не совсем верной, однако она показалась им забавной, и они, все-таки, решились утвердить Теорию Большого Взрыва, как официальное название.
Правдоподобность Теории Большого Взрыва подкрепляется многочисленными наблюдениями ученых. Самое важное - красное смещение очень далеких галактик. Так называемый "Redshift" - это эффект Доплера, возникающий в свете. Когда объект удаляется от Земли, его лучи уходят в более красный, нежели сам объект, цвет. Красные волны являются самыми длинными из волн в видимом спектре, и чем больше красное смещение, тем быстрее объект удаляется. Измеряя красное смещение, ученые доказали, что Вселенная расширяется, и научились вычислять, с какой скоростью. Благодаря очень точным подсчетам, специалисты уверенны, что, еще около 13,8 миллиардов лет назад, вселенная являлась сингулярностью. Поскольку, при расширении, большинство вещей становятся холоднее, ученые полагают, что, в начале всех начал, Вселенная была невероятно малой и очень горячей.
Другие наблюдения, которые поддерживают достоверность теории Большого взрыва, - это количество химических элементов во Вселенной. Количество очень легких элементов, таких как водород, гелий и литий, похоже, согласуется с теорией Большого Взрыва. Ученые также обнаружили фоновое космическое излучение. Это излучение - не что иное, как радиоволны, и они повсюду. Это излучение сейчас очень слабое и холодное, но давным-давно оно было весьма сильным и невообразимо горячим.
Task:
Строение галактики. Классификация галактик. Распределение галактик в пространстве.
# Астрофизика.
Decision:
Галактика – это система звёздных скоплений, планет, пыли, межзвёздных газов, тёмной материи, звёзд, связанных между собой силами гравитации. Всё в ней движется относительно общего центра масс – ядра.
Учёные до сих пор внимательно изучают строение звёздных систем. И выделяют несколько компонентов:
Ядро.Центром галактики считается ядро (сосредоточение массы). Оно является точкой гравитационного притяжения остальных её объектов. Это небольшая частичка звездообразования и звёздного скопления. Ядром может быть чёрная дыра или скопление пыли, групп звёзд, нескольких чёрных дыр или других обитателей галактического центра. Ядром Млечного Пути является массивная чёрная дыра.
Диск. Следующим компонентом является диск. Это тонкий, плоский галактический слой, где находится большинство космических объектов. Диск занимает большую часть площади галактической системы, разделяется он на звёздную и газопылевую составляющие. В этом слое расположены галактические рукава – неплотные спиральные ответвления с большим количеством новообразованных звёзд. Существуют галактические системы сразу с 2 дисками. Дополнительный элемент астрономы называют полярным кольцом. Он образуется при слиянии галактик. Замечено, что это происходит внезапно, когда просто появляется полярное кольцо. Последний механизм ещё практически не изучен.
Сфероидальный компонент. Часть газа и звёзд, находящаяся за пределами диска, образуют сфероидальный компонент. Он размещается по сфере притяжения вокруг центра. Внешний сфероидальный компонент называется гало.
Спиральный рукав. Это спиралевидное уплотнение из молодых звёзд и межзвёздных газов.
Балдж. Объёмная сферическая оболочка галактического ядра называется балдж (в переводе с английского «выпуклость»). Состоит она из звёздных скоплений, старых светил, звёздных гигантов. Балдж является самой яркой и концентрированной частью галактик. Около него располагается перемычка или бар, представляющая собой плотное образование из межзвёздного газа и звёзд прямой и вытянутой формы.
Галактика не имеет чётких границ, поэтому точно понять, где они заканчиваются, и начинается межгалактическое пространство невозможно. В самой космической системе имеются планеты, туманности, звёзды, звёздные скопления. Но они есть и вокруг систем. Учёные различают следующие формы космических систем:
Эллиптическая. Эллиптический звёздный остров относятся к первому классу. Его особенностью является отсутствие рукавов, диска, центрального ядра. По большому счёту он является балджем огромного размера, состоящим из галактической сферы неправильной (вытянутой) или идеально круглой, шарообразной формы. Звёздный состав эллиптических систем включает старых красных гигантов или красных, жёлтых карликов. Массивных, активных светил в них нет или они крайне редки. В список галактик эллипсоидной формы входит М87, расположенная на расстоянии в 53,5 млн световых лет от Земли.
Линзовидная. Является промежуточным звеном между спиральными и эллиптическими звёздными островами. У астрономов существует версия, что линзовидная галактика образовалась из спиральной, у которой слились рукава, а потенциал звездообразования закончился. У неё имеется массивное ядро, распластанные газовый и звёздный диски. Внешне напоминает двояковыпуклую линзу из-за контраста плоских дисков и объёмного, выступающего балджа. Состоит из старых звёзд, чёрных дыр, маленьких зрелых светил остатков сверхновых звёзд, галактической пыли. Одна из подобных космических систем под названием Веретено располагается от Земли на расстоянии в 45 млн световых лет.
С перемычкой. Система округлой формы, которую посередине пересекает яркая перемычка, состоящая из звёзд и межзвёздного газа. Рукава идут от краёв этой перемычки (бара). Галактика с перемычкой очень схожа со спиральной. Основное их отличие в том, что спирали начинаются от бара, а не от ядра. Примером является NGC 1300, расположенная в 60 млн световых лет от нашей планеты.
Спиральная. В классическом варианте спиральная галактика – это активно вращающийся звёздный остров в виде эллипса, в котором от балджа отходят рукава в виде закрученных спиралей. У большинства таких космических объектов есть перемычки. В рукавах активно образуются молодые звёзды из-за большого содержания там свободной видимой материи. Список галактик в виде спирали обширен. Такие системы составляют 55% от всего количества звёздных островов во Вселенной. Интересным фактом является то, что у них немного рукавов. Спираль закручивается не очень туго, звёзды свободно перемещаются из одной её части в другую. Почему рукава не закручиваются больше ещё не известно. Одной из версий является то, что спираль закручивается под влиянием волн плотности, сжимающие пылевые и газовые облака, попадающие в галактические рукава. В результате активируется образование звёзд, в основном массивных и ярких, жизненный срок которых составляет несколько миллионов лет. При этом они находятся практически всегда в фиксированном положении, что обеспечивает стабильность спиралей. Но эта гипотеза так и остаётся предположением без доказательств, потому что длительное изучение развития галактических систем невозможно из-за их сложной структуры. Самая известная галактика, относящаяся к этому типу – Млечный Путь. 
Неправильная. Очень редкая разновидность звёздных островков. Состоит из газа, пыли, звёздных скоплений, но в них отсутствуют основные структурные элементы, такие как балдж, рукава. По структуре и внешнему виду неправильная галактика похожа на рваные облака. Такой формой она часто обязана воздействию гравитационных полей. Но иногда приобретает рваный вид сама по себе. Интересными, с точки зрения, астрономии является карликовая неправильная галактика. Она наполнена газом – необходимым элементом для образования новых звёзд. В ней мало металлов и они очень компактные по размеру. Всё это в совокупности создаёт оптимальные условия для зарождения ярких, огромных звёзд, которые очень быстро гаснут. К неправильной системе относится NGC 4449, располагающаяся 12 млн световых лет от Земли.
Планета Земля входит в Млечный Путь, это спиральная галактика с перемычкой. Включает более 150 млрд звёзд, световой луч с одной стороны Млечного Пути до другого проходит за сотню тысяч лет. Солнечная система располагается на краю нашей галактики. Расстояние от Солнца до ядра Млечного Пути составляет 30 000 световых лет.
Проведя тщательное исследование галактик, Хаббл в 1934 г. предположил, что подобных объектов на всей небесной сфере насчитывается около 5 млн. Сейчас принято считать, что галактик величиной до 30m около 100 млрд.
Галактики очень редко бывают одиночными. Как правило, они расположены небольшими группами по несколько членов или входят в состав больших скоплений из сотен и тысяч галактик. Наша Галактика входит в состав так называемой Местной группы, которая содержит еще две большие спиральные галактики – Туманность Андромеды и галактику из созвездия Треугольника, а также более 20 карликовых и неправильных галактик, среди которых самые большие – Магеллановы облака.
Размеры скоплений галактик составляют несколько мегапарсек. В настоящее время известно сотни и тысячи звездных систем. Со многими скоплениями связаны мощные и протяженные источники рентгеновского излучения. Между скоплениями находится горячий газ очень малой плотности. В пространстве галактики распределены неравномерно. Области с повышенной плотностью чередуются с пустотами, в которых средняя плотность галактик значительно меньше.
В целом галактики и скопления галактик как бы располагаются на определенных поверхностях, напоминающих соты, охватывающие собой пустоты. Другими словами, распределение вещества во Вселенной имеет ячеистую структуру. А размеры пустот сравнимы с размерами сверхскоплений.
Task:
Солнечная активность. Солнечные вспышки, выбросы, выбросы корональной массы.
# Астрофизика.
Decision:
Солнце обладает сильным магнитным полем, которое со временем изменяет свою напряженность и направление. Изменения магнитного поля порождают явления, которые называются солнечной активностью: солнечные пятна, солнечные вспышки, солнечный ветер.
Солнечный ветер — поток ионизированных частиц, который распространяется на миллионы километров. За год Солнце теряет с солнечным ветром от 2*10^(-14) до 3*10^(-14) солнечных масс. За 150 млн лет оно теряет массу, равную массе Земли.
Солнечная активность воздействует на магнитное поле нашей планеты и структуру земной атмосферы, вызывая геомагнитные бури в высоких широтах. Эти бури вредят средствам связи и пагубно сказываются на самочувствии подверженных таким явлениям людей. Считается, что солнечная активность повлияла на формирование и развитие Солнечной системы.
Солнечная активность меняется периодически. Максимумы, когда на поверхности Солнца больше всего солнечных пятен, происходят примерно раз в 11 лет. Правда, за последние 300 лет этот период варьировался от 7 до 17 лет.
Самая большая группа солнечных пятен за историю наблюдений появилась в апреле 1947 г. Ее максимальная длина составляла 300 000 км, максимальная ширина — 145 000 км, а максимальная площадь была примерно в 36 раз больше площади поверхности Земли. Всего в этой группе было 172 пятна.
После появления пятна могут просуществовать от нескольких часов до нескольких месяцев. Их форма и размеры бывают различными, а температура на 1000—1500°С ниже температуры остальной поверхности нашего светила, и лишь поэтому они кажутся темными. Холодными пятна можно считать только относительно прочих участков поверхности Солнца.
Солнечная вспышка - взрывной процесс выделения энергии (кинетической, световой и тепловой) в атмосфере Солнца. Вспышки так или иначе охватывают все слои солнечной атмосферы: фотосферу, хромосферу и корону Солнца. Солнечные вспышки часто, но не всегда, сопровождаются выбросом корональной массы. Энерговыделение мощной солнечной вспышки может достигать 6×1025 джоулей, что составляет около 1⁄6 энергии, выделяемой Солнцем за секунду, или 160 млрд мегатонн в тротиловом эквиваленте, что, для сравнения, составляет приблизительный объем мирового потребления электроэнергии за 1 миллион лет.
Под действием магнитного поля происходит неожиданное сжатие солнечной плазмы, образуется плазменный жгут или лента (могут достигать в длину десятков или сотен тысяч километров), что приводит к взрыву. Солнечная плазма в этой области может нагреваться до температур порядка 10 млн К. Возрастает кинетическая энергия выбросов веществ, движущихся в короне и уходящих в межпланетное пространство со скоростями до 1000 км/с. Получают дополнительную энергию и значительно ускоряются потоки электронов, протонов и других заряженных частиц. Усиливается оптическое, рентгеновское, гамма- и радиоизлучение.
Фотоны от вспышки достигают Земли примерно за 8,5 минут после её начала; далее в течение нескольких десятков минут доходят мощные потоки заряженных частиц, а облака плазмы от солнечной вспышки достигают нашей планеты только через двое-трое суток.
Корональный выброс массы — выброс вещества из звёздной короны. Наблюдение корональных выбросов массы с поверхности Земли затруднено. По-видимому, первое наблюдение корональных выбросов в видимом диапазоне длин волн было выполнено в начале 1970-х годов с помощью коронографа, установленного на седьмой орбитальной солнечной обсерватории. Станция SMM продолжила изучение этого явления в 1980 году.
До появления данных с этих двух станций никто не осознавал, что корональные выбросы массы являются столь важными и распространёнными.
Так как затмевающий диск коронографа вырезает из поля зрения прибора яркий диск Солнца, то наблюдения источника коронального выброса на поверхности Солнца с помощью коронографа оказываются невозможным, и предположения о возможном его источнике делаются на основе наблюдений другими приборами в других диапазонах волн[2]. Эта принципиальная трудность приводит к тому, что по наблюдениям со спутника вблизи Земли в ряде случаев оказывается невозможным определить направление движения выброса: движется ли он к Земле или от Земли. Для преодоления этой трудности в настоящее время используется пара космических аппаратов проекта STEREO, которые разведены на большие углы по орбите Земли.
Во время максимумов солнечной активности частота корональных выбросов массы достигает трёх за сутки, тогда как в периоды спокойного Солнца эта частота может снижаться до одного выброса в 5 суток.
В отличие от солнечных вспышек, во время которых магнитная энергия, накопленная в активных областях на Солнце, реализуется в основном в виде электромагнитного излучения, во время корональных выбросов массы эта энергия расходуется на ускорение огромных масс вещества. Корональные выбросы массы, которые возможно наблюдать только вне солнечного диска (вне затмевающего диска коронографа), часто сопоставляют с солнечными вспышками, которые наблюдаются на солнечном диске. Так как такое сопоставление неоднозначно, то существует 2 точки зрения о связи этих явлений. Согласно более ранней точке зрения, корональные выбросы массы и солнечные вспышки являются разными проявлениями одного и того же процесса. Согласно второй точке зрения, эти явления могут иметь общий источник энергии, и если накопленной в источнике энергии достаточно на реализацию 2 явлений, они возникают в близких по времени и пространству интервалах. Однако существует ряд наблюдений, когда корональные выбросы массы регистрируются без каких-либо явлений на солнечном диске, в том числе и без солнечных вспышек.
Выброс включает в себя плазму, состоящую в основном из электронов и протонов наряду с небольшим количеством более тяжёлых элементов — гелия, кислорода, и других. Некоторые ионы часто имеют более низкие состояния ионизации (например, однократно ионизованные атомы гелия), чем окружающая спокойная плазма короны, что указывает на то, что значительная часть массы выброса может быть ускорена из областей с более низкой температурой, то есть с уровня хромосферы. Характерной особенностью выброса является то, что общая топология выброса имеет форму гигантской петли, оба или одно основание которой закреплены за солнечную атмосферу, а магнитное поле в выбросе, как правило, выше, чем в спокойном солнечном ветре, и представляет собой скрученные в жгут магнитные силовые линии. В каждом корональном выбросе массы может содержаться до 10 миллиардов тонн вещества, которое летит в космосе с средней скоростью 400 км в секунду (быстрые выбросы — до 2000 км/с). Если выброс направлен в сторону Земли, он достигает нашей планеты в течение одного-трёх дней. Быстрые корональные выбросы, проходя сквозь более медленный регулярный солнечный ветер, создают в нём мощные ударные волны.
Различают также корональный выброс в межпланетном пространстве. Одной из разновидностей такого выброса является магнитное облако. Когда выброс достигает Земли, он может оказать сильное влияние на её магнитосферу, вызывая различные явления космической погоды. Среди возможных эффектов — полярные сияния, магнитные бури, нарушения в работе электрооборудования, ухудшение условий распространения радиоволн.
Task:
Строение атмосферы Солнца; фотосфера, хромосфера, корона. Строение фотосферы; Гранулы. Солнечный ветер.
# Астрофизика.
Decision:
Все виды излучений, которые мы воспринимаем от Солнца, образуются в его самых внешних слоях, в атмосфере. Самый глубокий и плотный слой атмосферы — фотосфера — имеет толщину около 200— 300 км, плотность вещества в ней около 10-5 кг/м3, значительно меньше плотности земной атмосферы, которая у поверхности Земли равна 1 кг/м3 Несмотря на, казалось бы, малое значение толщины и плотности, фотосфера непрозрачна для всех видов излучений, образующихся в более глубоких слоях Солнца, поэтому мы не можем заглянуть в его под-фотосферные слои. Температура фотосферы растет с глубиной и в среднем составляет 6000 К. Именно эта температура принимается за температуру поверхности, а саму фотосферу принято считать поверхностью Солнца, и от нее начинаются слои атмосферы.
Слои атмосферы Солнца Атмосфера Солнца состоит из трех слоев, между которыми нет резкой границы. Самый близкий к фотосфере и самый плотный, но очень тонкий слой называется обращающим слоем. Следующий, более обширный и более разреженный слой называется хромосферой (от греческого «хромоc», что означает «цвет»). Хромосфера Солнца имеет красноватый оттенок.
Хромосфера видна во время полных солнечных затмений как клочковатое яркое кольцо вокруг чёрного диска Луны, только что затмившего Солнце. Хромосфера весьма неоднородна и состоит в основном из продолговатых вытянутых язычков (спикул), придающих ей вид горящей травы. Температура этих хромосферных струй в два-три раза выше, чем в фотосфере, а плотность в сотни тысяч раз меньше. Общая протяжённость хромосферы 10— 15 тыс. километров.
Наконец, третий, самый обширный и разреженный слой атмосферы Солнца называется солнечной короной. Он представляется нам в виде лучистого сияния с перламутровым оттенком.
Фотосфера Солнца начинается на 200—300 км глубже видимого края солнечного диска. Эти самые глубокие слои атмосферы называют фотосферой. Поскольку их толщина составляет не более одной трёхтысячной доли солнечного радиуса, фотосферу иногда условно называют поверхностью Солнца.
В фотосфере видна зернистая структура, получившая название грануляции. Характерные угловые размеры гранул, напоминающих по виду рисовые зерна, составляют 1—2′, но линейные их размеры достигают тысячи и более километров. Наблюдения показывают, что грануляция находится в непрерывном движении и изменении: одни гранулы исчезают, а взамен им тут же появляются новые. Средняя продолжительность жизни различных гранул от 5 до 10 мин. Смещение спектральных линий в спектре центральной, более яркой и горячей части гранулы указывает на подъем горячего вещества из-под фотосферы; противоположное смещение линии в спектре более темного и холодного вещества, окаймляющего гранулу, указывает на опускание вещества под фотосферу.
Скорость подъема и опускания газа в слоях солнечной атмосферы составляет около 1 км/с, а разница между температурой горячего и холодного вещества близка к 300 К. Картина грануляции во многом напоминает картину на поверхности кипящей воды — конвекцию. Горячая вода, как более легкая, поднимается снизу вверх, на поверхности она отдает свою энергию в окружающее пространство и, охладившись, опускается вниз. Специальные измерения показали, что поверхность кипящей воды разбивается на ячейки и в каждой горячее вещество поднимается, а по краям более холодное опускается. Таким образом, грануляция на Солнце указывает на то, что энергия в фотосферу поступает из более глубоких и горячих слоев Солнца путем конвекции.
На ярком фоне фотосферы наблюдаются темные пятна. Такое пятно представляет собой довольно сложное образование, состоящее из центральной темной области, называемой тенью, и окаймляющей ее более светлой области с вытянутыми вдоль радиуса пятна темными и светлыми образованиями, получившей название полутени.
Размеры солнечных пятен крайне разнообразны. В небольшие телескопы примерно с 50-кратным увеличением уже можно видеть пятна с угловым поперечником в 4—5″. Они выглядят небольшими черными точками без признаков полутени, но в действительности их линейные размеры близки к 3000—3500 км. Линейные поперечники пятен с угловыми размерами около 18″ сравнимы с диаметром нашей Земли (примерно 13 000 км). У наиболее же крупных, но редко появляющихся пятен угловые диаметры достигают 4′, т. е. 0,13 диаметра Солнца, и следовательно, их линейные размеры приближаются к 180 000 км! Такие крупные пятна хорошо видны даже невооруженным глазом (конечно, только сквозь темный светофильтр) .
На фоне ослепительно яркой фотосферы пятно нам кажется черным. Однако измерения показали, что яркость пятен в 5—10 раз меньше яркости окружающей горячей фотосферы, а их реальный цвет — красноватый. Эти измерения позволили оценить температуру Т„ вещества в тени пятен. Поскольку поверхность пятен площадью 1 м2 излучает в 5—10 раз меньше энергии, чем такой же участок фотосферы с температурой Т = 6000 К, то, используя закон Стефана — Больцмана, можно записать: - Источник: Строение атмосферы Солнца
На фотографиях солнечных пятен отчетливо заметна структура распределения темных и светлых областей в полутени пятна, похожая на распределение железных опилок в магнитном поле, причем темные области вытянуты вдоль магнитных линий. Наличие сильного магнитного поля в пятнах подтверждается и спектральными наблюдениями. В некоторых пятнах магнитная индукция достигает 0,5 Тл и выше, в то время как в среднем в фотосфере она составляет 10-4-10-3 Тл. В центре пятна вектор магнитной индукции направлен перпендикулярно к поверхности Солнца, а на краях, в полутени он идет вдоль поверхности и его значение меньше. Сильное магнитное поле пятен является причиной их низкой температуры. Это объясняется тем, что вещество фотосферы представляет собой плазму, состоящую из заряженных частиц.
Сильное магнитное поле тормозит движение плазмы, замедляет ее конвенцию и тем самым ослабляет поступление энергии из внутренних слоев Солнца. В результате температура вещества в области пятен уменьшается и пятна выглядят темными на фоне яркой фотосферы.
Обычно пятна появляются группами. В группе самое большое головное пятно расположено впереди по направлению вращения Солнца; оно имеет полярность магнитного поля, противоположную полярности следующего за ним меньшего пятна. Кроме того, головное пятно в северном полушарии Солнца имеет полярность, противоположную полярности головного пятна южного полушария.
Наряду с пятнами на фотосфере, вблизи края солнечного диска сравнительно часто видны факелы — светлые образования довольно сложной волокнистой структуры. Некоторые факелы живут неделями. Их яркость незначительно превышает яркость фотосферы, а температура всего лишь на 200— 300 К выше ее температуры.
На рисунке показана фотография Солнца, полученная во время полного солнечного затмения 31 июля 1981 г. Экспозиция подобрана таким образом, что заметен тонкий слой хромосферы и внутренняя часть внешней оболочки солнечной атмосферы — короны, имеющей вид лучистого жемчужного сияния, яркость которого в миллион раз меньше яркости фотосферы. На фотоснимках, полученных с большой экспозицией, солнечная корона прослеживается до расстояний в десять и более радиусов Солнца. На данном снимке видна самая яркая часть солнечной короны. Обращают на себя внимание несколько ярких образований, похожих на выбросы, которые получили название протуберанцев.
Температура атмосферы Солнца сначала убывает от 6000 К в фотосфере до 4800 К в нижних слоях хромосферы, а затем начинает резко возрастать в ее верхних слоях и в короне. Средняя температура вещества хромосферы около 20 000 К. Именно благодаря такой высокой температуре в хромосфере возбуждается свечение атомов гелия.
Изучение солнечной короны показало, что она состоит из сильно разреженной плазмы с температурой, близкой к двум миллионам кельвинов (2*106К). Плотность ее вещества в сотни миллиардов раз меньше плотности воздуха у поверхности Земли. В таких условиях нейтральные атомы химических элементов существовать не могут, так как их скорость настолько велика, что при взаимных столкновениях они теряют электроны и многократно ионизуются. Поэтому солнечная корона состоит в основном из протонов, ядер гелия и свободных электронов с незначительными примесями ионов других химических элементов. Этим и объясняется своеобразный спектр солнечной короны: в нем отсутствуют линии водорода, гелия, натрия (свойственные спектру хромосферы), а необычайно слабый, еле заметный непрерывный фон спектра создается электронами, рассеивающими свет фотосферы.
Корона— внешняя разреженная и горячая оболочка Солнца, распространяющаяся от него на несколько солнечных радиусов и имеющая температуру плазмы до миллиона градусов. Яркость солнечной короны в миллион раз меньше, чем фотосферы. Поэтому наблюдать солнечную корону можно во время полных солнечных затмений или с помощью специальных телескопов-коронографов. Внешние слои атмосферы Солнца тянутся вплоть до орбиты Земли.
С высокой температурой короны и разреженностью ее вещества связана разгадка наблюдаемых в ее спектре двух ярких линий — зеленой λ = 5303 Å и красной λ = 6374 Å. Сравнение положений этих линий со спектрами излучения известных химических элементов, полученных в лабораториях, не давало положительных результатов. Астрономы уже имели дело с аналогичной ситуацией, приведшей к открытию гелия. Поэтому сначала ученые предположили существование нового химического элемента, который назвали ко-ронием. Но потом возникло предположение о принадлежности этих линий известному химическому элементу, который, находясь в условиях сильно разреженной короны с высокой температурой, излучает волны, соответствующие наблюдаемым спектральным линиям.
Теоретическое исследование состоянии ионизации и возбуждения атомов химических элементов в физических условиях солнечной короны, проведенное к началу 40-х годов прошлого столетия, показало, что эти две загадочные спектральные линии соответствуют длинам волн, которые излучают атомы железа, находясь в высокой степени ионизации. Зеленая линия принадлежит атому железа, у которого оторвано 13 внешних электронов, а красная линия принадлежит атому железа, у которого оторвано 9 внешних электронов. Дальнейшие исследования показали, что большинство линий излучения короны принадлежит различным элементам, находящимся в состоянии высокой степени ионизации.
Основное число линий излучения короны находится в ультрафиолетовом и рентгеновском диапазонах спектра, а для их наблюдений используют специальные (ультрафиолетовые и рентгеновские) телескопы, установленные на космических научных станциях. Обширный материал по ультрафиолетовому излучению Солнца получен советской солнечной обсерваторией на борту космической станции «Салют».
Как всякая разреженная горячая плазма, солнечная корона интенсивно излучает дециметровые и метровые радиоволны. Радиоизлучение короны было впервые обнаружено во время второй мировой войны. Известный астрофизик Д. Г Мензел в своей книге «Наше Солнце» так описывает это открытие: «Однажды после полудня в 1942 г. все британские радиолокационные станции кругового обзора вышли из строя. Интенсивное высокочастотное радиоизлучение заглушило обычный сигнал локатора. Вначале операторы заподозрили новую контрмеру врага. Но проверка показала, что все радиолокаторы на побережье были направлены в сторону заходящего Солнца».
Детальные исследования радиоизлучения солнечной короны установили ее протяженность до расстояний в несколько десятков радиусов Солнца. Далее она постепенно рассеивается в межпланетном пространстве. Эти исследования подтвердили ничтожную плотность и высокую температуру короны. Каким же образом вещество солнечной короны нагревается до столь высокой температуры?
Оказывается, к нагреванию короны имеет непосредственное отношение конвекция, наблюдаемая в фотосфере. Здесь опять полезна аналогия конвекции на Солнце с процессами, происходящими в кипящей воде. Если прислушаться к кипящей воде, то можно услышать шум — звуковые волны, которые возбуждаются в воздухе на границе с поверхностью воды ее конвективными движениями. Такие же волны, но в еще больших масштабах возбуждаются конвекцией в фотосфере. Затем эти волны распространяются наружу в хромосферу и корону, унося с собой часть механической энергии конвективных движений. Как и любой волновой процесс, эти волны по мере распространения затухают и особенно эффективно— в короне. Энергия, которую они переносят, и нагревает солнечную корону до высокой температуры в два миллиона кельвинов.
Солнечный ветер — поток ионизированных частиц (в основном гелиево-водородной плазмы), истекающий из солнечной короны со скоростью 300—1200 км/с в окружающее космическое пространство. Является одним из основных компонентов межпланетной среды.
Множество природных явлений связано с солнечным ветром, в том числе такие явления космической погоды, как магнитные бури и полярные сияния.
В отношении других звёзд употребляется термин звёздный ветер, так что по отношению к солнечному ветру можно сказать «звёздный ветер Солнца».
Не следует путать понятия «солнечный ветер» (поток ионизированных частиц, долетающий от Солнца до Земли за 2—3 суток) и «солнечный свет» (поток фотонов, долетающий от Солнца до Земли в среднем за 8 минут 17 секунд). В частности, именно эффект давления солнечного света (а не ветра) используется в проектах так называемых солнечных парусов. Двигатель для космического аппарата, использующий в качестве источника тяги импульс ионов солнечного ветра, называется электрическим парусом.
Task:
Основные параметры Солнца (его масса, размеры, расстояние от Солнца до Земли, химический состав, температура и методы их определения). Солнечная постоянная. Источники энергии Солнца.
# Астрофизика.
Decision:
Таблица параметров Солнца:
Наименование параметра - Данные
Открытие человечеством - Неизвестно
Средний радиус - 695 508 км
Средняя окружность (длина экватора) - 4 370 005, 6 км
Объем - 1 409 272 569 059 860 000 км3
Масса - 1 989 100 000 000 000 000 000 000 000 000 кг
Плотность - 1,409 г / см3
Площадь поверхности - 6 078 747 774 547 км2
Ускорение свободного падения - 274,0 м / с2
Вторая космическая скорость- 2223720 км / ч
Период обращения вокруг своей оси - 25,38 земных суток
Наклон вращения вокруг своей оси - 7,25о по отношению к эклиптике
Температура поверхности- 5500о С
Спектральный тип - G2 V
Яркость- 3,83 х 10 33 . эрг / сек
Возраст- 4 600 000 000 лет
Состав - 92,1% водород, 7,8% Гелий
Синодический период- 27,2753 дней
Период вращения на экваторе- 26,8 дней
Период вращения на полюсах - 36 дней
Скорость относительно ближайших звезд - 19,7 км / с
Среднее расстояние от Земли- 149 600 000 (1 астрономическая единица)
Постоянная величина солнечного излучения, на среднем расстоянии до Земли - 1,365 - 1,369 кВт / м 2
Солнце является нормальной звездой G2, одной из более 100 миллиардов звезд в нашей галактике.
Солнце на сегодняшний день является крупнейшим объектом в Солнечной системе. Оно содержит более 99,8% от общей массы Солнечной системы (Юпитер содержит больше остальных планет).
Мы часто говорим, что Солнце является «обычной» звездой. Это верно в том смысле, что есть много других, подобных ему звезд. Но есть еще много меньших звезд, есть и значительно крупнее. Если все звезды расставить последовательно по массе от больших к меньшим, то Солнце войдет в первые 10% всех звезд. Средний размер звезд, по массе, в нашей галактике, вероятно, менее половины массы Солнца.
Солнце отражено во многих мифологиях: греки называли его Гелиос и римляне называли его Сол.
Солнце, в настоящее время состоит из около 70% водорода и 28% гелия по массе, все остальные элементы, в большинстве своем металлы, составляет менее 2% массы Солнца. Состав Солнца медленно изменяется с течением времени, поскольку Солнце превращает водород в гелий в своем ядре.
Внешние слои обладают дифференцированным вращением: на экваторе поверхность делает один оборот каждые 25,4 дней, вблизи полюсов, примерно за 36 дней. Это странное поведение связано с тем, что Солнце не является твердым телом, как на Земле. Аналогичные эффекты наблюдаются в газовых планетах Солнечной системы. Дифференцированное вращение распространяется и вниз в недра Солнца, но ядро Солнца вращается как твердое тело.
Ядро, это, скорее всего 25% радиуса Солнца. Температура ядра 15600000 градусов Кельвина и давление 250 000 000 000 атмосфер. В центре ядра плотность Солнца в 150 раз больше, чем воды.
Энергетическая мощность Солнца около 386 000 000 000 млрд. МВт. Каждую секунду около 700 000 000 тонн водорода превращается в 695 000 000 тонн гелия и 5000000 тонн вещества (= 3.86e33 эрг) выделяется в виде энергии гамма-лучей.
Поверхности Солнца, называется фотосферой , температура на поверхности около 5800 К. Температура на солнечных пятнах только 3800 К (они выглядят темными по сравнению с окружающими областями Солнца). Размер солнечных пятен может составлять до 50000 км в диаметре. Солнечные пятна вызваны сложным, и пока, досконально не изученным взаимодействием с магнитным полем Солнца.
Выше поверхности Солнца лежит хромосфера.
Сильно разреженная область выше хромосферы, называемая короной, она простирается на миллионы километров в пространстве, но видна только во время полного солнечного затмения. Температура короны более 1000000 К.
По совпадению Луна и Солнце имеют один угловой размер, если смотреть с Земли. Затмения Солнца происходят раз или два в год в конкретных областях Земли.
Магнитное поле Солнца очень сильное и сложное по строению, магнитосфера Солнца (также известная как гелиосфера) простирается далеко за пределы орбиты Плутона.
В дополнение к теплу и свету, Солнце испускает поток заряженных частиц (в основном протонов и электронов), известный как солнечный ветер, распространяющийся по всей Солнечной системе со скоростью в 450 км/сек.
Последние данные с космического аппарата Ulysses , показывают, что во время минимума солнечного цикла, солнечный ветер, испускаемый из полярных полюсов, движется со скоростью 750 километров в секунду, что в два раза меньше скорости солнечного ветра, испускаемого на экваторе.
В состав солнечного ветра, как представляется, также отличаются в полярных регионах. Во время солнечного максимума, однако, солнечный ветер движется с промежуточной скоростью.
Солнечный ветер оказывает большое влияние на хвосты комет и даже имеет заметное воздействие на траектории космических кораблей.
Возраст Солнца составляет около 4,5 миллиарда лет. С момента своего рождения оно уже истратило около половины водорода в своем ядре. Он будет продолжать излучать тепло еще 5 миллиардов лет. Но, в конце концов, оно исчерпает водородное топливо.
Солнечная постоянная - суммарная мощность солнечного излучения, проходящего через единичную площадку, ориентированную перпендикулярно потоку, на расстоянии одной астрономической единицы от Солнца вне земной атмосферы. По данным внеатмосферных измерений солнечная постоянная составляет (1365.4 +/-1.3 - оценка 1990г.) 1360.8 (+/-0.5) Вт/м², или 1,959 кал/см²·мин. 
Солнечная постоянная не является неизменной во времени величиной. Известно, что на её величину влияют два основных фактора: расстояние между Землей и Солнцем, изменяющееся в течение года по причине эллиптичности орбиты Земли (годичная вариация 6,9 % — от 1,412 кВт/м² в начале января до 1,321 кВт/м² в начале июля) и изменения солнечной активности. Это влияние обусловлено, в основном, изменением потока излучения при изменении числа и суммарной площади солнечных пятен, при этом поток излучения меняется сильнее всего в рентгеновском и радиодиапазоне. Поскольку период прямых измерений солнечной постоянной относительно невелик, то её изменение на протяжении 11-летнего цикла солнечной активности (цикла Швабе), по-видимому, не превышает ~10^(−3), доля изменчивости в оптическом диапазоне, обусловленная вкладом солнечных пятен, оценивается ~10^(−4). Для оценки вариаций солнечной постоянной в течение более длительных солнечных циклов (циклы Хейла, Гляйсберга и пр.) данные прямых измерений отсутствуют.
В соответствии с современными моделями развития Солнца, в долгосрочной перспективе его светимость будет возрастать примерно на 1 % за 110 миллионов лет.
Освещённость перпендикулярной потоку площадки, расположенной за пределами атмосферы на среднем расстоянии Земли от Солнца, в видимом диапазоне спектра называется световой солнечной постоянной. По оценке В. В. Шаронова середины XX века она равна 135000 люксов. В англоязычной литературе понятию «световая солнечная постоянная» соответствует термин «solar illuminance constant».
Солнечная энергия дает жизнь всему живому на Земле. Под ее воздействием испаряется вода с морей и океанов, превращаясь в водные капли, образуя туманы и облака. В результате, эта влага вновь выпадает на Землю, создавая постоянный круговорот. Поэтому, мы постоянно наблюдает снег, дождь, иней или росу. Создаваемая солнцем огромная система отопления, позволяет наиболее оптимально распределять тепло по поверхности Земли. Чтобы правильно понимать и использовать эти процессы, необходимо представлять себе источник энергии солнца и то, от чего зависит его влияние на нашу планету.
Основным видом энергии, выделяемой Солнцем, по праву считается лучистая энергия, оказывающая прямое влияние на все важнейшие процессы, происходящие на Земле. Если сравнивать с ней другие земные энергетические источники, то их запасы бесконечно малы и не позволяют решить всех проблем.
Из всех звезд, Солнце расположено к Земле ближе всего. По своей структуре оно является газовым шаром, многократно превышающим диаметр и объем нашей планеты. Поскольку размеры газового шара достаточно условны, то его границами считается видимый с Земли солнечный диск.
Все процессы, происходящие на Солнце, можно наблюдать лишь на его поверхности. Однако, основные реакции протекают в его внутренней части. По сути, это гигантская атомная станция с давлением примерно 100 млрд. атмосфер. Здесь, в условиях сложных ядерных реакций, происходит превращение водорода в гелий. Именно эти реакции образуют основной источник энергии солнца. Внутренняя температура составляет, в среднем, приблизительно 16 млн. градусов.
Газ, бушующий внутри Солнца, имеет не только сверхвысокую температуру, но и является чрезвычайно тяжелым, обладающим плотностью, многократно превышающей среднюю солнечную плотность. Одновременно, происходит возникновение рентгеновских лучей, которые, по мере приближения к Земле, увеличивают длину своих волн и уменьшают частоту колебаний. Таким образом, они постепенно становятся видимым и ультрафиолетовым светом.
При отдалении от центра, характер лучистой энергии изменяется, оказывая влияние и на температуру. Происходит ее постепенное снижение сначала до 150 тыс. градусов. С Земли хорошо видна только внешняя солнечная оболочка, так называемая фотосфера. Ее толщина составляет примерно 300 км, а температура верхнего слоя снижается до 5700 градусов.
Над фотосферой расположена солнечная атмосфера, состоящая из двух частей. Нижний слой носит название хромосферы, а верхний слой, не имеющий границ, представляет собой солнечную корону. Здесь газы разогреваются до нескольких миллионов градусов под действием ударных волн чудовищной силы.
Task:
Звезды, их основные характеристики, связь между ними.
# Астрофизика.
Decision:
Звезда — массивное самосветящееся небесное тело, состоящее из газа или плазмы, в котором происходят, происходили или будут происходить термоядерные реакции. Ближайшей к Земле звездой является Солнце, другие звёзды на ночном небе выглядят как точки различной яркости, сохраняющие своё взаимное расположение. Звёзды различаются структурой и химическим составом, а такие параметры, как радиус, масса и светимость, у разных звёзд могут отличаться на порядки.
Самая распространённая схема классификации звёзд — по спектральным классам — основывается на их температуре и светимости. Кроме того, среди звёзд выделяют переменные звёзды, которые меняют свой видимый блеск по различным причинам, с собственной системой классификации. Звёзды часто образуют гравитационно-связанные системы: двойные или кратные системы, звёздные скопления и галактики. Со временем звёзды меняют свои характеристики, так как в их недрах проходит термоядерный синтез, в результате которого меняется химический состав и масса — это явление называется эволюцией звёзд, и в зависимости от начальной массы звезды она может проходить совершенно по-разному.
Вид звёздного неба привлекал людей с древности, с видом созвездий или отдельных светил на нём были связаны мифы и легенды разных народов, до сих пор он находит отражение в культуре. Ещё со времён первых цивилизаций астрономы составляли каталоги звёздного неба, а в XXI веке существует множество современных каталогов, содержащих различную информацию для сотен миллионов звёзд.
Благодаря работе астрономов разных стран, за последние десятилетия мы много узнали о развитии звёзд и их эволюции. Все данные получены благодаря наблюдению множества звёзд, находящихся на разных этапах эволюции.
Основными свойствами звёзд являются:
светимость (полное количество энергии, излучаемое звездой в единицу времени (L),
температура поверхности,
масса,
радиус.
Между всеми этими характеристиками существует связь. Эта связь отображена на диаграмме Герцшпрунга - Рассела (Спектр – Светимость представлена на картинке)
Из этой диаграммы видно, что звёзды создают определённую последовательность. Полоса, идущая с левого верхнего угла в правый нижний, называется "главная последовательность" В верхнем правом углу находятся холодные, но в то же время огромные звёзды, называемые красными гигантами. В левом нижнем углу –"белые карлики". Очень горячие звёзды, но и очень маленькие. Солнце имеет спектральный класс G2.
Светимость звёзд (L) чаще выражается в единицах светимости Солнца (4x эрг/с). Светимость звезды вычисляют по энергии, достигающей Земли, при условии, если известно расстояние до звезды. По светимости звёзды различаются в очень широких пределах. Большинство звёзд составляют "карлики", их светимость ничтожна иногда даже по сравнению с Солнцем.
Характеристикой светимости является "абсолютная величина" звезды. Есть ещё понятие "видимая звёздная величина", которая зависит от светимости звезды, цвета и расстояния до неё. В большинстве случаев используют "абсолютную величину", чтобы реально оценить размеры звёзд, независимо как далеко они находятся. Чтобы узнать истинную величину, просто нужно звёзды отнести на какое-то условное расстояние (допустим на 10ПК). Звёзды высокой светимости имеют отрицательные значения. Например, видимая величина солнца -26,8. На расстоянии в 10ПК эта величина будет уже +5 (самые слабые звёзды, видимые невооружённым глазом, имеют величину +6).
Известные законы термодинамики позволяют нам определить температуру тела, измеряя длину волны в максимуме излучения черного цвета.
Так, если температура поверхности 3-4 тыс. К, то её цвет красноватый, 6-7 тыс. К - жёлтый, 10-12 тыс. К - белый и голубой. В таблице ниже приведены интервалы длин волн, соответствующие различным цветам, которые можно наблюдать в оптическом диапазоне.
Цвет и длина волны:
Цвет - Диапазон длин волн, А
Фиолетовый, синий3900 - 4550
Голубой4550 - 4920
Зеленый4920 - 5570
Желтый5570 - 5970
Оранжевый5970 - 6220
Красный6220 - 7700
Последовательность спектров звёзд, получающихся при непрерывном изменении их поверхностных слоёв, обозначается следующими буквами: O, B, A, F, G, K, M (от горячих к холодным). Каждый из этих классов подразделяется ещё на 10 подклассов (пример B1, B2, B3…). Четкая классификация спектрального класса звезд представлена в следующей таблице
Также звёзды разделяются по массе, но в более узких пределах в отличие от светимости (которая может различаться и в 1000 раз). Очень мало звёзд, имеющих массу в 10 раз больше или меньше Солнечной.
Ученые, изучая распределение звезд по массам и учитывая время жизни звезд различной массы, распределяют звезды по массам в момент их рождения. Ими установлено, что вероятность рождения звезды определенной массы, очень приближенно, обратно пропорциональна квадрату массы (функция Солпитера): F(M) ~ M-7/3.
Это общая закономерность. Во многих областях Вселенной наблюдается дефицит массивных звезд. В тех областях, где молодых звезд много, звезд маленькой массы меньше. Исследователи полагают, что первые звезды были яркими, массивными и короткоживущими.
Радиус звёзд может очень сильно отличаться, а также меняться… С появлением возможности проводить спектральный анализ, появились сведения о химическом составе звезды. По химическому составу звёзды представляют собой водородные и гелиевые плазмы, остальных элементов гораздо меньше. На 10тыс атомов водорода приходится 1000 атомов гелия, 5 атомов кислорода, 2 атома азота, 1 углерода и 0,5 железа. Других элементов ещё меньше….
Делались попытки построить теоретическую эволюцию звёзд вдоль главной последовательности на основе представлений о потери масс этими звёздами, но эти попытки оказались неудачными.
Время пребывания звёзд на главной последовательности зависит от их первоначальной массы. Чем больше излучение и масса звезды, тем скорее она израсходует свой водород.
Любая видимая звезда представляет собой вращающийся шар раскаленного газа. От массы газа зависит сила тяготения звезды, плотность , размеры, возможные температуры и время существования.
Образование звезд имеет следующие этапы:
На первом этапе существования газопылевое облако, в котором частички газа и пыли начинают притягиваться друг к другу.
В процессе этого притяжения облако начинает разогреваться.
При достижении температуры в ядре звезды в 10млн градусов Цельсия начинается термоядерная реакция. Водород превращается в гелий, что сопровождается излучением во всех частях спектра.
Благодаря этому излучению звезда становится звездой, т.е. видимым космическим объектом. После начала термоядерной реакции звезда проходит следующие этапы существования:
нормальные или желтые звезды. Находятся на этапе выгорания водорода. В нормальных звездах по мере выгорания водорода формируется гелиевое ядро, которое отделено от водородной оболочки зоной конвенции и излучения. Выгорание водорода также сопровождается потерей массы звезды, а следовательно, уменьшением силы гравитации, стягивающей вещество звезды к центру. Когда сила излучения превышает силу гравитации, происходит расслоение гелиевого ядра и водородной оболочки, начинающей удаляться от ядра. Звезда переходит в состояния сверхгиганта или красного гиганта;
в течение второго этапа (красный гигант) гелиевое ядро звезды сжимается, а размеры звезды значительно увеличиваются за счет того, что водородная оболочка удаляется от ядра. Масса красного гиганта начинает сокращаться не только из-за горения водорода, но из-за потерь вещества на внешней оболочке звезды. Когда внешний слой истощается, он рассеивается в космическом пространстве, и от звезды остается только горячее гелиевое ядро. Звезда переходит на этап существования в виде белого карлика;
- гравитационное сжатие ядра продолжается на этапе белого карлика. Первоначально поверхность белого карлика имеет очень большую температуру (до десятков тысяч градусов), но затем быстро остывает. Диаметр белого карлика составляет лишь 5-10тыс. км., т.е. сравним с диаметром Земли.
на четвертом этапе продолжается сжатие ядра и ускорение вращения вокруг своей оси приводит к его уплотнению и схлопыванию атомов. Электроны соединяются с протонами и образуют нейтроны. Белый карлик превращается в нейтронную звезду. Размер такой звезды составляет лишь несколько десятков километров, скорость вращения вокруг оси – несколько сотен оборотов в минуту. Колоссальная плотность нейтронной звезды приводит к такому искривлению пространства вокруг нее, что вещество звезды стремится к сжатию в точку. Нейтронная звезда превращается в черную дыру;
этап черной дыры характеризуется такой концентрацией массы в пространстве, что в одной чайной ложке оказалось бы 100 млн метрических тонн вещества. Все объекты и излучения, находящиеся в зоне гравитационного действия черной дыры, стремятся к ней. Размер черной дыры составляет 2-3 км. Конечная стадия существования черных дыр – взрыв и рассеивание вещества. На этой стадии существования звезды можно считать окончательно завершенным.
Скорость прохождения звездой перечисленных этапов существования зависит от ее размеров. Большие звезда проходят все перечисленные этапы быстрее.
В настоящее время все звезды, находящиеся на первом этапе существования (нормальные звезды), разделены на семь классов по массе, температуре и цвету.
Первый класс представляют голубые гиганты – очень большие (в 50-60 раз массивнее солнца), очень яркие и очень горячие звезды (температура поверхности около 35 тыс. градусов).
Второй класс – бело-голубые звезды с температурой поверхности около 20 тыс. градусов.
Третий класс – белые звезды с температурой около 10 тыс. градусов.
Четвертый класс – желто-белые звезды с температурой около 7500 градусов.
Пятый класс – желтые звезды (в этот класс входит солнце) с температурой около 6000 градусов.
Шестой класс составляют оранжевые звезды с температурой 4700 градусов.
Седьмой класс – красные карлики с температурой 3000 градусов.
Все перечисленные классы звезд образуют Главную последовательность, т.е. распределение звезд в порядке уменьшения их температуры и яркости.
Помимо стабильных звезд существуют звезды в нестабильном периоде развития. К ним относятся цефеиды и мириды. Яркость данного типа звезд меняется от 1 до 100 дней (цефеиды) и от нескольких месяцев до 2 лет (мириды). Колебания яркости могут быть связаны с выбросами и поглощениями газа, периодическим расширением и сжатием.
Теория эволюции звезд пробуждает интерес в связи с отсутствием в официальных изданиях причин, вызывающих те или иные процессы в ходе эволюции К таким беспричинным процессам можно отнести сжатие в звезду газопылевого облака (первоначальный коллапс), постоянное сжатие звезды во времени до состояния белого карлика и нейтронной звезды, электронизация и нейтронизация вещества, спонтанное сжатие (гравитационный коллапс) в черную дыру, судьба черной дыры. Для поиска ответа на эти вопросы надо кратко изложить действующую теорию эволюции звезд с попутным изложением возможных причин происходящих процессов.
1.Итак, образование звезд начинается: по одним источникам - с дифференциации газопылевого облака, то есть, с его расслоения и уплотнения его частей, на которые в дальнейшем происходит конденсация газа и пыли; при этом хочется думать, что дифференциация облака не может происходить самопроизвольно, для этого нужны какие-то внешние силы, ими могут быть гравитационные поля центра галактики, рукавов и в целом галактики.
По другим источникам образование звезды начинается со сжатия облака (первоначальный коллапс).однако известно, что газ и пыль имеют свойство неограниченно расширяться при условии, что масса "пылинок" не больше массы планеты Марс, не способной удержать сколь либо заметную газовую среду. Следовательно сжатие облака может произойти также под воздействием внешних сил - тех же гравитационных полей галактики. При этом теорией эволюции не приводятся расчеты параметров облака - объема, массы, плотности -способных привести к сжатию облака.
Нельзя исключить влияния на уплотнение облака и такой причины, как эффект сепарации: легкие атомы водорода в результате вращения галактики
Устремляются к ее центру, повышая плотность облака. Кроме того водород, имея температуру плавления минус 259.1 градуса Цельсия и кипения минус 252.6 градуса Цельсия может находиться в состоянии, подобном пару. Атомы, имея в этом состоянии минимальную энергию, находясь в невесомости, могут группироваться в облака подобно тому, как группируется в облака водяной пар в атмосфере Земли. Эти облака могут служить собирателями галактической пыли
2.Известно, что газовая среда сосредоточена вокруг центра галактики в главной ее плоскости. Надо полагать, что она и является материалом для строительства звезд, другого строительного материала в галактике нет. Если из нее создаются звезды, то почему они рассредоточены по всей галактике? Возникает мысль о том, что звезды отходят от центра галактики в результате описанного ранее взаимодействия гравитационных полей вращающихся систем. Но поскольку звезды отходят от ядра и при этом стареют, то на периферии галактики должны быть сосредоточены старые звезды - белые карлики, нейтронные звезды, виртуальные черные дыры, и чем дальше от центра, тем старее.
Если возраст Вселенной, а следовательно и галактик, оценивается наукой в 20 миллиардов лет, а продолжительность жизни звезд в пределах 8-12 миллиардов лет, то можно подсчитать количество в галактике молодых и старых звезд. Полагая, что звезды, образовавшиеся за первые 10 миллиардов лет после "большого взрыва" уже ушли в небытие, тогда половина из здравствующих звезд, возникших а последующие 5 миллиардов лет, будут старыми, а в самые последние 5 миллиардов лет, будут молодыми.
Получили фифти-фифти. Этот вывод не согласуется с наблюдаемыми данными о наличии в галактике всего 3-10% карликовых, то есть, старых звезд, что ставит под сомнение достоверность взрывной модели Вселенной и более согласуется с бесконечной в пространстве и во времени Вселенной.
3. До каких пор облако сжимается или конденсируется в звезду? Указанный процесс длится до состояния, при котором достигается равновесие сил гравитации и упругости, когда начинают действовать законы Гука о линейной зависимости сил упругости и деформаций и Ньютона о равенстве действия и противодействия. Звезда переходит в равновесное состояние. Наукой оно оценивается как гидродинамическое и тепловое равновесие. Звезда достигает такой плотности и температуры, при которой в ее недрах начинается водородный цикл - образование из атомов водорода ядер и атомов гелия.
Остается неясным вопрос: почему водородный цикл, представляющий собой спонтанную ядерную реакцию, длится многие миллиарды лет? Ответы напрашиваются такие.
В центре масс звезды давление и температура вопреки научным представлениям не максимальны, а минимальны, поскольку все возможные силы, действующие там на единицу массы, уравновешивают друг друга. Вокруг центра масс в плоскости экватора образуется холодная и, возможно пустая дискообразная полость, поэтому ядерные реакции протекают не по всему объему звезды, а в некоторой, удаленной от центра кольцеобразной сфере внутри звезды. Это предположение подтверждает тот факт, что измеренный испускаемый солнцем поток нейтрино почти на порядок меньше расчетного. В этой сфере происходит постоянный двунаправленный процесс синтеза ядер из протонов и их распада на протоны с выделением электронов, позитронов, фотонов, нейтрино, при этом наиболее легко соединяются протоны с электронами с образованием атомов водорода.
Звезда представляет своего рода огромный котел, порождающий и сжигающий водород, Масса звезды теряется не столько за счет горения водорода, сколько за счет электромагнитного излучения и звездного ветра, уносящего протоны, нейтроны, электроны и другие частицы.. Однако равновесие звезды сохраняется, поскольку действуют законы Гука и Ньютона. По-видимому параллельно или с какого-то этапа равновесного состояния звезды осуществляется нуклеосинтез.
4. Когда же и почему же звезда вновь начинает сжиматься? Ведь на описанном выше этапе эволюции равновесных (нормальных) звезд не может происходить какого-то заметного их сжатия, однако реальность белых карликов, нейтронных звезд убеждают в реальности процессов сжатия, причем малое количество белых карликов и нейтронных звезд наводит на мысль об их недолговечности, они как этап относительно быстрого процесса: нормальная звезда - белый карлик - нейтронная звезда - черная дыра (?)-уход в небытие. Причины происходящему процессу надо искать. В частности в физике известно и хорошо изучено такое явление, как усталость материалов - изменение механических и физических свойств вещества под длительным воздействием. Это состояние выражается в таких явлениях, как текучесть, сыпучесть, ползучесть.
Именно усталость звездного вещества может вызывать такие процессы, как нейтронизацию, появление электронного вырожденного газа, нейтронного вырожденного газа, релятивистского электронного газа и еще в большей степени - аннигиляцию вещества. Нельзя исключать того, что эти процессы и приводят к исчезновению звезды.
Надо также учитывать при этом и то обстоятельство, что если в этот период эволюции изменяются механические и физико-химические свойства вещества, то будут изменяться и все физические законы, в том числе упомянутые законы Гука и Ньютона, а также продолжительность жизни атомов и всех микрочастиц.
5.Есть ли двойные звезды? Думается, что бывают, но редко. Система из двойных звезд, как уже отмечалось ранее, возможна, если масса центральной звезды намного больше массы звезды-спутника. Редки они потому, что недолговечны, поскольку звезда-спутник всегда либо приближается к центральной звезде, либо отдаляется от нее. Если же массы обеих звезд близки, то обе они, не имея общего стабильного центра масс, разлетятся в силу своей инерции, или сольются в нежном объятии, создав красивое багряное облачко на небеси. Анализ системы Земля-Луна, единственной системы, в которой массы входящих объектов не шибко намного отличаются друг от друга, хорошо подтверждают вышесказанное.
Можно было бы рассмотреть случай двойной звезды с центральной массивной черной дырой, и карликовой звездой-спутником, тогда было бы можно обнаружить эту двойную звезду за определенное не столь продолжительное время по характеру траектории звезды-спутника. Но пока черные дыры не обнаружены, есть лишь ненадежное косвенное доказательство по обнаруженной звезде с хвостом, который якобы является следствием втягивания в себя черной дырой части звездного вещества звезды-спутника.
Простейшие рассуждения исключают такую возможность. Поле тяготения звезды, черная она или белая, зависит только от ее массы, а поскольку расстояния между звездами намного больше их размеров, в том числе первоначальных размеров черной дыры, постольку воровство массы звезды-спутника исключается, Гравитационного коллапса не может быть еще и потому, что спонтанное сжатие неизбежно приведет и к спонтанному ускорению вращения звезды, что привело бы к ее разрушению.
Мы сегодня не знаем, как ведет себя на стадии усталости звездное вещество и какие законы в этот период действуют. Ясно одно: если звезда рождается, то она и умирает, исчезая из поля наших ощущений.
Газопылевая среда в галактике не может образовываться и пополняться только из остатков взрывающихся и исчезающих звезд. Такое представление приводит к выводу о постоянной потере галактикой своей массы, а это значит, что сама галактика не находится в равновесном состоянии, а также убывает плотность Вселенной. Более вероятным является представление, что галактики и Вселенная находятся в состоянии динамического равновесия и живут по закону: "где, когда, чего и сколько убыло (прибыло), там, или в другом месте, в то же, или в другое время, столько же, того же самого или чего- либо другого, эквивалентного ему, прибыло (убыло)".Вселенная представляет собой некий насыщенный раствор, в котором идет постоянный двунаправленный процесс: часть невещественной материи выпадает в ощущаемый осадок, в основном это атомы водорода - кирпичики мироздания, часть ощущаемой материи растворяется, исчезая из сферы наших ощущений. Подобные идеи фигурируют в ученом мире, согласно которым существуют кроме ощущаемой материи такие неощущаемые ее виды, как "черная" материя, "черная" энергия.
Task:
Экзопланета, методы их поискаю
# Астрофизика.
Decision:
Экзопланета , или внесолнечная планета, — планета, находящаяся вне Солнечной системы. Долгое время задача обнаружения планет возле других звёзд оставалась неразрешённой, так как планеты чрезвычайно малы и тусклы по сравнению со звёздами, а сами звёзды находятся далеко от Солнца (ближайшая — на расстоянии 4,24 световых года). Первые экзопланеты были обнаружены в конце 1980-х годов.
Сейчас такие планеты стали открывать благодаря усовершенствованным научным методам, зачастую на пределе их возможностей. По состоянию на 7 августа 2021 года достоверно подтверждено существование 4812 экзопланет в 3558 планетных системах, из которых в 791 имеется более одной планеты. Количество надёжных кандидатов в экзопланеты значительно больше. Так, по проекту «Кеплер» на март 2021 года число кандидатов — 2366, а по проекту «TESS» на конец марта 2021 года — более 2200 кандидатов, однако для получения ими статуса подтверждённых планет требуется их повторная регистрация с помощью наземных телескопов.
Общее количество экзопланет в галактике Млечный Путь оценивается не менее чем в 100 миллиардов, из которых от 5 до 20 миллиардов, возможно, являются «землеподобными». Также, согласно текущим оценкам, около 34 % солнцеподобных звёзд имеют в обитаемой зоне планеты, сравнимые с Землёй. Общее количество планет вне Солнечной системы, напоминающих Землю и обнаруженных по состоянию на август 2016 года, составляет 216. В конце октября 2020 года ученые подсчитали общее число возможно обитаемых экзопланет в галактике Млечный путь, их число составляет около 300 миллионов.
В 2021 году была обнаружена экзопланета в галактике М51. Размер планеты примерно равен Сатурну, радиус орбиты около 2 а.е. Открытие пока не подтверждено другими исследователями. Пока это первая из почти 5000 экзопланет, найденная вне нашей галактики Млечный Путь.
Подавляющее большинство открытых экзопланет обнаружено с использованием различных непрямых методик детектирования, а не визуального наблюдения. Большинство известных экзопланет — газовые гиганты и более походят на Юпитер, чем на Землю. Это объясняется ограниченностью методов обнаружения (легче обнаружить короткопериодичные массивные планеты). Ближайшая к Земле экзопланета — Проксима Центавра b.
Метод Доплера — спектрометрическое измерение радиальной скорости звезды. Самый распространённый метод. Позволяет обнаружить планеты с массой не меньше нескольких масс Земли, расположенные в непосредственной близости от звезды, и планеты-гиганты с периодами до примерно 10 лет. Планета, обращаясь вокруг звезды, как бы раскачивает её, и мы можем наблюдать доплеровское смещение спектра звезды. Метод позволяет определить амплитуду колебаний радиальной скорости для пары «звезда — одиночная планета», массу планеты, период обращения, эксцентриситет и нижнюю границу значения массы экзопланеты Мi*sin(a). Угол a между нормалью к орбитальной плоскости планеты и направлением на Землю современные методы измерить не позволяют.
Транзитный метод — метод, основанный на наблюдении уменьшения светимости звезды при прохождении планеты на её фоне. Позволяет определить размеры планеты, а в сочетании с методом Доплера — плотность планеты. Даёт информацию о наличии атмосферы и её составе. Следует понимать, что этим методом можно обнаружить лишь те планеты, орбита которых лежит в одной плоскости с точкой наблюдения.
Метод гравитационного микролинзирования. Между наблюдаемым объектом (звездой, галактикой) и наблюдателем на Земле должна быть другая звезда, выступающая в роли линзы и фокусирующая своим гравитационным полем свет наблюдаемой звёздной системы. Если у звезды-линзы есть планеты, то появляется асимметричная кривая блеска, и, возможно, отсутствие ахроматичности. У этого метода крайне ограниченное применение. Метод чувствителен к планетам с малой массой, вплоть до земной.
Астрометрический метод — метод, основанный на изменении собственного движения звезды под гравитационным воздействием планеты. С помощью астрометрии были уточнены массы некоторых экзопланет, в частности, Эпсилона Эридана b. Будущее этого метода связано с орбитальными миссиями, такими, как SIM.
Радионаблюдение пульсаров. Если вокруг пульсара вращаются планеты, то излучаемый пульсаром сигнал имеет осциллирующий характер. Мощные направленные пучки излучения пульсара образуют в пространстве конические поверхности. Если на такой поверхности окажется Земля, тогда возможно зарегистрировать данное излучение. На март 2010 года у двух пульсаров найдено пять планет (3+2).
Метод прямого наблюдения — метод получения прямых изображений экзопланет посредством изолирования экзопланет от света их звезды. С помощью метода получено изображение четырёх планет системы HR 8799. Так как метод даёт наилучшие результаты для планет, удалённых от своей звезды на ~10—100 а.е. и горячих из-за тепла, оставшегося после их образования, метод применяется для поиска планет около молодых звёзд. Предполагается, что космический телескоп имени Джеймса Уэбба, благодаря огромному зеркалу (диаметром 6,5 м) и высокой разрешающей способности, будет способен напрямую обнаруживать экзопланеты, а также подробно изучать состав их атмосфер
Task:
Земля как планета Солнечной системы. Строение Земли. Нейтральная атмосфера, ионосфера, магнитосфера.
Decision:
Земля это планета Солнечной системы, которая является частью Вселенной, состоящей из огромного количества галактик. Галактика, к которой относится наша планета называется Млечный путь. Если посмотреть на ночное небо, то на нём можно увидеть белую полоску, которая внешне напоминает дорогу из разлитого молока. Это и есть Млечный путь.
Земля имеет в первом приближении форму шара (экваториальный диаметр — 12 754 км, а полярный — около 12 711 км[1]) и состоит из нескольких оболочек, выделенных по химическим или реологическим свойствам. В центре расположено внутреннее ядро с радиусом около 1250 км, которое в основном состоит из железа и никеля. Далее идёт внешнее ядро (состоящее в основном из железа) с толщиной около 2200 км. Над ним лежат 2900 км вязкой мантии, состоящей из силикатов и оксидов, а ещё выше — довольно тонкая твёрдая кора. Она тоже состоит из силикатов и оксидов, но обогащена элементами, которые не встречаются в мантийных породах. Представления о внутреннем строении Земли основываются на топографических, батиметрических и гравиметрических данных, наблюдениях горных пород в обнажениях, образцах, поднятых на поверхность с больших глубин в результате вулканической активности, анализе сейсмических волн, которые проходят сквозь Землю, и экспериментах с кристаллическими твёрдыми телами при давлениях и температурах, характерных для глубоких недр Земли.
Недра Земли можно делить на слои по их механическим (в частности реологическим) или химическим свойствам. По механическим свойствам выделяют литосферу, астеносферу, мезосферу, внешнее ядро и внутреннее ядро. По химическим свойствам Землю можно разделить на земную кору, верхнюю мантию, нижнюю мантию, внешнее ядро и внутреннее ядро.
Геологические слои Земли находятся на следующих глубинах под поверхностью
Слои Земли были определены косвенно с помощью измерения времени распространения преломлённых и отражённых сейсмических волн, созданных землетрясениями. Ядро не пропускает поперечные волны, а скорость распространения волн отличается в разных слоях. Изменения в скорости сейсмических волн между различными слоями вызывает их преломление благодаря закону Снелла.
Средняя плотность Земли 5515 кг/м^3. Поскольку средняя плотность вещества поверхности составляет всего лишь около 3000 кг/м^3, мы должны заключить, что плотные вещества существуют в ядре Земли. Ещё одно доказательство высокой плотности ядра основано на сейсмологических данных. Следует учитывать и уплотнение вещества давлением. Имеются данные лабораторных исследований с выводом об изменениях плотности веществ более плотной упаковкой атомов, например, железо уже при 1 млн атмосфер уплотняется примерно на 30%. "...Плотность верхней мантии начиная от значения 3,2 г/см^3 на поверхности постепенно возрастает с глубиной вследствие сжатия её вещества... ...В нижней мантии существенных перестроек в кристаллическом строении вещества больше не происходит, поскольку все окислы в этой геосфере уже находятся в состоянии предельно плотной упаковки атомов и сжатие мантийного вещества происходит только благодаря сжатию самих атомов."
Сейсмические измерения показывают, что ядро делится на две части — твёрдое внутреннее ядро радиусом ~1220 км и жидкое внешнее ядро радиусом ~3400 км
Мантия Земли простирается до глубины 2890 км, что делает её самым толстым слоем Земли. Давление в нижней мантии составляет около 140 ГПа (1,4·10^6 атм). Мантия состоит из силикатных пород, богатых железом и магнием по отношению к вышележащей коре. Высокие температуры в мантии делают силикатный материал достаточно пластичным, чтобы могла существовать конвекция вещества в мантии, выходящего на поверхность через разломы в тектонических плитах. Плавление и вязкость вещества зависят от давления и химических изменений в мантии. Вязкость мантии разнится от 10^21 до 10^24 Па·с в зависимости от глубины. Для сравнения, вязкость воды составляет около 10^(−3) Па·с, а песка — 10^7 Па·с.
Толщина земной коры разнится от 5 до 70 км в глубину от поверхности. Самые тонкие части океанической коры, которые лежат в основе океанических бассейнов (5—10 км), состоят из плотной железо-магниевой силикатной породы, такой как базальт.
Ниже коры находится мантия, которая отличается составом и физическими свойствами — она более плотная, содержит в основном тугоплавкие элементы.
Нейтросфера, или нейтральная атмосфера, — нижняя часть атмосферы Земли, в которой незаряженные (электрически нейтральные) частицы воздуха преобладают над ионами (электрически заряженными частицами).
Нейтросфера занимает наиболее плотный слой атмосферы Земли и переходит в ионосферу, по разным оценкам, на высоте около 50 км, 70-90 км и до 100 км, при этом граница зависит от места.
Нейтросфера состоит из тропосферы, стратосферы и частично мезосферы. Нейтральные молекулы атмосферных газов в ней практически не рассеивают излучение частотой до 15 ГГц.
Ионосфера, в общем значении — слой атмосферы планеты, сильно ионизированный вследствие облучения космическими лучами. У планеты Земля это верхняя часть атмосферы, состоящая из мезосферы, мезопаузы и термосферы, ионизированная главным образом облучением Солнца.
Ионосфера Земли (здесь и далее речь будет идти об Ионосфере нашей планеты) состоит из смеси газа нейтральных атомов и молекул (в основном азота N2 и кислорода О2) и квазинейтральной плазмы (число отрицательно заряженных частиц лишь примерно равно числу положительно заряженных). Степень ионизации становится существенной уже на высоте 60 километров.
Магнитосфера (от «магнитная сфера») — область пространства вокруг небесного тела, в которой поведение окружающей тело плазмы определяется магнитным полем этого тела.
Иное определение: магнитосфе́ра — область пространства вокруг планеты или другого намагниченного небесного тела, которая образуется, когда поток заряженных частиц, например, солнечного ветра, отклоняется от своей первоначальной траектории под воздействием внутреннего магнитного поля этого тела.
Форма и размеры магнитосферы определяются силой внутреннего магнитного поля этого небесного тела и давлением окружающей плазмы (солнечного ветра). Все планеты, имеющие собственное магнитное поле, обладают магнитосферой: Земля, Юпитер, Сатурн, Уран и Нептун. Меркурий и Марс обладают очень слабыми магнитосферами, а также Ганимед, один из спутников Юпитера (но его магнитосфера целиком находится в пределах магнитосферы Юпитера, что приводит к их сложным внутренним взаимодействиям). Ионосферы слабо намагниченных планет, как например Венера, частично отклоняют поток солнечного ветра, но они не имеют магнитосферы как таковой.
Термин магнитосфера также используется для описания регионов, где доминирует магнитное поле других небесных тел, например звёзд, пульсаров и пр. 
Task:
Строение солнечной системы. Виды объектов, составляющих солнечную систему. Происхождение солнечной системы.
# Астрофизика.
Decision:
Солнечная система — планетная система, включает в себя центральную звезду — Солнце — и все естественные космические объекты, вращающиеся вокруг Солнца. Она сформировалась путём гравитационного сжатия газопылевого облака примерно 4,57 млрд лет назад
Центральным объектом Солнечной системы является Солнце — звезда главной последовательности спектрального класса G2V, жёлтый карлик. В Солнце сосредоточена подавляющая часть всей массы системы (около 99,866 %), оно удерживает своим тяготением планеты и прочие тела, принадлежащие к Солнечной системе[22]. Четыре крупнейших объекта — газовые гиганты — составляют 99 % оставшейся массы (при этом большая часть приходится на Юпитер и Сатурн — около 90 %).
Большинство крупных объектов, обращающихся вокруг Солнца, движутся практически в одной плоскости, называемой плоскостью эклиптики. В то же время кометы и объекты пояса Койпера часто обладают большими углами наклона к этой плоскости.
Все планеты и большинство других объектов обращаются вокруг Солнца в одном направлении с вращением Солнца (против часовой стрелки, если смотреть со стороны северного полюса Солнца). Есть исключения, такие как комета Галлея. Самой большой угловой скоростью обладает Меркурий — он успевает совершить полный оборот вокруг Солнца всего за 88 земных суток. А для самой удалённой планеты — Нептуна — период обращения составляет 165 земных лет.
Бо́льшая часть планет вращается вокруг своей оси в ту же сторону, что и обращается вокруг Солнца. Исключения составляют Венера и Уран, причём Уран вращается практически «лёжа на боку» (наклон оси около 90°). Для наглядной демонстрации вращения используется специальный прибор — теллурий.
Многие модели Солнечной системы условно показывают орбиты планет через равные промежутки, однако в действительности, за малым исключением, чем дальше планета или пояс от Солнца, тем больше расстояние между её орбитой и орбитой предыдущего объекта. Например, Венера приблизительно на 0,33 а.е. дальше от Солнца, чем Меркурий, в то время как Сатурн на 4,3 а.е. дальше Юпитера, а Нептун на 10,5 а.е. дальше Урана. Были попытки вывести корреляции между орбитальными расстояниями (например, правило Тициуса — Боде), но ни одна из теорий не стала общепринятой.
Орбиты объектов вокруг Солнца описываются законами Кеплера. Согласно им, каждый объект обращается по эллипсу, в одном из фокусов которого находится Солнце. У более близких к Солнцу объектов (с меньшей большой полуосью) больше угловая скорость вращения, поэтому короче период обращения (год). На эллиптической орбите расстояние объекта от Солнца изменяется в течение его года. Ближайшая к Солнцу точка орбиты объекта называется перигелий, наиболее удалённая — афелий. Каждый объект движется быстрее всего в своём перигелии и медленнее всего в афелии. Орбиты планет близки к кругу, но многие кометы, астероиды и объекты пояса Койпера имеют сильно вытянутые эллиптические орбиты.
Большинство планет Солнечной системы обладают собственными подчинёнными системами. Многие окружены спутниками, некоторые из спутников по размеру превосходят Меркурий. Большинство крупных спутников находятся в синхронном вращении, одна их сторона постоянно обращена к планете. Четыре крупнейшие планеты — газовые гиганты — обладают также кольцами, тонкими полосами крошечных частиц, обращающимися по очень близким орбитам практически в унисон.
Солнце - звезда Солнечной системы и её главный компонент. Его масса (332 900 масс Земли) достаточно велика для поддержания термоядерной реакции в его недрах, при которой высвобождается большое количество энергии, излучаемой в пространство в основном в виде электромагнитного излучения, максимум которого приходится на диапазон длин волн 400—700 нм, соответствующий видимому свету.
Межпланетная среда - Наряду со светом, Солнце излучает непрерывный поток заряженных частиц (плазмы), известный как солнечный ветер. Этот поток частиц распространяется со скоростью примерно 1,5 млн км в час, наполняя околосолнечную область и создавая у Солнца некий аналог планетарной атмосферы (гелиосферу), которая имеется на расстоянии по крайней мере 100 а.е. от Солнца. Она известна как межпланетная среда. Проявления активности на поверхности Солнца, такие как солнечные вспышки и корональные выбросы массы, возмущают гелиосферу, порождая космическую погоду. Крупнейшая структура в пределах гелиосферы — гелиосферный токовый слой; спиральная поверхность, созданная воздействием вращающегося магнитного поля Солнца на межпланетную среду.
Внутренняя область Солнечной системы - Внутренняя часть включает планеты земной группы и астероиды. Состоящие главным образом из силикатов и металлов, объекты внутренней области относительно близки к Солнцу, это самая малая часть системы — её радиус меньше, чем расстояние между орбитами Юпитера и Сатурна
Планеты земной группы - Меркурий, Венера, Земля (Луна), Марс (Фобос и Деймос) Четыре ближайшие к Солнцу планеты, называемые планетами земной группы, состоят преимущественно из тяжёлых элементов, имеют малое количество (0—2) спутников, у них отсутствуют кольца. В значительной степени они состоят из тугоплавких минералов, таких как силикаты, которые формируют их мантию и кору, и металлов, таких как железо и никель, которые формируют их ядро. У трёх из этих планет — Венеры, Земли и Марса — имеется атмосфера; у всех есть ударные кратеры и тектонические детали рельефа, такие как рифтовые впадины и вулканы.
Пояс астероидов - занимает орбиту между Марсом и Юпитером, между 2,3 и 3,3 а.е. от Солнца. Выдвигались, но в итоге не были подтверждены гипотезы о существовании планеты между Марсом и Юпитером (например, гипотетической планеты Фаэтон), которая на ранних этапах формирования Солнечной системы разрушилась так, что её осколки стали астероидами, сформировавшими пояс астероидов. Согласно современным воззрениям, астероиды — это остатки формирования Солнечной системы (планетозималей), которые были не в состоянии объединиться в крупное тело из-за гравитационных возмущений Юпитера.
Церера (2,77 а.е.) — карликовая планета и крупнейшее тело пояса астероидов. Церера имеет диаметр немногим менее 1000 км и достаточную массу, чтобы под действием собственной гравитации поддерживать сферическую форму. После открытия Цереру классифицировали как планету, однако поскольку дальнейшие наблюдения привели к обнаружению поблизости от Цереры ряда астероидов, в 1850-х её отнесли к астероидам. Повторно она была классифицирована как карликовая планета в 2006 году.
Внешняя область Солнечной системы - является местом нахождения газовых гигантов и их спутников, а также транснептуновых объектов, астероидно-кометно-газовых пояса Койпера, Рассеянного диска и облака Оорта. Орбиты многих короткопериодических комет, а также астероидов-кентавров, также проходят в этой области. Твёрдые объекты этой области из-за их большего расстояния от Солнца, а значит, гораздо более низкой температуры, содержат льды воды, аммиака и метана. Есть гипотезы о существовании во внешней области планеты Тюхе и, возможно, каких-либо других «Планет X», а также звезды-спутника Солнца Немезиды.
Планеты-гиганты - Юпитер (спутники, кольца), Сатурн (спутники, кольца), Уран (спутники, кольца), Нептун (спутники, кольца) - Четыре планеты-гиганта, также называемые газовыми гигантами, все вместе содержат 99 % массы вещества, обращающегося на орбитах вокруг Солнца. Юпитер и Сатурн преимущественно состоят из водорода и гелия; Уран и Нептун обладают бо́льшим содержанием льда в их составе. Некоторые астрономы из-за этого классифицируют их в собственной категории — «ледяные гиганты». У всех четырёх планет-гигантов имеются кольца, хотя только кольцевая система Сатурна легко наблюдается с Земли.
Кометы - малые тела Солнечной системы, обычно размером всего в несколько километров, состоящие главным образом из летучих веществ (льдов). Их орбиты имеют большой эксцентриситет, как правило, с перигелием в пределах орбит внутренних планет и афелием далеко за Плутоном. Когда комета входит во внутреннюю область Солнечной системы и приближается к Солнцу, её ледяная поверхность начинает испаряться и ионизироваться, создавая кому — длинное облако из газа и пыли, часто видимое с Земли невооружённым глазом.
Кентавры - ледяные кометоподобные объекты с большой полуосью орбиты, большей, чем у Юпитера (5,5 а.е.), и меньшей, чем у Нептуна (30 а.е.). У крупнейшего из известных кентавров, Харикло, диаметр приблизительно равен 250 км. Первый обнаруженный кентавр, Хирон, также классифицирован как комета (95P), из-за того что по мере приближения к Солнцу у него возникает кома, как и у комет.
Транснептуновые объекты - Пространство за Нептуном, или «регион транснептуновых объектов», всё ещё в значительной степени не исследовано. Предположительно, оно содержит только малые тела, состоящие главным образом из камней и льда. Этот регион иногда также включают во «внешнюю Солнечную систему», хотя чаще этот термин используют, чтобы обозначать пространство за поясом астероидов и до орбиты Нептуна.
Пояс Койпера - область реликтов времён образования Солнечной системы, является большим поясом осколков, подобным поясу астероидов, но состоит в основном изо льда. Простирается между 30 и 55 а.е. от Солнца. Составлен главным образом малыми телами Солнечной системы, но многие из крупнейших объектов пояса Койпера, такие как Квавар, Варуна и Орк, могут быть переклассифицированы в карликовые планеты после уточнения их параметров. По оценкам, более 100 000 объектов пояса Койпера имеют диаметр больше 50 км, но полная масса пояса равна только одной десятой или даже одной сотой массы Земли. Многие объекты пояса обладают множественными спутниками, и у большинства объектов орбиты располагаются вне плоскости эклиптики.
Плутон - карликовая планета, крупнейший известный объект пояса Койпера. После обнаружения в 1930 году считался девятой планетой; положение изменилось в 2006 году с принятием формального определения планеты. У Плутона умеренный эксцентриситет орбиты с наклонением в 17 градусов к плоскости эклиптики, и он то приближается к Солнцу на расстояние 29,6 а.е., оказываясь к нему ближе Нептуна, то удаляется на 49,3 а.е.
Хаумеа - карликовая планета. Имеет сильно вытянутую форму и период вращения вокруг своей оси около 4 часов. Два спутника и ещё по крайней мере восемь транснептуновых объектов являются частью семейства Хаумеа, которое сформировалась миллиарды лет назад из ледяных осколков, после того как большое столкновение разрушило ледяную мантию Хаумеа. Орбита карликовой планеты обладает большим наклонением - 28°.
Макемаке - первоначально обозначался как 2005 FY9, в 2008 году получил имя и был объявлен карликовой планетой. В настоящее время является вторым по видимой яркости в поясе Койпера после Плутона. Крупнейший из известных классических объектов пояса Койпера (не находящихся в подтверждённом резонансе с Нептуном). Имеет диаметр от 50 до 75 % диаметра Плутона, орбита наклонена на 29°, эксцентриситет около 0,16. У Макемаке открыт один спутник: S/2015 (136472) 1.
Рассеянный диск - частично перекрывается с поясом Койпера, но простирается намного далее за его пределы и, как предполагают, является источником короткопериодических комет. Предполагают, что объекты рассеянного диска были выброшены на беспорядочные орбиты гравитационным влиянием Нептуна в период его миграции на ранней стадии формирования Солнечной системы: одна из концепций базируется на предположении о том, что Нептун и Уран сформировались ближе к Солнцу, чем они есть сейчас, а затем переместились на свои современные орбиты. Многие объекты рассеянного диска (SDO) имеют перигелий в пределах пояса Койпера, но их афелий может простираться до 150 а.е. от Солнца. Орбиты объектов также весьма наклонены к плоскости эклиптики и часто почти перпендикулярны ей. Некоторые астрономы полагают, что рассеянный диск — это область пояса Койпера, и описывают объекты рассеянного диска как «рассеянные объекты пояса Койпера». Некоторые же астрономы также классифицируют кентавры как рассеянные внутрь объекты пояса Койпера, наряду с рассеянными наружу объектами рассеянного диска.
Эрида (68 а.е. в среднем) — крупнейший известный объект рассеянного диска. Так как её диаметр первоначально был оценён в 2400 км, то есть по крайней мере на 5 % больше, чем у Плутона, то её открытие породило споры о том, что именно следует называть планетой. Она является одной из крупнейших известных карликовых планет. У Эриды имеется один спутник — Дисномия. Как и у Плутона, её орбита является чрезвычайно вытянутой, с перигелием 38,2 а.е. (примерное расстояние Плутона от Солнца) и афелием 97,6 а.е.; и орбита сильно (44,177°) наклонена к плоскости эклиптики.
Согласно общепринятой в настоящее время гипотезе, формирование Солнечной системы началось около 4,6 млрд лет назад с гравитационного сжатия небольшой части гигантского межзвёздного газопылевого облака. Это начальное облако было, вероятно, размером в несколько световых лет и являлось прародителем для нескольких звёзд.
В процессе сжатия размеры газопылевого облака уменьшались и, в силу закона сохранения углового момента, росла скорость вращения облака. Центр, где собралась большая часть массы, становился всё более и более горячим, чем окружающий диск. Из-за вращения скорости сжатия облака параллельно и перпендикулярно оси вращения различались, что привело к уплощению облака и формированию характерного протопланетного диска диаметром примерно 200 а.е. и горячей, плотной протозвездой в центре. Полагается, что на этой стадии эволюции Солнце было звездой типа T Тельца. Изучение звёзд типа T Тельца показывают, что они часто окружены протопланетными дисками с массами 0,001—0,1 солнечной массы, с подавляющим процентом массы туманности, сосредоточенным непосредственно в звезде. Планеты сформировались путём аккреции из этого диска.
В течение 50 млн лет давление и плотность водорода в центре протозвезды стали достаточно высокими для начала термоядерной реакции. Температура, скорость реакции, давление и плотность увеличивались, пока не было достигнуто гидростатическое равновесие с тепловой энергией, противостоящей силе гравитационного сжатия. На этом этапе Солнце стало полноценной звездой главной последовательности.
Солнечная система, насколько известно сегодня, просуществует, пока Солнце не начнёт развиваться вне главной последовательности диаграммы Герцшпрунга — Рассела. Поскольку Солнце сжигает запасы водородного топлива, выделяющаяся энергия, поддерживающая ядро, имеет тенденцию к исчерпанию, заставляя Солнце сжиматься. Это увеличивает давление в его недрах и нагревает ядро, таким образом ускоряя сжигание топлива. В результате Солнце становится ярче примерно на десять процентов каждые 1,1 млрд лет, и станет ещё на 40 % ярче в течение следующих 3,5 млрд лет.
Приблизительно через 7 млрд лет с настоящего времени водород в солнечном ядре будет полностью преобразован в гелий, что завершит фазу главной последовательности; Солнце станет субгигантом. Ещё через 600 млн лет внешние слои Солнца расширятся примерно в 260 раз по сравнению с нынешними размерами — Солнце перейдёт на стадию красного гиганта. Из-за чрезвычайно увеличившейся площади поверхности она будет гораздо более прохладной, чем при нахождении на главной последовательности (2600 К). Резко увеличившись, Солнце, как ожидается, поглотит ближайшие планеты Меркурий и Венеру. Земля, возможно, избежит поглощения внешними солнечными оболочками, но станет совершенно безжизненной, поскольку обитаемая зона сместится к внешним краям Солнечной системы.
В конечном итоге, в результате развития термических неустойчивостей, внешние слои Солнца будут выброшены в окружающее пространство, образовав планетарную туманность, в центре которой останется лишь небольшое звёздное ядро — белый карлик, необычно плотный объект в половину первоначальной массы Солнца, но размером только с Землю. Эта туманность возвратит часть материала, который сформировал Солнце, в межзвёздную среду.
Task:
Методы измерения расстояний до небесных объектов. Суточный и годичный параллаксы.
Task:
Фазы Луны. Солнечные и лунные затмения.
# Астрофизика.
Decision:
Фазы Луны - периодическое изменение вида освещённой Солнцем части Луны на земном небе. Фазы Луны постепенно и циклически меняются в течение периода синодического месяца (около 29,5306 средних солнечных суток), как и орбитальное положение Луны при движении вокруг Земли и движении Земли вокруг Солнца.
Вращение Луны захвачено приливными силами Земли, поэтому бо́льшая часть одной и той же стороны Луны всегда обращена к Земле. Эта видимая сторона освещается Солнцем по-разному, в зависимости от положения Луны на орбите. Таким образом, освещённость этой лицевой стороны может варьироваться от 0 % (при новолунии) до 100 % (при полнолунии). Лунный терминатор — граница между освещённым и затенённым полушариями.
Каждая из четырёх «промежуточных» фаз Луны насчитывает около 7,4 дня, но их продолжительность слегка меняется из-за эллиптической формы орбиты Луны. Кроме некоторых кратеров у лунных полюсов, наподобие Шумейкера, все части Луны получают около 14,77 земных суток дневного света, а затем 14,77 суток «ночи». Обратную от Земли сторону Луны иногда называют «тёмной стороной Луны», пусть это и неверное название, но означает оно скорее неизведанная, невидимая, а не неосвещённая.
В западной культуре четырьмя основными фазами Луны являются новолуние, первая четверть, полнолуние и третья четверть (также называемая последней). В данных фазах долготы эклиптик Луны и Солнца отличаются на 0°, 90°, 180° и 270° соответственно Каждая из этих фаз происходит в несколько разное время при наблюдении из разных точек Земли. Во время промежутков между основными фазами освещённая часть Луны — либо в форме «серпа», либо «горба». Эти формы и периоды называются промежуточными фазами и длятся четверть синодического месяца, или, в среднем, 7,38 земных суток. Впрочем, их длительность несколько меняется, так как орбита Луны довольно эллиптична, почему орбитальная скорость спутника не постоянна. Описательное растущая используется для промежуточной фазы, во время которой видимая форма Луны увеличивается от новолуния до полнолуния, а убывающая— наоборот, когда её форма истончается.
В незападных культурах может использоваться другое количество лунных фаз; например, в традиционной гавайской культуре насчитывается в общей сложности тридцать фаз (по одной на день).
Когда Солнце и Луна располагаются на одной и той же стороне Земли, Луна находится в фазе новолуния, а её обращённая к Земле сторона не освещена Солнцем. По мере того, как Луна «растёт» (доля освещённой поверхности, видимой с Земли, увеличивается), она проходит через фазы новолуния, молодой луны, первой четверти, прибывающей луны и полнолуния. Затем, когда Луна «убывает», она проходит через фазы убывающей луны, последней четверти, старой луны и возвращается к фазе новолуния. Понятия «старая луна» и «новолуние» не взаимозаменяемы. «Старая луна» — это убывающий полумесяц (в конечном итоге становящийся не видным невооружённым глазом) до времени, когда Луна выравнивается с Солнцем и начинает расти, и тогда же снова становится новой. Термин «полулуние» изредка используется для обозначения первой и последней четвертей, тогда как «четверть» относится к степени круговорота Луны вокруг Земли, а не к её форме.
Если освещённое полушарие наблюдать под определённым углом, видимая часть освещённой области будет иметь двумерную форму как определённое пересечение эллипса и круга (где большая полуось эллипса совпадает с диаметром окружности). Если полуэллипс выгнут относительно полукруга, месяц будет иметь форму горба, тогда как если полуэллипс будет вогнут относительно полукруг, то месяц будет в форме серпа. Когда возникает полумесяц, феномен пепельного света может быть очевиден, когда ночная сторона Луны смутно отражает отражённый от Земли косвенный солнечный свет.
В русской фольклорной традиции сохранились архаичные названия отдельных временных промежутков между фазами (связанные с качеством самого месяца): «нов»/«млад»/«молод» — для молодого «серпа» (обстоятельство времени «на нове/молоде месяце» обозначает первые несколько дней после новолуния); «ветх» — для старого «серпа» (обстоятельство времени «на ветхе месяце»/«на ветху месяцу» обозначает несколько дней перед новолунием); «перекрой» и «перекройные дни» — для «горба» в первые несколько дней после полнолуния (обстоятельство времени «на перекрое»). В то же время встречается использование понятия «перекрой» в расширенном смысле — как всякое изменение фазы луны. Временной промежуток около самого полнолуния описывается архаичным обстоятельством времени «в месяце полне».
Фазы (Новолуние, Первая четверть, Полнолуние, Последняя четверть) Пепельный свет, Солнечное затмение, Лунное затмение, Солнечное затмение на Луне, Прилив и отлив
Солнечное затмение - астрономическое явление, которое заключается в том, что Луна закрывает (затмевает) полностью или частично Солнце от наблюдателя на Земле. Солнечное затмение возможно только в новолуние, когда сторона Луны, обращённая к Земле, не освещена, и сама Луна не видна. Затмения возможны, только если новолуние происходит вблизи одного из двух лунных узлов (точки пересечения видимых орбит Луны и Солнца), не далее, чем примерно в 12 градусах от одного из них.
Ширина тени Луны на земной поверхности не превышает 270 км, поэтому солнечное затмение наблюдается только в узкой полосе на пути тени. Поскольку Луна обращается по эллиптической орбите, расстояние между Землёй и Луной в момент затмения может быть различным, соответственно, диаметр пятна лунной тени на поверхности Земли может варьироваться в широких пределах от максимального до нуля (когда вершина конуса лунной тени не достигает поверхности Земли). Если наблюдатель находится в полосе тени, он видит полное солнечное затмение, при котором Луна полностью скрывает Солнце, небо темнеет, и на нём могут появиться планеты и яркие звёзды. Вокруг скрытого Луной солнечного диска можно наблюдать солнечную корону, которая при обычном ярком свете Солнца не видна. Поскольку температура короны гораздо выше чем у фотосферы, она имеет блёкло-голубоватый цвет, неожиданный для тех, кто видит её первый раз, и сильно отличается от ожидаемого цвета Солнца. При наблюдении затмения неподвижным наземным наблюдателем полная фаза длится не более нескольких минут. Минимальная скорость движения лунной тени по земной поверхности составляет чуть более 1 км/с. Во время полного солнечного затмения космонавты, находящиеся на орбите, могут наблюдать на поверхности Земли бегущую тень от Луны.
Наблюдатели, находящиеся вблизи полосы полного затмения, могут видеть его как частное солнечное затмение. При частном затмении Луна проходит по диску Солнца не точно по центру, скрывая только его часть. При этом небо темнеет гораздо слабее, чем при полном затмении, звёзды не появляются. Частное затмение может наблюдаться на расстоянии порядка двух тысяч километров от зоны полного затмения.
Полнота солнечного затмения также выражается фазой Ф. Максимальная фаза частного затмения обычно выражается в сотых долях от единицы, где 1 — полная фаза затмения. Полная фаза может быть и больше единицы, например 1,01, если диаметр видимого лунного диска больше диаметра видимого солнечного диска. Частные фазы имеют значение меньше 1. На краю лунной полутени фаза равна 0.
Момент, когда передний/задний край диска Луны касается края Солнца, называется касанием. Первое касание — момент, когда Луна вступает на диск Солнца (начало затмения, его частной фазы). Последнее касание (четвёртое в случае полного затмения) — это последний момент затмения, когда Луна сходит с диска Солнца. В случае полного затмения, второе касание — момент, когда передняя часть Луны, пройдя по всему Солнцу, начинает выходить с диска. Полное солнечное затмение происходит между вторым и третьим касаниями. Через 600 миллионов лет приливное ускорение отдалит Луну от Земли настолько, что полное солнечное затмение станет невозможно.
Лунное затмение - затмение, которое наступает, когда Луна входит в конус тени от Земли. Диаметр пятна тени Земли на расстоянии 363 000 км (минимальное расстояние Луны от Земли) составляет около 2,6 диаметра Луны, поэтому Луна может быть затенена целиком. В каждый момент затмения степень покрытия диска Луны земной тенью выражается фазой затмения. Величина фазы Φ определяется расстоянием θ от центра Луны до центра тени. В астрономических календарях приводятся величины Φ и θ для разных моментов затмения.
Когда Луна во время затмения полностью входит в тень Земли, говорят о полном лунном затмении, когда частично — о частном затмении. Когда Луна входит только в полутень Земли, говорят о частном полутеневом затмении. Необходимыми условиями наступления лунного затмения являются полнолуние и близость Луны к узлу её орбиты (то есть к точке, где орбита Луны пересекает плоскость эклиптики); лунное затмение происходит, когда выполняются одновременно оба эти условия.
Схема лунного затмения:
Source:
# https://videouroki.net/video/07-godichnoe-dvizhenie-solnca-po-nebu-ehkliptika.html
# https://spacegid.com/put-solntsa.html
# https://ru.wikipedia.org/wiki/%D0%A4%D0%B0%D0%B7%D1%8B_%D0%9B%D1%83%D0%BD%D1%8B
# https://ru.wikipedia.org/wiki/%D0%9B%D1%83%D0%BD%D0%BD%D0%BE%D0%B5_%D0%B7%D0%B0%D1%82%D0%BC%D0%B5%D0%BD%D0%B8%D0%B5
# https://pandia.ru/text/77/132/887.php
# https://azbukametalla.ru/entsiklopediya/p/841-parallaks.html
# https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BB%D0%BD%D0%B5%D1%87%D0%BD%D0%B0%D1%8F_%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0
# https://geografiyazemli.ru/planeta-zemlya.html
# https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D0%BE%D0%B5%D0%BD%D0%B8%D0%B5_%D0%97%D0%B5%D0%BC%D0%BB%D0%B8
# https://ru.wikipedia.org/wiki/%D0%9D%D0%B5%D0%B9%D1%82%D1%80%D0%BE%D1%81%D1%84%D0%B5%D1%80%D0%B0
# https://ru.wikipedia.org/wiki/%D0%98%D0%BE%D0%BD%D0%BE%D1%81%D1%84%D0%B5%D1%80%D0%B0
# https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D0%B3%D0%BD%D0%B8%D1%82%D0%BE%D1%81%D1%84%D0%B5%D1%80%D0%B0
# https://ru.wikipedia.org/wiki/%D0%AD%D0%BA%D0%B7%D0%BE%D0%BF%D0%BB%D0%B0%D0%BD%D0%B5%D1%82%D0%B0
# https://ru.wikipedia.org/wiki/%D0%97%D0%B2%D0%B5%D0%B7%D0%B4%D0%B0
# http://www.astrotime.ru/charact.html
# https://student.zoomru.ru/kse/proishozhdenie-zvezd/140583.1078493.s1.html
# https://mostinfo.su/55-solnce-opisanie-interesnye-fakty-harakteristiki.html
# https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BB%D0%BD%D0%B5%D1%87%D0%BD%D0%B0%D1%8F_%D0%BF%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%BD%D0%B0%D1%8F
# https://www.polnaja-jenciklopedija.ru/vselennaja/stroenie-atmosfery-solntsa.html
# https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BB%D0%BD%D0%B5%D1%87%D0%BD%D1%8B%D0%B9_%D0%B2%D0%B5%D1%82%D0%B5%D1%80
# https://sitekid.ru/astronomiya/solnce_mdash_centr_solnechnoj_sistemy.html
# https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%BB%D0%BD%D0%B5%D1%87%D0%BD%D0%B0%D1%8F_%D0%B2%D1%81%D0%BF%D1%8B%D1%88%D0%BA%D0%B0
# https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%80%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D0%B1%D1%80%D0%BE%D1%81%D1%8B_%D0%BC%D0%B0%D1%81%D1%81%D1%8B
# https://cosmosplanet.ru/galaktiki/galaktika.html
# https://studopedia.ru/27_52459_raspredelenie-galaktik-v-prostranstve.html
# https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD_%D0%A5%D0%B0%D0%B1%D0%B1%D0%BB%D0%B0
# https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D1%81%D1%88%D0%B8%D1%80%D0%B5%D0%BD%D0%B8%D0%B5_%D0%92%D1%81%D0%B5%D0%BB%D0%B5%D0%BD%D0%BD%D0%BE%D0%B9
Task:
Распространение света в веществе.
# Волновая оптика.
Decision:
Распространяясь в веществе электромагнитное поле световой волны вызывает вынужденные колебания связанных зарядов (электронов, ионов). Колеблющиеся с частотой вынуждающей силы заряды являются источником вторичных волн. Если среда однородна и изотропна, то в результате наложения первичной и вторичной волн образуется проходящая волна, фазовая скорость которой зависит от частоты. Если в среде имеются неоднородности, то дополнительно происходит рассеяние света. На границе раздела двух сред в результате интерференции первичной и вторичной волн образуется отраженная и преломленная волна.
Прохождение света через вещество также сопровождается поглощением света, т.е. потерей энергии волны.
Поглощение света в веществе связано с преобразованием энергии электромагнитного поля волны в тепловую энергию вещества (или в энергию вторичного фотолюминесцентного излучения). Закон поглощения света (закон Бугера) имеет вид: I=I0 exp(-ax), где I0, I -интенсивности света на входе (х=0) и выходе из слоя среды толщины х, a-коэффициент поглощения, он зависит от l.
Для диэлектриков a=10^(-1)¸ 10^(-5) м^(-1), для металлов a=10^5 - 10^7 м^(-1), поэтому металлы непрозрачны для света.
Зависимостью a (л(lambda)) объясняется окрашенность поглощающих тел. Например, стекло, слабо поглощающее красный свет, при освещении белым светом будет казаться красным.
Дифракция света может происходить в оптически неоднородной среде, например в мутной среде(дым, туман, запыленный воздух и т.п.). Дифрагируя на неоднородностях среды, световые волны создают дифракционную картину, характеризующуюся довольно равномерным распределением интенсивности по всем направлениям.
Такую дифракцию на мелких неоднородностях называют рассеянием света.
Это явление наблюдается, если узкий пучок солнечных лучей проходит через запыленный воздух, рассеивается на пылинках и становится видимым.
Если размеры неоднородностей малы по сравнению с длиной волны (не более чем 0,1 л(lambda)), то интенсивность рассеянного света оказывается обратно пропорциональна четвертой степени длины волны
Рассеяние света наблюдается также и в чистых средах, не содержащих посторонних частиц. Например, оно может происходить на флуктуациях (случайных отклонениях) плотности, анизотропии или концентрации. Такое рассеяние называют молекулярным. Оно объясняет, например, голубой цвет неба. Действительно, согласно (2) голубые и синие лучи рассеиваются сильнее, чем красные и желтые, т.к. имеют меньшую длину волны, обуславливая тем самым голубой цвет неба.
В оптике показатель преломления (иначе - коэффициент преломления, индекс преломления) n оптической среды является безразмерной величиной, которая описывает прохождение света или любого другого излучения через эту среду. Определяется как n=c/v, где с- это скорость света в вакууме, а v – скорость света в среде.
Например, показатель преломления воды 1.33 означает, что свет распространяется в вакууме в 1.33 раза быстрее, чем в воде.
От показателя преломления зависит, как изменится направление луча света при прохождении границы двух сред.
Исторически сложилось, что первым определением понятия "показатель преломления" было значение, полученное из закона Снеллиуса, представленного в виде n1sinθ1=n2sinθ2, где θ1 и θ2 - углы падения и преломления света проходящего между двумя средами с показателями преломления и соответственно.
Показатели преломления двух сред также определяют, какая доля света отражается от границы двух прозрачных сред. Также, показателями преломления определяется критический угол для полного внутреннего отражения и угла Брюстера.
Показатель преломления показывает, во сколько раз скорость света и длина волны в среде отличаются от скорости света в вакууме: скорость света в среде v=c/n. а длина волны в такой среде λ = λ0/n , где λ0 - длина волны света в вакууме. Это подразумевает, что у вакуума показатель преломления равен 1, и что частота (f=v/λ) волны не зависит от показателя преломления.
Показатель преломления различен для разных длин волны света. Это свойство называют дисперсией. Дисперсия вызывает разложение белого света на составляющие, что объясняет разложение света призмой, внешний вид радуги и хроматическую аберрацию в линзах. Распространение света в абсорбирующих материалах может быть описано с использованием комплексного показателя преломления. Мнимая часть тогда становится отрицательной, в то время как реальная часть будет приниматься за то, что мы обычно считаем показателем преломления.
Понятие "показатель преломления" широко используется для описания прохождения электромагнитных волн через среду во всем электромагнитном спектре от рентгена до радиоволн. Термин "показатель преломления" может также использоваться с такими волновыми явлениями, как звук. В этом случае вместо скорости света используется скорость звука в некоторой среде.

Source:
# https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D1%80%D0%B5%D0%BD%D1%86%D0%B8%D1%8F_%D1%81%D0%B2%D0%B5%D1%82%D0%B0
# https://interneturok.ru/lesson/physics/11-klass/boptikab/volnovaya-optika-interferentsiya-sveta
# http://ivk/Fizika/2_kurs/Tushev_Shizika/TUSHEV2/18.html 
# http://msk.edu.ua/ivk/Fizika/2_kurs/Tushev_Shizika/TUSHEV2/19.html
# http://physic/physics/students/allowances/allowance3/lection6/1/1.htm
# http://content_1099/
# https://online.mephi.ru/courses/physics/optics/data/course/3/3.2.html
# https://z5h64q92x9.net/proxy_u/en-ru.ru.b758d211-613046ec-8293e757-74722d776562/https/en.wikipedia.org/wiki/Total_internal_reflection
# https://translate.yandex.ru/translate?lang=en-ru&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBrewster%26%2339%3Bs_Law&view=c
# https://pandia.ru/text/80/314/854.php
# https://scask.ru/l_book_inv.php?id=15
# http://msk.edu.ua/ivk/Fizika/2_kurs/Tushev_Shizika/TUSHEV2/21-3.html
# http://www.femto.com.ua/articles/part_1/0799.html
# http://msk.edu.ua/ivk/Fizika/2_kurs/Tushev_Shizika/TUSHEV2/20.html
# https://pandia.ru/text/78/231/52216.php
Task:
Ядерные и термоядерные реакции. Дефект массы.
# Квантовая Механика И Строение Вещества.
Decision:
Ядерные реакции – это превращение ядер атомов, вызванные воздействием на них элементарных частиц или других ядер. Так, под действием нейтронов происходит самопроизвольное (спонтанное) деление ядер радиоактивных элементов с большими атомными массами (урана-235, тория-232, протактиния-231, плутония-239). Ядра урана-235 и плутония-239 делятся нейтронами любых энергий, но особенно хорошо медленными нейтронами. Ядра урана-238 делятся только быстрыми нейтронами (с энергиями, не меньшими 1 МэВ). Деление тяжелых ядер может быть вызвано и другими частицами – протонами, дейдронами, альфа-частицами. При делении ядер урана-235 образуются осколки деления, которые представляют собой ядра элементов со средними массовыми числами в соотношении 2:3, а также свободные нейтроны (2-3) и γ-излучение. При этом выделяется значительная энергия (= 200 МэВ). Всего образуется около 80 различных осколков, которые разлетаются со скоростью, равной скорости света.
23592U + 10n→14055Cs + 9437Rb + 2 10n;23592U + 10n→14054Xe + 9438Sr + 210n
23592U + 10n→14456Ba + 8936Kr + 3 10n.
Полученные осколки притерпевают ядерные превращения, в основном бета-распад
14054Xe → 14055Sr →14056Ba→14057Za→14058Ce (стабильный)
9437Rb→9438Sr→9439Y→9440Zn (стабильный).
Каждый из 2-3 образовавшихся при делении ядер урана нейтронов способен вызвать новый акт деления и т.д. Количество нейтронов нарастает в геометрической прогрессии – возникает ценная реакция деления, приобретающая взрывной характер.
Цепная реакция деления может начаться и происходить, если масса урана-235 достигает определенной величины. Наименьшее количество вещества, в котором возможна цепная ядерная реакция деления называется критической массой. Для урана-235 – это десятки кг, для урана-233 – 5-6 кг, для калифорния – около 1г. На этом основано устройство атомной бомбы. Ядерный заряд такой бомбы представляет 2 куска урана-235 или плутония-239 с докритической массой. При взрыве обычного взрывчатого вещества обе части соединяются, давая сверхкритическую массу. В земной атмосфере всегда имеется некоторое количество нейтронов за счет космических лучей. Их достаточно для начала реакции деления и запуска цепной реакции взрывного характера. Всего смесь продуктов деления содержит более 200 изотопов 36 элементов (большинство из них с небольшими периодами полураспада).
При использовании цепной реакции деления в ядерных реакторах создаются такие условия, что только один из нейтронов, образующихся при делении урана, будет вызывать акт деления. Количество делящихся в каждый момент ядер будет примерно одинаковым и количество выделяющейся энергии будет поддерживаться на каком-то определенном уровне, и выделяющееся тепло может быть использовано для получения электроэнергии (1г урана дает такое же количество энергии, как 2,5т угля). На этом основана работа атомных электростанций.
Термоядерные реакции. Кроме процесса деления тяжелых ядер, существует и другой способ получения энергии – синтез тяжелых ядер из более легких. Такие реакции протекают при очень высоких температурах (многие миллионы градусов), поэтому их называют термоядерными. При такой температуре кинетическая энергия ядер достаточна для преодоления их кулоновских сил отталкивания. В этих условиях ядра легких элементов, двигаясь с высокой кинетической энергией, будут сближаться на очень малые расстояния – порядка 10-15 м и объединяться в ядра более тяжелых элементов. Примером таких реакций является синтез ядер гелия из ядер дейтерия и трития:
21Н+21Н→32Не+10n; 31H+21Н→42He+10n; 21Н+21Н→31H+11р;
32 Не+32 Не→42He+211р.
В приведенных реакциях выделение энергии, рассчитанное на один нуклон, превышает выделение энергии при реакциях деления тяжёлых ядер.
На основе реакции синтеза ядер гелия из ядер дейтерия и трития основано действие водородной бомбы. Необходимая для начала этой реакции температура обеспечивается взрывом атомной бомбы, которая выполняет роль своеобразного запала. В водородной бомбе термоядерная реакция носит неконтролируемый характер. Осуществить управляемую термоядерную реакцию пока не удается. 
Дефект массы - разность между суммой масс покоя нуклонов, составляющих ядро данного нуклида, и массой покоя атомного ядра этого нуклида (зарубежная номенклатура). Советская номенклатура: дефект массы в случае атома — разность между массой покоя ядра данного изотопа, выраженной в атомных единицах массы, и массовым числом данного изотопа. В современной науке для обозначения этой разницы пользуются термином избыток массы (англ. mass excess). В атомной физике избыток массы как правило выражается в а. е. м. или в электронвольтах. В связи с различием между советской и зарубежной номенклатурами понятие дефекта масс не является однозначно определённым.
Обозначается обычно как Δm.
Δm=[Z*mp+N*n]-mnuc,
где mp — масса протона, mn — масса нейтрона, mnuc — масса ядра, Z — количество протонов (атомный номер), N — количество нейтронов. Поскольку масса ядра атома всегда меньше суммы масс составляющих его нуклонов (mnuc<[Z*mp+N*n]), величина Δm всегда положительная.
Массы протона и нейтрона являются справочными величинами.
Сам дефект массы в своём роде характеризует устойчивость ядра.
Task:
Элементы теории атомных спектров.
# Квантовая Механика И Строение Вещества.
Decision:
В атоме водорода только один электрон и его спектр испускания относительно прост. В спектрах испускания атомов других элементов число линий больше. Еще до появления модели Бора физики научились различать в таких спектрах близко расположенные линии, отличающиеся по внешнему виду. Одни из них (очень узкие) получили название "резких" (от англ. sharp). Наиболее яркие линии назвали "главными" (от англ. principle). Наблюдались более широкие линии - их назвали "размытыми" (diffuse). Еще один сорт линий имеет название "фундаментальных" (от англ. fundamental). По первым буквам английских названий говорили о наличии в спектрах испускания s-, p-, d- и f-линий. Применительно к модели Бора это означает, что в спектрах атомов более сложных, чем водород, постоянные электронные уровни могут состоять из нескольких близко расположенных подуровней:
1. s-подуровень назван по "резкой" (sharp) линии,
2. p-подуровень назван по "главной" (principal) линии,
3. d-подуровень назван по "диффузной", “размытой” (diffuse) линии,
4. f-подуровень назван по "фундаментальной" (fundamental) линии.
С помощью спектров выяснилось, что первый уровень (n = 1) не содержит каких-либо подуровней, кроме s. Второй уровень состоит из двух подуровней (s и p), 3-й уровень - из трех подуровней (s, p, и d) и т.д. Как мы видим, подуровни обозначаются по первым буквам английских названий соответствующих линий в спектрах. В дальнейшем более высокие подуровни стали обозначать, просто продолжая латинский алфавит: g-подуровень, h-подуровень и т.д.
На рис. 2-16 показана диаграмма части энергетических переходов электронов в атоме лития, полученная из спектра испускания раскаленных паров этого металла.
Можно заметить, что на рис. 2-16 некоторые подуровни изображены состоящими из нескольких одинаковых по энергии "полочек". Например, p-подуровни состоят из трех одинаковых по энергии частей, d-подуровни - из пяти, f-подуровни - из семи. Откуда это стало известно? Еще в 1896 году немецкий физик П. Зееман поместил в сильное магнитное поле устройство, аналогичное водородной лампе, но наполненное парами раскаленного натрия. Обнаружилось, что в магнитном поле число линий в спектрах испускания возрастает (эффект Зеемана). Аналогичное явление наблюдается и в сильном электрическом поле. Пока на электроны действуют только внутренние силы ядра, часть из них может находиться в состоянии с одинаковой энергией. Но когда появляется дополнительное, внешнее поле, эта энергия уже не может оставаться одинаковой. Анализ спектров Зеемана значительно позже привел физика-теоретика Вольфганга Паули к мысли о том, что на одной энергетической "полочке" может помещаться не больше двух электронов. А чтобы противостоять мощным силам отталкивания, такие электроны должны обладать разным спином (к этому свойству мы вернемся чуть позже). Получается, что в атоме не может быть двух электронов в одинаковом состоянии. Этот вывод известен как принцип (или запрет) Паули.
Физические эксперименты позволяют определить заселенность электронами уровней и подуровней. Для этого надо измерять энергию ионизации атомов, т.е. энергию отрыва от него электронов. Сначала измерить энергию, необходимую для удаления из атома первого электрона, затем 2-го, 3-го и т.д. Оказалось, что во всех атомах есть электроны, для которых энергии ионизации близки. Например, для аргона (в его электронной оболочке 18 электронов) обнаруживаются пять таких групп с близкими энергиями ионизации. В них 2, 2, 6, 2 и 6 электронов. Но 5 самых нижних энергетических уровней атома соответствуют подуровням 1s, 2s, 2p, 3s и 3p (это известно из спектров испускания). В таком случае s-подуровень должен состоять только из одной орбитали (на ней 2 электрона), p-подуровень - из трех орбиталей (там 6 электронов - по два на каждую орбиталь). Можно показать, что d-подуровень в обычных условиях (без внешнего поля) состоит из пяти орбиталей с одинаковой энергией, а f-подуровень - из семи.
Модель Бора постепенно уточнялась. Ученых она привлекала тем, что с её помощью можно было делать довольно точные расчеты. Например, можно было вычислить энергию атома водорода в основном и возбужденном состояниях, определить его радиус, вычислить энергию ионизации и т.д. Для этих целей модель была снабжена ясным и понятным для многих исследователей математическим аппаратом, который разработали в основном сам Н. Бор и его последователь А. Зоммерфельд. Для проведения расчетов требовалось описывать состояние электрона в атоме, т.е. указывать его точный "адрес" в электронной оболочке (точнее - в модели электронной оболочки) с помощью так называемых квантовых чисел. Мы уже знаем, что каждый электрон существует на каком-либо уровне (1, 2, 3, и т.д.). Этот уровень обозначается числом n, которое получило название главного квантового числа. Понятно, что число n может принимать только целые значения.
Поскольку уровням уже присвоено главное квантовое число n, для подуровней было введено вспомогательное квантовое число l. Если главное квантовое число n - это “адрес” уровня, то число l - “адрес” подуровня:
l = 0 – это s-подуровень,
l = 1 – это p-подуровень,
l = 2 – это d-подуровень,
l = 3 – это f-подуровень,
Давайте попробуем разобраться, почему были выбраны именно такие, а не иные значения l для разных подуровней. Для этого посмотрим на уже знакомую нам орбитальную диаграмму на рис. 2-17.
Значения l тесно связаны с числом орбиталей на каждом подуровне. Например, в значении l = 2 “скрыты” пять орбиталей d-подуровня: -2, -1, 0, +1, +2. Значение l = 1 дает три орбитали p-подуровня: -1, 0, +1. А при l = 0 орбиталь на s-подуровне только одна. Нетрудно вычислить, что в значении l = 3 “зашифрованы” семь орбиталей f-подуровня: -3, -2, -1, 0, +1, +2, +3.
Далее требовалось обозначить "адреса" орбиталей на каждом подуровне. Поскольку орбитали атома становятся "видны" только в магнитном поле, очередное квантовое число, записывающее “адрес” орбитали в атоме, назвали магнитным квантовым числом m. Это квантовое число принимает значения от -l до +l, то есть имеет ровно столько значений, сколько орбиталей существует на каждом подуровне.
Давайте с помощью уже известных нам трех квантовых чисел n, l и m запишем “адрес”, орбитали, которая на рис. 2-17 выделена красным цветом. Потом мы сможем этим же способом записывать “адреса” любых других орбиталей и находящихся на них электронов.
Выделенная орбиталь находится на 3-м уровне: следовательно, ее главное квантовое число n = 3. Эта орбиталь находится на d-подуровне: следовательно, ее вспомогательное квантовое число l = 2. Наконец, для этой орбитали магнитное квантовое число m = -2. Итак, “адрес” выделенной орбитали: n = 3, l = 2, m = -2.
Последнее квантовое число, которое потребовалось для описания электрона в атоме, называется спиновым квантовым числом s. Спин (по английски - веретено), можно представить как вращение заряда электрона вокруг собственной оси - по часовой стрелке и против часовой стрелки. Спиновое квантовое число может принимать, следовательно, только два значения и в квантовой механике они приняты такими: s = +1/2 и s = -1/2. В современной волновой модели строения атома (о ней - в конце этого параграфа) уже затруднительно рассматривать электрон как вращающуюся частицу конечных размеров. Следует признать, что прежняя трактовка спина в значительной мере утратила смысл. Спин связан с движением заряда внутри самого электрона и не зависит от перемещения электрона в трехмерном пространстве. Здесь нам важно понимать, что существует некое фундаментальное различие между электронами (спин электрона), которое позволяет им существовать на одной орбитали в состоянии с одинаковой энергией, несмотря на сильнейшее отталкивание одноименных зарядов этих электронов.
В качестве примера давайте запишем полный набор квантовых чисел для электрона, обведенного красным кружком в орбитальной диаграмме атома азота. Этот электрон характеризуется набором квантовых чисел: n = 2 (находится на 2-м уровне), l = 1(находится на p-подуровне), m = +1 (находится на последней из трех одинаковых p-орбиталей, s = +1/2 (этот электрон заселился первым на данную p-орбиталь).
Заметим, что это справедливо для атома, в котором первым занял место в электронной оболочке на 1s-подуровне электрон со спином +1/2. Но таких атомов в природе ровно половина, а другая половина начинает заселение своей оболочки электроном со спином -1/2. Для простоты дальше мы будем рассматривать только те 50% атомов любых элементов, где самым первым в оболочку попал электрон с s = +1/2.
Можно решать и обратную задачу. Допустим, последним электронную оболочку некоего элемента заселяет электрон с набором квантовых чисел: n = 3, l = 2, m = -2, s = +1/2.
Какой это элемент? Какова его полная электронная формула? Решение заключается в том, что данный электрон находится на 3-м уровне (n = 3), причем на d-подуровне (l = 2). Полезно нарисовать все пять d-орбиталей и расположить над ними значения магнитного квантового числа m от -2 до +2. У нас это уже сделано на рис. 2-17, причем нужная орбиталь (m = -2) выделена красным цветом. Расположив на ней единственный электрон (стрелка вверх, т.к. s = +1/2) и зная, что он последний, мы приходим к выводу, что остальные d-орбитали пусты. Теперь мы уже можем записать сокращенную электронную формулу элемента: …3d1. Этот элемент легко найти в периодической таблице - это скандий 21Sc. Если вы еще не совсем уверенно обращаетесь с Периодической таблицей, то можно заполнить электронами на рис. 2-17 все нижние уровни и подуровни вплоть до первой 3d-орбитали, поместив на нее единственный d-электрон. Всего на орбитальной диаграмме элемента поместится ровно 21 электрон (проверьте!), следовательно, в его ядре 21 протон и его порядковый номер в таблице Менделеева тоже 21 (Sc). Орбитальная диаграмма помогает записать и полную электронную формулу для скандия: 1s^2 2s^2 2p^6 3s^2 3p^6 4s^2 3d^1.
Как мы видим, каждый электрон в атоме имеет свой собственный “адрес”, записанный набором из четырех квантовых чисел. Например, если два электрона находятся на одном и том же уровне (имеют одинаковое число n), и даже на одном подуровне (например, p-подуровне), то они обязательно расположатся на разных орбиталях - то есть будут отличаться числом m. А если орбитали уже полностью заполнены, то два находящиеся на них электрона обязательно должны отличаться друг от друга спиновым квантовым числом s. Таким образом, теперь мы можем дать более строгую формулировку принципа или запрета Паули: Никакие два электрона в одном атоме не могут характеризоваться одинаковым набором всех четырех квантовых чисел n, l, m, s.
Внимательный читатель мог заметить, что на рисунке 2-16, показывающем электронные переходы в атоме лития, порядок заполнения уровней и подуровней вполне логичный: 1s, 2s, 2p, 3s, 3p, 3d, 4s … . Как показали спектры испускания, это характерно только для атомов c небольшим числом электронов. Впрочем, об этом редко вспоминают, потому что у самых легких элементов на 3-м и 4-м уровнях вообще нет электронов. С увеличением числа электронов в атоме подуровень 4s, как мы уже знаем, начинает заполняться раньше, чем 3d. А на более высоких уровнях такие "нарушения" становятся правилом. Можно воспользоваться уже освоенными нами квантовыми числами для того, чтобы уметь воспроизводить ряд заполнения электронами уровней и подуровней большинства атомов (1s 2s 2p 3s 3p 4s 3d 4p 5s 4d 5p 6s 4f 5d 6p 7s 5f 6d …) с помощью правила Клечковского: Энергия уровней и подуровней возрастает в порядке увеличения суммы n + l, а при одном и том же значении этой суммы ниже располагаются уровни с меньшим n.
В модели Бора электрон рассматривался как частица. Его положение в пространстве, орбита и скорость описывались теми же методами, которые используются при вычислении траекторий планет. Но для космических тел не бывает "разрешенных" и "неразрешенных" орбит, а в атоме Бора могли быть только разрешенные (стационарные) орбиты. Находясь на этих орбитах, электрон почему-то не излучает энергию при движении вокруг заряженного ядра. Эта устойчивость электрона на стационарных орбитах так и оставалась необъяснимой.
В 20-х годах прошлого века французский физик Л. де Бройль выдвинул гипотезу о том, что электрон обладает свойствами не только частицы, но и волны. Впоследствии это удалось подтвердить экспериментально. Гипотеза де Бройля позволила изящно объяснить, почему электрон в атоме может существовать только на стационарных орбитах. Стационарными орбитами в атоме могут быть только такие орбиты, в которые укладывается целое число длин волн электрона. Такая волна называется "стоячей" (рис. 2-18).
Появление гипотезы де Бройля открыло принципиальную возможность описывать электрон в атоме уже не как частицу, а как волну. Это в 1926 году сделал австрийский физик Э. Шредингер. Он применил к электрону в атоме математический аппарат, описывающий движение волны в трехмерном пространстве. Такое движение описывается математической функцией (её называют "пси"-функцией), в которую входят координаты трехмерного пространства x, y, z. Оказалось, что квадрат этой функции описывает уже не движение волны, а вероятность обнаружить эту волну в точке пространства с координатами x, y, z. Так появилась возможность рассчитывать вероятность нахождения электрона-волны в разных точках пространства вокруг ядра.
Результаты решения уравнения Шредингера для атома водорода обычно приводятся в виде уже знакомых нам "электронных облаков": это сферические s-облака (s-орбитали), гантелеобразные p-облака (p-орбитали) и т.д.
На рисунке 2-19 изображена волновая модель электронной оболочки таких атомов, как, например, бор, углерод, азот, кислород, фтор, неон. Мы видим, что p-орбитали и s-орбитали в этой модели "пронизывают" друг друга. Но разве могут области существования разных электронов пересекаться? Как может, например, p-электрон существовать "внутри" s-электрона? И могут ли 1s-электроны находиться "внутри" 2s-электронов? Объяснение заключается в том, что до сих пор не удается решить уравнение Шредингера для атомов с двумя и более электронами, поэтому мы вынуждены пользоваться результатами расчетов для одноэлектронных атомов - атома водорода, ионов He+, Li^(2+), С^(5+) и т.д. В этих системах электрон находится либо на s-орбитали, либо на p-орбиталях и никогда не встречается ситуация с одновременным нахождением нескольких электронов на разных орбиталях. Таким образом, для описания многоэлектронных атомов приходится применять одноэлектронное приближение волновой модели, не учитывающее взаимное влияние электронов. Это вынужденный и одновременно смелый шаг. Впрочем, он оказался оправданным - модель хорошо "работает" не только при описании свойств многоэлектронных атомов, но и в теории химической связи. Именно такое представление атомных орбиталей весьма пригодится вам при изучении органической химии - для описания электронного строения органических соединений и объяснения их химических свойств.
Но можно ли считать электрон исключительно волной? Разумеется, нет. Термин "корпускулярно-волновой дуализм" предполагает обязательное наличие у объекта (электрона) как свойств частицы, так и свойств волны. Интересно об этом рассуждали крупнейшие физики, стоявшие у истоков квантовой механики. Вот, например, выдержка из воспоминаний нобелевского лауреата В. Гейзенберга: «…Электрон всегда рисовался моему воображению в виде маленькой сферы. Я бывало говорил только одно: «Иногда, конечно, можно с пользой назвать его волной, но это не более чем способ разговора, а физическая реальность тут ни при чем». Характерно мнение другого замечательного физика - А. Зоммерфельда, высказанное в лекции «Современное состояние атомной физики» в Гамбургском университете в феврале 1927 года: «…В трехмерном пространстве электрон нельзя локализовать. Это подчеркивает Гейзенберг, а Шредингер иллюстрирует это, «размазывая» заряд электрона в сплошную пространственную массу. Лично я не верю в этот размазанный, растекающийся электрон уже потому, что вне атома электроны-корпускулы, обладающие большой скоростью, с несомненностью могут быть установлены экспериментом. С другой стороны, неоспоримый факт, что сплошные плотности Шредингера при расчете физических и химических действий атома оказывают неоценимую помощь и в этом смысле реальны в большей степени, нежели точечно локализованный электрон старой теории».
Нам необходимо понимать, что изображения орбиталей волновой модели - это не внешний вид электронов в атоме, а области вероятности найти s-, p- или какой-либо другой электрон в пространстве вокруг ядра. Для того, чтобы такие области имели не слишком размытые границы, на рисунках показывают области с 95%-ной вероятностью обнаружить здесь электрон. Надо также помнить, что это области вероятности, рассчитанные в рамках данной модели атома. Поэтому, когда вы читаете в учебнике, что вспомогательное (оно же орбитальное, побочное, азимутальное) квантовое число l определяет форму электронного облака, то должны при этом понимать, что такое облако - не более чем абстрактное математическое построение в рамках волновой модели атома. Например, сейчас уже мало кто вспоминает, что в модели Бора-Зоммерфельда квантовое число l "заставляло" s-электроны двигаться по наиболее вытянутым, эллиптическим орбитам, в то время как орбиты p- и d-электронов оказывались близкими к круговым.
Модель Бора-Зоммерфельда очень красива и до сих пор используется художниками для создания символики, отражающей достижения современной физической науки. Ниже вы видите несколько таких примеров: герб города Дубна (здесь расположен один из крупнейших российских исследовательских центров), эмблема физического факультета Новосибирского университета, ледокол "Россия" с изображением электронной оболочки атома гелия в рамках "устаревшей" модели Бора-Зоммерфельда. Интересно, знал ли эту подробность художник, создававший эмблему? Для моряков встречных судов такой рисунок на борту ледокола означает лишь, что этот могучий корабль оснащен атомной силовой установкой.
Следует все же помнить, что термин "орбита" (из модели Бора) в волновой модели теперь полностью уступил место термину "орбиталь". Орбиталь имеет чисто вероятностный смысл и её просят не путать с орбитой, т.е. траекторией движения электрона.
Task:
Взаимодействие вещества и излучения. Ионизация и рекомбинация.
# Квантовая Механика И Строение Вещества.
Decision:
Все рассматриваемые в настоящем разделе виды излучения производят, в конечном счете, ионизацию вещества и поэтому называются ионизирующими излучениями.
Ионизирующим излучением называется любое излучение, взаимодействие которого с веществом приводит к образованию ионов разных знаков.
Видимый свет и ультрафиолетовое излучение в это понятие не включают.
Различают непосредственно ионизирующее и косвенно ионизирующее излучение.
Непосредственно ионизирующее излучение представляет собой поток заряженных частиц, кинетическая энергия которых достаточна для ионизации при столкновении с атомами вещества.
Косвенно ионизирующее излучение представляет собой поток незаряженных частиц (нейтронов, фотонов), которые могут создавать непосредственно ионизирующее излучение и (или) вызывать ядерные превращения при взаимодействии со средой.
Ионизирующее излучение, представляющее собой частицы с ненулевой массой покоя, называют корпускулярным.
К фотонному ионизирующему излучению относится гамма-излучение и рентгеновское излучение.
Энергией ионизирующего излучения называют суммарную энергию ионизирующих частиц (без учета энергии покоя), испущенную, переданную или поглощенную. Единицей энергии ионизирующего излучения в СИ является джоуль (Дж). Кроме того, рекомендуется применять уже упоминавшуюся внесистемную единицу электрон-вольт и десятичные кратные ей единицы для измерения энергии отдельных ионизирующих частиц.
Корпускулярное и фотонное излучения, испускаемые атомным ядром, могут быть обнаружены только по их взаимодействию с веществом. Если это взаимодействие незначительно, то обнаружение такого излучения, например излучения нейтрино, представляет собой чрезвычайно трудную задачу.
Излучение взаимодействует преимущественно с электронами атомов. При этом может происходить происходит возбуждение атомов, но в основном идет процесс ионизации атомов, который состоит в отрыве от атома по крайней мере одного электрона:
М→М^(+)+e^(-)
(стрелкой здесь обозначено воздействие ионизирующего излучения).
Взаимодействие излучения с атомными ядрами используют только для обнаружения незаряженных, нейтронов, не обладающих ионизирующим действием: при упругих столкновениях нейтронов с ядрами водорода образуются протоны отдачи, которые могут быть обнаружены как заряженные частицы.
Проникающую способность различных видов излучения принято характеризовать толщиной слоя вещества, при котором интенсивность излучения уменьшается наполовину, причем толщину обычно выражают массой вещества на единицу поверхности, г/см2 или мг/см2 (масса на единицу поверхности равна плотности, умноженной на толщину слоя.)
a-частицы сильно взаимодействуют с различными веществами, т. е. легко поглощаются ими. Тонкий лист бумаги или слой воздуха толщиной несколько сантиметров достаточны для того, чтобы полностью поглотить a-частицы.
При прохождении через вещество a-частицы почти полностью отдают свою энергию в результате электростатического взаимодействия с электронами оболочек атомов.
Энергия a-частиц идет на ионизацию и возбуждение атомов поглощающей среды (ионизационные потери). Этот процесс может рассматриваться как упругое столкновение a-частицы с электронами, при котором a-частица теряет часть своей энергии.
Поток a-частиц - это сильно ионизирующее излучение.
Энергия образования одной пары ионов в воздухе составляет около 35 эВ, так что при прохождении a-частицы с энергией Еa=4,2 МэВ до момента ее поглощения образуется около 10^5 пар ионов. В конце пробега, когда энергия а-частицы уменьшается и становится недостаточной, чтобы производить ионизацию, она, присоединив к себе два электрона, превращается в атом гелия.
Соударения с электронами практически не изменяют траекторию движения тяжелой a-частицы (масса равна 4 а.е.м.), поэтому можно считать, что она движется практически прямолинейно.
Метод определения энергии a-излучения по пробегу a-частиц слишком сложен и неточен. Точные значения энергии получают с помощью магнитного спектрометра. Этот метод основан на том, что a-частицы в зависимости от их энергии по-разному отклоняются в магнитном поле.
Принцип действия обычных a-спектрометров основан на использовании прямопропорциональной зависимости между энергией a-частиц и числом образующихся пар ионов.
Вследствие сильного взаимодействия a-частиц с веществом толщина измеряемых радиоактивных препаратов не должна превышать нескольких микрограммов на 1 см^2, а сами измерения приходится проводить в вакууме.
При измерении препаратов с большой толщиной или при проведении измерений в атмосфере воздуха получаются сильно заниженные значения энергии - вследствие самопоглощения и соответственно поглощения a-излучения.
Подобно a-частицам. взаимодействуют с веществом протоны и тяжелые ионы.
b-частицы - это электроны (или позитроны), испускаемые ядрами радонуклидов при b-распаде. b-частицы обладают сплошным энергетическим спектром.
В зависимости от энергии б-частиц различают:
1. мягкое b-излучение (нескольких десятков кэВ);
2. жесткое b-излучение (до нескольких единиц МэВ).
Вероятность взаимодействия b-частиц с веществом меньше, чем для a-частиц, так как b-частицы имеют в два раза меньший заряд и приблизительно в 7300 раз меньшую массу.
Удельная ионизация для b-частицы составляет 4-8 пар ионов на 1 мм пути, т.е. пробег b-частиц намного больше пробега a-частиц с той же энергией. Максимальные пробеги b-частиц с энергией 1 МэВ составляет в воздухе около 4 м, в воде - 4,4 м, в алюминии - 2 мм.
При взаимодействии b-частиц с электронами атомов массы соударяемых частиц можно считать одинаковыми, поэтому b-частицы при столкновении отклоняются гораздо сильнее, в результате чего при торможении траектория движения b-частиц имеет вид ломаной линии.
Скорость b-частиц сравнима со скоростью света.
Взаимодействие электронов и позитронов с веществом качественно одинаково и складывается из трех основных процессов:
1. упругого рассеяния на атомных ядрах;
2. рассеяния на орбитальных электронах;
3. неупругих столкновений с атомным ядром.
Упругое рассеяние b-частиц происходит в основном на ядрах, но могут также происходить и на атомных оболочках. Вследствие малой массы, b-частицы могут отклоняться на большие углы. Чем меньше энергия b-частиц, тем больше (в среднем) отклонение, которое она испытывает.
Поэтому при радиометрических измерениях неюбходимо учитывать эффект обратного рассеяния, который может привести к увеличению счета.
Рассеяние b-частиц на орбитальных электронах среды является наиболее важным процессом для регистрации b-частиц. Потерянная при столкновении энергия b-частицы передается орбитальному электрону, что ведет к возбуждению или ионизации атома.
При ионизации b-частицы выбивают орбитальные электроны, которые могут производить вторичную ионизацию. Полная ионизация равна сумме первичной и вторичной ионизации. На 1 мкм пути в веществе b-частица создает несколько сотен пар ионов.
При неупругом столкновении электронов с ядрами атомов происходит торможение электронов в поле ядра. Уменьшение энергии электронов в результате торможения приводит к испусканию тормозного рентгеновского излучения.
Потери энергии тем больше, чем больше энергия b-частицы и атомный номер элемента поглотителя. Поэтому для снижения тормозного излучения защиту для b-источников выполняют из материалов с малым атомным номером - алюминий, органическое стекло и др.
В случае применения тяжелых материалов возникает тормозное (вторичное) излучение, которое является рентгеновским и обладает большой проникающей способностью.
Взаимодействие g-квантов с веществом существенно отличается от взаимодействия a- и b-частиц. В то время как заряженные частицы передают свою энергию электронам атомов при многократных процессах соударения, g-кванты отдают всю или, по крайней мере, большую часть своей энергии при однократном взаимодействии. Однако вероятность этого взаимодействие очень низка, поэтому g-кванты обладают гораздо большей проникающей способностью, чем заряженные частицы.
Проникающая способность излучения характеризуется чаще всего толщиной слоя поглотителя (в г/см2), при которой интенсивность излучения уменьшается наполовину. Эту величину называют толщиной слоя полупоглощения.
При семикратной (по отношению к указанной выше величине) толщине слоя интенсивность уменьшается до 1% от первоначального значения; при десятикратной - до 0,1%.
Поглощение g-квантов вызывается тремя независимыми друг от друга процессами с различной физической природой:
1. фотоэффектом;
2. эффектом Комптона;
3. образованием электрон-позитронных пар,
Фотоэффект - это процесс, при котором g-квант передает всю свою энергию орбитальному электрону и прекращает свое существование.
Энергия выбрасываемого при фотоэффекте электрона Ее равна разности между энергией g-кванта Еg и энергией связи электрона Есв:
Ее = Еg - Есв; в большинстве случаев Еg>Есв.
Эффектом Комптона называют процесс, при котором g-квант отдает электрону только часть своей энергии, т. е. g-квант рассеивается.
Это упругое столкновение фотонного излученияс электронами внешней оболочки атома. g-Квант передает часть своей энергии электрону и изменяет направление своего движения. Отраженный g-квант называется вторичным, или рассеянным.
Электроны, выбрасываемые в процессе эффекта Комптона, имеют сплошной энергетический спектр.
Комптон-эффект является основным процессом взаимодействия с веществом фотонного излучения в диапазоне энергий 0,5-10 МэВ. С ростом энергии фотонов вероятность комптоновского рассеяния убывает. Многократный процесс рассеяния за счет Комптон-эффекта приводит в конечном счете к тому, что рассеянный фотон в результате фотоэффекта поглотится атомом.
Образование электрон-позитронных пар - это такое взаимодействие фотонного излучения с веществом, при котором энергия фотона в поле ядра переходит в энергию массы покоя и кинетическую энергию электрона и позитрона.
Так как энергия покоя как электрона, так и позитрона равна 0,51 МэВ, то образование пар возможно лишь при энергии фотона большей 1,02 МэВ. Образование пар возможно только в поле ядра. Ядро в соответствии с законом сохранения импульса принимает на себя часть импульса фотона. Часть энергии фотона, превышающая 1,02 МэВ, передается электрону и позитрону в виде кинетической энергии. Позитрон через короткое время аннигилирует с образованием двух вторичных фотонов, каждый из которых имеет энергию 0,51 МэВ и поэтому не может образовывать пары.
Поглощение фотонного излучения в результате образования пар наблюдается в основном на атомах тяжелых элементов. Этот процесс является преобладающим при энергии фотонов более 10 МэВ.
Вклад каждого из трех рассмотренных процессов в общий процесс поглощения зависит в первую очередь от энергии g-квантов и порядкового номера поглотителя. При низких значениях энергии (<0,5 МэВ) поглощение g-квантов свинцом обусловлено в основном фотоэффектом, при энергии выше 4 МэВ - образованием электрон-позитронных пар, а в области средних значений энергий - эффектом Комптона. Для элементов с меньшим порядковым номером (исключая очень низкие значения энергии g-квантов) эффект Комптона является доминирующим в общем процессе поглощения и при более высоких значениях энергии g-квантов, например для алюминия - до 10 МэВ.
Поглощение g-квантов сильно зависит от порядкового номера элементов. Свинец является наилучшим поглотителем g-квантов. во всех областях энергии.
Для определения энергии g-квантов в настоящее время используют главным образом сцинтилляционные и полупроводниковые детекторы. По положению "фотопика", используя калибровочную кривую, можно определить энергию g-квантов. Полупроводниковые детекторы, позволяющие получать более узкие линии, обладают значительно большей разрешающей способностью, что особенно важно при регистрации g-квантов с близкими энергиями.
Нейтроны представляющие собой поток незаряженных частиц, которые при прохождении через вещество взаимодействуют только с ядрами атомов. Нейтроны обладают широким диапазоном энергий - от долей до десятков миллионов электрон-вольт.
В зависимости от энергии нейтроны могут по-разному взаимодействовать с ядрами атомов. Характер взаимодействия может быть упругим и неупругим.
Упругое рассеяние. Упругое взаимодействие нейтрона с ядрами аналогично столкновению бильярдных шаров. Если бильярдный шар, движущийся с большой скоростью, столкнется с неподвижным шаром, он передаст ему большую или меньшую часть энергии в зависимости от параметров удара, а сам изменит направление движения. Суммарная энергия обоих шаров до и после взаимодействия не изменится.
Из закона механики известно, что чем больше масса неподвижного шара, по сравнению с массой движущегося, тем меньшая доля энергии будет ему передана при столкновении. Если массы сталкивающихся шаров равны, то при каждом столкновении движущийся шар будет терять в среднем половину своей энергии.
Аналогичным образом нейтроны, обладающие определенным запасом энергии, взаимодействуя с ядрами атомов, передают им часть энергии, а сами изменяют направление своего движения. Этот процесс называется упругим рассеянием.
Ядра атомов, получившие в результате столкновения определенный запас кинетической энергии, - ядра отдачи - "выскакивают" из электронной оболочки и, проходя через вещество, производят ионизацию (поскольку они обладают зарядом). Чем меньше масса ядер среды, через которые проходят нейтроны, тем большую долю энергии они теряют в процессе упругого рассеяния. При каждом акте рассеяния на ядрах водорода нейтрон теряет в среднем половину энергии, при рассеянии на ядрах углерода - примерно 14 - 17 %, а при рассеянии на ядрах аргона - не более 8 - 9 %. Поэтому в качестве замедлителей нейтронов лучше всего использовать водородосодержащие или легкие вещества - обычную или тяжелую воду, парафин, бериллий, углерод.
В процессе упругого рассеяния энергия нейтрона постепенно уменьшается и приближается к энергии теплового движения атомов и молекул среды, равной примерно 0,025 эВ. Такие нейтроны называются тепловыми. Чтобы нейтрон с первоначальной энергией 1 МэВ стал тепловым, число столкновений с ядрами водорода должно быть n = 25. В углероде энергия этого нейтрона достигает 0,025 эВ после 100 столкновений, а при взаимодействии с ядрами урана - после 2100 столкновений. Этот процесс завершается примерно через 10-6 секунды.
Радиационный захват. При достаточной тепловой скорости нейтрон может быть захвачен одним из ядер атомов среды. Ядро переходит при этом в возбужденное состояние. Возврат ядра в основное состояние сопровождается испусканием g-квантов.
При радиационном захвате происходит следующая ядерная реакция:
т.е. образуется изотоп исходного элемента, а избыточная энергия, полученная ядром вследствие такой перестройки, испускается в виде g-кванта. В ядерных реакторах, где создаются мощные потоки тепловых нейтронов, ядерная реакция указанного типа используется для получения искусственных радионуклидов.
Не только тепловые, но и быстрые нейтроны могут быть захвачены ядрами атомов. В результате произойдет ядерная реакция с вылетом a-частицы, протона и т.д. и образуется ядро другого элемента:
Радиационный захват нейтрона возможен при любой его энергии и на любых ядрах, но более вероятен на медленных нейтронах и тяжелых ядрах, что следует учитывать при выборе материала защиты.
Неупругое рассеяние. При захвате нейтрона ядром может произойти ядерная реакция, в процессе которой образуется ядро исходного нуклида, но при этом энергия испущенного нейтрона меньше энергии захваченного.
В этом случае говорят о процессе неупругого рассеяния, поскольку суммарная энергия системы (нейтрон + ядро) до взаимодействия не равна энергии системы после взаимодействия. Процесс неупругого рассеяния имеет большую вероятность для атомных ядер середины и конца периодической системы элементов.
Таким образом, при прохождении нейтронов через вещество происходят следующие взаимодействия с ядрами: упругое и неупругое рассеяния, радиационный захват и различного типа ядерные реакции. Вероятность различного типа взаимодействий зависит от энергии нейтронов.
Поэтому по характеру взаимодействия нейтроны условно разделены на четыре группы:
1. Тепловые нейтроны: 0 - 0,5 эВ
2. Промежуточные нейтроны: 0,5 - 200 кэВ
3. Быстрые нейтроны: 200кэВ - 20 МэВ
4. Релятивистские нейтроны: Свыше 20 МэВ
Для быстрых нейтронов доминирующим процессом взаимодействия является упругое рассеяние, хотя, как для всех других групп, возможны (со значительно меньшей вероятностью) и другие процессы взаимодействия (неупругое рассеяние, ядерные реакции, радиационный захват). Для релятивистских нейтронов возрастает роль неупругого рассеяния по сравнению с упругим, существенный вклад дают ядерные реакции.
Для промежуточных нейтронов наиболее характерным процессом взаимодействия является неупругое рассеяние, а также радиационный захват.
Для тепловых нейтронов наиболее вероятный процесс взаимодействия - радиационный захват. Вероятность этого процесса пропорциональна 1/(E^(1/2)), т.е. возрастает с уменьшением энергии (скорости) нейтронов. Наиболее вероятная скорость движения тепловых нейтронов при температуре 295К (22 °С) составляет 2200 м/сек, а соответствующая энергия - 0,025 эВ.
Таким образом, при всех процессах взаимодействия нейтронов с веществом образуются либо заряженные частицы - ядра отдачи, непосредственно производящие ионизацию, либо g-излучение, которое также производит ионизацию в результате вторичных процессов.
В процессе ядерных реакций под воздействием нейтронов образуются также другие заряженные частицы (протоны, дейтроны и т.д.).
В нормальном состоянии газы состоят из электрически нейтральных молекул и атомов, и, следовательно, не могут проводить электрический ток. Поэтому газы являются хорошими электрическими изоляторами. Напомню, что окружающий нас воздух является хорошим и самым дешёвым диэлектриком, и его изолирующие свойства широко используются в различных устройствах высокого напряжения (ЛЭП, подстанциях, электростатических генераторах и др.).
Проделаем опыт: разорвём цепь источника тока, т.е. создадим в ней воздушный промежуток. Если включить в такую разорванную цепь гальванометр, то он покажет отсутствие электрического тока.
Поднесём к воздушному промежутку пламя газовой горелки. В пламени происходят интенсивные химические процессы, за счёт энергии которых отдельные атомы могут возбуждаться и ионизироваться. Образующиеся в пламени горелки ионы и электроны переходят в возбужденный промежуток, и под действием приложенной к нему разности потенциалов начинают двигаться к электродам; в цепи появляется ток.
Процесс ионизации заключается в том, что под действием высокой температуры или некоторых лучей молекулы газа теряют электроны, и тем самым превращаются в положительные ионы.
Таким образом, в результате происходит освобождение электронов из атомов и молекул, которые могут присоединиться к нейтральным молекулам или атомам, превращая их в отрицательные ионы. Ионы и свободные электроны делают газ проводником электричества.
Ионизация газа может происходить под действием коротковолнового излучения – ультрафиолетовых, рентгеновских и гамма-лучей, а также альфа-, бета- и космических лучей.
Установлено, что в нормальных условиях газы, например воздух, обладают электрической проводимостью, но очень ничтожной. Эта проводимость вызвана излучением радиоактивных веществ, имеющихся на поверхности земли, а также космическими лучами, приходящими из мировых глубин. Однако равновесная концентрация ионов в воздухе не превышает нескольких десятков пар ионов в кубическом сантиметре. Для того, чтобы воздух стал заметно проводить электрический ток, его надо подвергнуть воздействию интенсивных ионизаторов.
Итак, при ионизации газовых молекул под действием внешнего источника из молекулы обычно вырывается один электрон, и остаётся положительный молекулярный ион с зарядом е+, т.е. образуется пара – положительный ион и электрон. Вырвавшийся электрон обычно присоединяется к какой-либо другой молекуле и образует отрицательный молекулярный ион с зарядом е–, опять образуется пара – положительный и отрицательный ионы. Оба типа ионов одновалентны (z=1), имеют одинаковую концентрацию n, но несколько различные подвижности μ+ и μ-. Под действием внешнего электрического поля эти ионы начинают двигаться, и возникает электрический ток.
Электрический ток, возникающий в процессе ионизации газа – ток в газах – это встречный поток ионов и свободных электронов.
Наряду с термином «ионизация» часто употребляют термин «генерация», характеризующий тот же самый процесс образования носителей зарядов в газе.
Одновременно с процессом ионизации идёт обратный процесс рекомбинации (иначе – молизации).
Рекомбинация – это нейтрализация при встрече разноименных ионов или воссоединение иона и электрона в нейтральную молекулу (атом).
Факторы, под действием которых возникает ионизация в газе, называют внешними ионизаторами, а возникающая при этом проводимость называется несамостоятельной проводимостью.
При данной мощности внешнего ионизатора в объёме газа устанавливается равновесное состояние, при котором число пар ионов, возникающих под действием ионизатора за одну секунду в единице объёма, равно числу пар рекомбинировавших ионов. 
Таким образом, ионизованный газ способен проводить ток. Явление прохождения электрического тока через газ называется газовым разрядом. Газовые разряды можно разделить на два вида: несамостоятельный и самостоятельный.
Task:
Теория атома водорода. Уровни энергии.
# Квантовая Механика И Строение Вещества.
Decision:
После открытия электрона Томсоном в 1897 г. стало ясно, что электроны входят в состав всех атомов, то есть, что атом имеет структуру и не является неделимым.
Первая модель строения атома была предложена также Томсоном. В этой модели атом равномерно заполнен некоторой положительно заряженной субстанцией, на которую приходится основная масса атома и в которой находятся электроны, как изюминки в киселе (рис.22.1). Электроны могут колебаться под действием квазиупругих сил; при этом атом излучает электромагнитные волны с соответствующей частотой.
Эта модель не выдержала экспериментальной проверки. В 1911 году Резерфорд исследовал рассеяние альфа-частиц при прохождении через тонкую золотую фольгу (рис.22.2).
Использовался источник α-излучения с естественной радиоактивностью, помещённый в контейнер К. С помощью специальных экранов выделялся очень тонкий пучок α-частиц.
Альфа-частица, налетая на фольгу Ф, отклонялась на некоторый угол φ и, попадаяна люминесцентный экран, вызывала вспышку. Вспышки можно было наблюдать. Подобные опыты ставились и до Резерфорда, но он первый решил выяснить, не отклоняются ли α-частицы на большие углы – для очистки совести, просто чтобы исключить такую возможность. Модель киселя с изюмом просто не допускала существования в атоме таких плотных и тяжелых элементов структуры, что они могли бы отклонять быстрые массивные альфа-частицы на значительные углы.
Резерфорд попросил одного из своих студентов переоборудовать установку таким образом, чтобы можно было наблюдать рассеяние альфа-частиц под большими углами отклонения. Каково же было удивление не только студента, непосредственно проводившего эксперимент, но и самого Резерфорда, когда выяснилось, что некоторые частицы отклоняются на углы вплоть до 180°! В рамках устоявшейся модели атома Томсона полученный результат не мог быть истолкован: быстрая и тяжелая альфа-частица «прошила» бы кисель с изюмом насквозь, практически с ним не взаимодействуя (рис.22.3,а).
Чтобы отбросить частицу назад, требуется компактное массивное очень плотное положительно заряженное ядро. Альфа-частицы, пролетающие далеко от ядра, почти не отклоняются. Таких частиц много, так как
ядро маленькое. Частицы, пролетающие ближе к ядру, отклоняются на больший угол. И только небольшая доля частиц, летящих почти на ядро, отклоняется на углы, близкие к 180° (рис.22.3,б).
По доле частиц, рассеянных на большие углы, можно оценить размеры ядра: rядра≈10^(-14)м. Оказалось, что радиус ядра примерно в 10000 раз меньше размеров самого атома: rатома≈10^(-10)м. Большая часть атома – это пустота, занятая очень лёгкими по сравнению с ядром электронами (рис.22.4).
Очевидно, что электроны в атоме не могут быть неподвижными, иначе
упадут на положительное ядро. Электроны должны вращаться вокруг ядра, подобно планетам вокруг Солнца. Поэтому ядерная модель Резерфорда получила название «планетарной».
Но опять оказалось не всё так просто; у планетарной модели есть свои
трудности и противоречия:
1. Неустойчивость атомов. Электрон движется вокруг ядра, следовательно, имеет центростремительное ускорение. Любая заряженная частица, движущаяся с ускорением, излучает электромагнитные волны. Электрон излучает, поэтому теряет энергию, теряет скорость и падает на ядро (рис.22.5).
2. Спектр излучения атома должен быть сплошным: ничто не мешает электрону в атоме Резерфорда иметь любую энергию и терять на излучение тоже любую энергию. Однако опыт показывает, что спектры излучения невзаимодействующих атомов (паров металлов, атомарных газов) дискретные, состоят из отдельных спектральных линий.
Для спектра атомарного водорода (рис.22.6) удалось подобрать формулу (формула Бальмера), описывающую длины волн:
1/λ=R*(1/(2^2)-1/(m^2)), (22.1)
где R=1.1*10^7 м^(-1) – постоянная Ридберга; m – целое число, m>2.
При m=3 получаем красную линию (см. рис.22.6), при m=4 – сине-зелёную, при m=5 и 6 – фиолетовые; остальные линии (m=7, 8,…) лежат в ультрафиолетовой области. Более того, в инфракрасной и ультрафиолетовой областях спектра водорода были обнаружены другие спектральные серии, описываемые подобными соотношениями:
1/λ=R*(1/(n^2)-1/(m^2)), (22.2)
где m=n+1; m=n+2; m=n+3;… Если
n=1, получается серия Лаймана (УФ-область);
n=2 – серия Бальмера;
n=3 – серия Пашена;
n=4 – серия Брэккета; лежат в ИК-области
n=5 – серия Пфунда и т.д.
Для описания спектров Ритц предложил ввести понятие терма: терм
(спектральный терм) – функция целого числа (квантового числа): T = f (n) . Для атома водорода термы выглядят наиболее просто: T(n)=R/(n^2). Тогда любую спектральную линию можно выразить через разность двух термов:
1/λ= T(n)-T(m). (22.3)
Для других атомов спектральные термы выглядели несколько сложнее, чем
для водорода. Такие правильные закономерности не могли быть случайными, но из планетарной модели атома никак не вытекали. Проблему попытался решить Нильс Бор
Постулаты Бора основаны на:
1. экспериментальных закономерностях в атомных спектрах;
2. квантовом характере излучения и поглощения света;
3. ядерной модели атома
Электрон в атоме может находиться только на стационарной орбите; при этом он не излучает и не поглощает энергии. Условие стационарных орбит:
me*v*r=n*ħ; n=1,2,3, ...∞ (22.4)
Это – условие квантования: момент импульса электрона Ln на орбите с номером n может принимать только дискретные значения, кратные постоянной Планка h :
Ln=me*v*r=p*r;
Ln=n*h.
Можно интерпретировать условие (22.4) по-другому: устойчивыми орбитами будут те, на длине l=2*π*rn которых укладывается целое число длин волн де Бройля λn (рис.22.7):
Таким образом, теория Бора учитывает волновые свойства электрона.
II. Правило частот
Энергия излучается или поглощается атомом только при переходе электрона между стационарными орбитами; при этом энергия излучённого или поглощённого кванта равна разности энергий стационарных состояний, между которыми произошёл переход:
h*v=Em-En. (22.5)
Это условие – закон сохранения энергии.
Схема уровней энергии атома водорода
Схема уровней энергии дана на рис.22.9. Уровни энергии сбегаются кверху; расстояние между ними уменьшается. Энергия электрона в атоме отрицательна (электрон связан с ядром). При n→∞ энергия равна нулю; это – ионизированное состояние атома, когда электрон не связан с ядром. Уровень с n=1 и минимальной энергией соответствует основному состоянию. Остальные состояния (n=2, n=3,…) называются возбуждёнными.
По второму постулату Бора можно определить частоту или длину волны фотона, излучённого или поглощённого атомом при переходе электрона между орбитами с номерами n и m (n<m):
Это есть постоянная Ридберга:
E0=R*h*c. (22.17)
Таким образом, формула Бальмера-Ритца доказана для атома водорода (22.2) и для водородоподобного иона:
1/λ=Z^2*R*(1/(n^2)-1/(m^2)). (22.2а)
Возможна также другая запись; для частоты спектральных линий (22.2б).
v=Z^2*R'*(1/(n^2)-1/(m^2)). (22.2б)
Здесь постоянная Ридберга равна:
На рис.22.9 показаны переходы между уровнями, соответствующие спектральным сериям. Пунктиром указаны переходы, соответствующие границам серий. Головная линия серии соответствует переходу с ближайшего уровня. При излучении фотона электрон переходит на уровень с меньшей энергией (стрелки вниз); при поглощении фотона электрон переходит на более высокий уровень.
Энергия ионизации атома равна разности энергий основного состояния и ионизированного:
Eu=R*h*c*Z^2.
Если ионизация происходит не из основного состояния, а из возбуждённого с номером n, тогда
Eu=(R*h*c*Z^2)/(n^2).
Найдём потенциал ионизации атома. По определению, потенциал ионизации – это разность потенциалов, которую должен пройти электрон в электрическом поле, чтобы получить энергию, равную энергии ионизации атома: φu=Eu/e.
Потенциал ионизации атома водорода из основного состояния равен 13.6 эВ.
Первый потенциал возбуждения соответствует переходу из основного
состояния в первое возбуждённое (n=1 → n=2) и равен φв1=(E2-E1)/e; второй потенциал возбуждения – переходу с основного уровня на второй возбуждённый (n=1 → n=3) и т.д. (см. рис.22.9): φв2=(E3-E1)/e
Task:
Спин, прницип Паули.
# Квантовая Механика И Строение Вещества.
Decision:
Момент импульса микрочастиц связан с их движением как целого материального тела относительно некоторой системы отсчета. Но частицы могут некоторым образом двигаться относительно самих себя, например вращаться относительно своей оси. Физическая величина, которая характеризует такое движение, называется спином. Эта величина имеет аналогию с моментом импульса микрочастицы, но при этом является существенно квантовой величиной. Спин – это внутреннее свойство квантовой частицы, характеризующее наравне с другими величинами: массой, зарядом и т.д. При этом у спина нет классического аналога.
Как и момент импульса спин задается модулем S и проекцией Sz на некоторую ось, например z:
S=ħ*√(σ*(σ+1))
где число σ является аналогом орбитального квантового числа, а
Sz=ħ*mσ.
В последнем выражении mσ принимает 2*σ+1 значения от -σ до +σ. Число σ принимает целые и полуцелые значения и называется спиновым числом или спином. Например, у электрона, протона и нейтрона спиновое число равно 1/2, у фотона равно 1. Существуют микрочастицы, у которых σ=0.
Микрочастицы, у которых целочисленные спины, называются бозонами, а микрочастицы с полуцелыми спинами называются фермионами.
Таким образом, микрочастицы определяются четырьмя квантовыми числами:
главным квантовым числом , которое характеризует энергию микрочастицы;
орбитальным квантовым числом , которое характеризует модуль момента импульса микрочастицы;
магнитным квантовым числом , которое характеризует направление момента импульса микрочастицы;
спиновое число , которое характеризует спин микрочастицы.
Экспериментально установлено, что для фермионов действует принцип Паули: В одной и той же квантовой системе не может быть двух электронов, обладающих одинаковой совокупностью квантовых чисел.
Данный принцип объясняет целый ряд физических закономерностей и явлений, например, существование периодической системы элементов Д.И.Менделеева.
Task:
Основные элементы теории возмущений.
# Квантовая Механика И Строение Вещества.
Decision:
Теория возмущений — метод приближенного решения задач теоретической физики, применимый в том случае, когда в задаче присутствует малый параметр, причём в пренебрежении этим параметром задача имеет точное решение.
Физические величины, рассчитанные по теории возмущений, имеют вид ряда
А=А^(0)+ε*А^(1)+ε^(2)*А^(2)+...
где А^(0) — решение невозмущённой задачи, ε — малый параметр. Коэффициенты А^(n) находятся путём последовательных приближений, то есть А^(n) выражается через А^(0),...,А^(n-1).
Теория возмущений в квантовой механике применяется в том случае, когда гамильтониан системы можно представить в виде
H=H^(0)+V
где H^(0) — невозмущённый гамильтониан (причём решение соответствующего уравнения Шрёдингера известно точно), а V — малая добавка (возмущение).
Задача состоит в нахождении собственных функций гамильтониана (стационарных состояний) и соответствующих уровней энергии. Будем искать решения уравнения Шрёдингера для нашей системы
H|ψn>=En|ψn>(**)
в виде разложения в ряд
ψn=ψn^(0)+ψn^(1)+ψn^(2)+...
En=En^(0)+En^(1)+En^(2)+... (***)
где ψn^(0) и En^(0) — волновые функции и энергетические уровни невозмущённой задачи
H^(0)|ψn^(0)>=En^(0)|ψn^(0)>,
а число n нумерует энергетические уровни.
Подставляя (***) в (**), с точностью до членов первого порядка по возмущению получим
(V-En^(1))(ψn^(0)>=(En^(0)-H^(0))|ψn^(1)>
Домножая слева на ψm^(0), и учитывая, что ψm^(0) — (ортонормированные) собственные функции невозмущённого гамильтониана, получаем
Вышеизложенная процедура работает, если невозмущённый уровень En^(0) невырожден. В противном случае для нахождения поправок первого порядка необходимо решать секулярное уравнение.
Аналогичным образом находятся поправки следующих порядков, хотя формулы сильно усложняются.
Task:
Квазиклассическое приближение
Task:
Уравнение Шредингера. Стационарное уравнение Шредингера, его решение для одномерного движения. Туннельный эффект, надбарьерное отражение.
# Квантовая Механика И Строение Вещества.
Decision:
Уравнение Шредингера — линейное дифференциальное уравнение в частных производных, описывающее изменение в пространстве (в общем случае, в конфигурационном пространстве) и во времени чистого состояния, задаваемого волновой функцией, в гамильтоновых квантовых системах.
Играет в квантовой механике такую же важную роль, как уравнения Гамильтона или уравнение второго закона Ньютона в классической механике или уравнения Максвелла для электромагнитных волн.
Сформулировано Эрвином Шрёдингером в 1925 году, опубликовано в 1926 году. Уравнение Шрёдингера не выводится, а постулируется методом аналогии с классической оптикой, на основе обобщения экспериментальных данных[1].
Уравнение Шрёдингера предназначено для частиц без спина, движущихся со скоростями, много меньшими скорости света. В случае быстрых частиц и частиц со спином используются его обобщения (уравнение Клейна — Гордона, уравнение Паули, уравнение Дирака и др.).
В квантовой физике вводится комплекснозначная функция ψ, описывающая чистое состояние объекта, которая называется волновой функцией. В наиболее распространённой копенгагенской интерпретации эта функция связана с вероятностью обнаружения объекта в одном из чистых состояний (квадрат модуля волновой функции представляет собой плотность вероятности). Поведение гамильтоновой системы в чистом состоянии полностью описывается с помощью волновой функции.
Отказавшись от описания движения частицы с помощью траекторий, получаемых из законов динамики, и определив вместо этого волновую функцию, необходимо ввести в рассмотрение уравнение, эквивалентное законам Ньютона и дающее рецепт для нахождения ψ в частных физических задачах. Таким уравнением является уравнение Шрёдингера.
Пусть волновая функция задана в n-мерном конфигурационном пространстве, тогда в каждой точке с координатами →r(x1,x2,x3,...,xn), в определённый момент времени t она будет иметь вид ψ(→r,t). В таком случае уравнение Шрёдингера запишется в виде:
-ħ^2/(2*m)*Δψ(→r,t)+V(→r,t)*ψ(→r,t)=-i*ħ*∂/∂t*Δψ(→r,t),(1)
где ħ=ħ/(2*π), ħ — постоянная Планка; m — масса частицы, V(→r,t) — внешняя по отношению к частице потенциальная энергия в точке →r(x1,x2,...,xn) в момент времени t, Δ — оператор Лапласа (или лапласиан), эквивалентен квадрату оператора набла и в n-мерной системе координат имеет вид:
Δ≡∇^2=∂^2/∂x1^2+∂^2/∂x2^2+...+∂^2/∂xn^2
Форма уравнения Шрёдингера показывает, что относительно времени его решение должно быть простым, поскольку время входит в это уравнение лишь через первую производную в правой части. Действительно, частное решение для случая, когда {\displaystyle V}V не является функцией времени, можно записать в виде:
ψ(→r,t)=ψ(→r)*e^(-i*E*t/ħ), (2)
где функция ψ(→r) должна удовлетворять уравнению:
-ħ^2/(2*m)*Δψ(→r)+V(→r)*ψ(→r)=E*ψ(→r), (3)
которое получается из уравнения Шрёдингера (1) при подстановке в него указанной выше формулы для {\displaystyle \Psi }\Psi (2). Заметим, что это уравнение вообще не содержит времени; в связи с этим оно называется стационарным уравнением Шрёдингера (уравнение Шрёдингера, не содержащее времени).
Выражение (2) является лишь частным решением зависящего от времени уравнения Шрёдингера (1), общее решение представляет собой линейную комбинацию всех частных решений вида (2). Зависимость функции ψ(→r,t) от времени проста, но зависимость её от координаты не всегда имеет элементарный вид, так как уравнение (3) при одном выборе вида потенциальной функции V(→r) совершенно отличается от того же уравнения при другом выборе этой функции. В действительности, уравнение (3) может быть решено аналитически лишь для небольшого числа частных типов функции {\displaystyle V(→r).
Это преодоление микрочастицей потенциального барьера в случае, когда её полная энергия (остающаяся при туннелировании неизменной) меньше высоты барьера. Туннельный эффект — явление исключительно квантовой природы, невозможное в классической механике и даже полностью противоречащее ей. Аналогом туннельного эффекта в волновой оптике может служить проникновение световой волны внутрь отражающей среды (на расстояния порядка длины световой волны) в условиях, когда, с точки зрения геометрической оптики, происходит полное внутреннее отражение. Явление туннелирования лежит в основе многих важных процессов в атомной и молекулярной физике, в физике атомного ядра, твёрдого тела и т. д.
Рассмотрим потенциал в виде прямоугольного барьера (рис. 2).
Согласно классической механике частица с энергией E < U0, движущаяся в таком поле слева направо, дойдя до потенциальной стенки, отражается от неё, начиная двигаться в обратном направлении. В квантовой механике возникает новое явление – туннелированние – вероятность частице пройти сквозь барьер, имея энергию E < U0. В общем случае коэффициент прохождения определяется как отношение плотности потока в прошедшей волне к плотности потока в падающей:
D=k2/k1*|A|^2 (1.2.1)
Коэффициент прохождения частицы через прямоугольный барьер задаётся выражением:
Теперь рассмотрим движение частиц в поле, изображённого на рисунке 3 типа: 𝑈(𝑥) монотонно возрастает от одного постоянного предела (𝑈=0, при 𝑥→-∞) до другого (𝑈=U0, при 𝑥→+∞)
Классическая механика утверждает что, в случае если частица с энергией E > U0 движется в таком поле слева направо, то дойдя до потенциальной стенки, она продолжает двигаться в прежнем направлении с уменьшенной скоростью. В квантовой механике частица имеет вероятность отразиться от подобной потенциальной стенки, даже имея
энергию E > U0. Коэффициент отражения можно определить как отношение плотности отражённого потока к падающему:
В выражениях (1.2.1) - (1.2.2) 𝑘1, k2, соответствуют волновому
вектору падающей и прошедшей волны. Плотности потоков падающей и отражённой волнах пропорциональны соответственно: 𝑘1, 𝑘1*|𝐵|^2, а прошедшей - 𝑘2*|𝐴|^2.
Task:
Основные принципы квантовой механики. Принцип суперпозиции. Принцип неопределенности.
# Квантовая Механика И Строение Вещества.
Decision:
Как показывает история естествознания, свойства элементарных частиц, с которыми столкнулись физики, изучая микромир, не укладываются в рамки традиционных физических теорий. Попытки объяснить микромир с помощью понятий и принципов классической физики потерпели неудачу. Поиски новых понятий и объяснений привели к возникновению новой физической теории – квантовой механики, у истоков которой стояли такие выдающиеся физики, как В.Гейзенберг, Н.Бор, М.Планк, Э.Шредингер и др.
Изучение специфических свойств микрообъектов началось с экспериментов, в ходе которых было установлено, что микрообъекты в одних опытах обнаруживают себя как частицы (корпускулы), а в других – как волны. Однако вспомним историю изучения природы света, а точнее непримиримые разногласия между Ньютоном и Гюйгенсом. Ньютон рассматривал свет как поток корпускул, а Гюйгенс – как волнообразное движение, возникающее в особой среде – эфире.
В 1900 году М.Планк, обнаруживший дискретные порции энергии (кванты), дополнил представление о свете как о потоке квантов или фотонов. Однако наряду с квантовым представлением о свете продолжала развиваться и волновая механика света в работах Луи де Бройля и Э.Шредингера. Луи де Бройлем было открыто подобие между колебанием струны и атомом, испускающим излучение. Атом каждого элемента состоит из элементарных частиц: тяжелого ядра и легких электронов. Эта система частиц ведет себя подобно акустическому инструменту, производящему стоячие волны. Луи де Бройль сделал смелое предположение, что движущийся равномерно и прямолинейно электрон – это волна определенной длины. До этого мы уже привыкли, что свет в некоторых случаях выступает как частица, а в некоторых как волна. В отношении электрона мы признавали его частицей (были определены его масса и заряд). И, действительно, электрон ведет себя подобно частице, когда он движется в электрическом или магнитном поле. Он же ведет себя и подобно волне, когда дифрагирует, проходя сквозь кристалл или дифракционную решетку.
Опыт с дифракционной решеткой:
Чтобы выявить сущность данного явления, обычно проводят мысленный эксперимент с двумя щелями. В этом эксперименте пучок электронов, излучаемых источником S, проходит через пластинку с двумя отверстиями, а затем попадает на экран.
Если бы электроны были классическими частицами, вроде дробинок, количество попаданий в экран электронов, проходящих через первую щель, изображалось бы кривой В, а через вторую щель – кривой С. Общее же число попаданий выражалось бы суммарной кривой D.
На самом же деле происходит совсем иное. Кривые В и С мы получим лишь в тех случаях, когда одно из отверстий будет закрыто. Если же одновременно открыты оба отверстия, на экране появится система максимумов и минимумов, подобная той, какая имеет место для световых волн (кривая А).
Особенности возникшей гносеологической ситуации можно определить следующим образом. С одной стороны выяснилось, что физическая реальность едина, то есть нет пропасти между полем и веществом: поле подобно веществу, обладает корпускулярными свойствами, а частицы вещества, подобно полю, - волновыми. С другой стороны, оказалось, что единая физическая реальность двойственна. Естественно, возникла проблема: как разрешить антиномию корпускулярно-волновых свойств микрообъектов. Одному и тому же микрообъекту приписываются не просто различные, а противоположные характеристики.
В 1925 году Луи де Бройль (1875-1960) выдвинул принцип, согласно которому каждой материальной частице независимо от ее природы следует поставить в соответствие волну, длина которой обратно пропорциональна импульсу частицы: l = h/ p, где l – длина волны, h – постоянная Планка, равная 6,63×10–34 Дж × сек, р – импульс частицы, равный произведению массы частицы на ее скорость (р = m×v). Таким образом, было установлено, что не только фотоны (частицы света), но и другие материальные частицы, такие как электрон, протон, нейтрон и др. обладают двойственными свойствами. Это явление получило название дуализма волны и частицы. Так, в одних экспериментах элементарная частица может себя вести как корпускула, а в других - как волна. Отсюда следует, что любое наблюдение микрообъектов невозможно без учета влияния приборов и измерительных средств. В нашем макромире мы не замечаем влияния прибора наблюдения и измерения на макротела, которые изучаем, так как это влияние чрезвычайно мало и им можно пренебречь. Макроприборы вносят возмущения в микромир и не могут не вносить изменения в микрообъекты.
Как следствие противоречивости корпускулярных и волновых свойств частиц датский физик Н.Бор (1885-1962) выдвинул в 1925 году принцип дополнительности. Суть этого принципа состояла в следующем: чрезвычайно характерную черту атомной физики представляет новое отношение между явлениями, наблюдаемыми в разных экспериментальных условиях. Получаемые при таких условиях опытные данные надо рассматривать как дополнительные, так как они представляют одинаково существенные сведения об атомных объектах и, взятые вместе, исчерпывают их. Взаимодействие между измерительными приборами и исследуемыми физическими объектами составляет неотъемлемую часть квантовых явлений. Мы приходим к выводу, что принцип дополнительности дает нам фундаментальную характеристику рассмотрения объектов микромира.
Следующим наиболее фундаментальным принципом квантовой механики является принцип неопределенности, сформулированный в 1927 году Вернером Гейзенбергом (1901 – 1976). Суть его состоит в следующем. Невозможно одновременно и с одинаковой точностью определить координату микрочастицы и ее импульс. Точность измерения координаты зависит от точности измерения импульса и наоборот; невозможно обе эти величины измерить с какой угодно точностью; чем больше точность измерения координаты (х), тем неопределеннее импульс (р), и наоборот. Произведение неопределенности в измерении координаты и неопределенности в измерении импульса должно быть “больше или равно” постоянной Планка (h), Δx*Δp>h.
Границы, определяемые этим принципом, не могут быть принципиально преодолены никаким совершенствованием средств измерения и измерительных процедур. Принцип неопределенности показал, что предсказания квантовой механики носят лишь вероятностный характер и не обеспечивают точных предсказаний, к каким мы привыкли в классической механике. Именно неопределенность предсказаний квантовой механики вызывала и вызывает споры среди ученых. Речь даже шла о полном отсутствии определенности в квантовой механике, то есть о ее индетерминизме. Представители классической физики были убеждены, что по мере совершенствования науки и измерительной техники законы квантовой механики станут точными и достоверными. Эти ученые верили, что никакого предела для точности измерений и предсказаний не существует.
Принцип неопределённости Гейзенберга (или Га́йзенберга) в квантовой механике — фундаментальное соображение (соотношение неопределённостей), устанавливающее предел точности одновременного определения пары характеризующих систему квантовых наблюдаемых, описываемых некоммутирующими операторами (например, координаты и импульса, тока и напряжения, электрического и магнитного полей). Более доступно он звучит так: чем точнее измеряется одна характеристика частицы, тем менее точно можно измерить вторую. Соотношение неопределённостей задаёт нижний предел для произведения среднеквадратичных отклонений пары квантовых наблюдаемых.
Соотношение неопределённости возникает между любыми квантовыми наблюдаемыми, определяемыми некоммутирующими операторами.
Неопределённость между координатой и импульсом
Пусть Δx — среднеквадратическое отклонение координаты частицы M, движущейся вдоль оси x, и Δp — среднеквадратическое отклонение её импульса. Величины Δx и Δp связаны следующим неравенством:
Δx*Δp=ħ/2
где ħ — постоянная Планка, а ħ=ħ/(2*π).
Согласно соотношению неопределённостей, невозможно абсолютно точно определить одновременно координаты и импульс частицы. С повышением точности измерения координаты, максимальная точность измерения импульса уменьшается и наоборот. Те параметры, для которых такое утверждение справедливо, называются канонически сопряжёнными.
Это центрирование на измерении, идущее от Н.Бора, очень популярно. Однако соотношение неопределённости выводится теоретически из постулатов Шрёдингера и Борна и касается не измерения, а состояний объекта: оно утверждает, что для любого возможного состояния выполняются соответствующие соотношения неопределённости. Естественно, что оно будет выполняться и для измерений. То есть вместо «с повышением точности измерения координаты максимальная точность измерения импульса уменьшается» следует говорить: «в состояниях, где неопределённость координаты меньше, неопределённость импульса больше».
Неопределённость между энергией и временем
Пусть ΔE — среднеквадратическое отклонение при измерении энергии некоторого состояния квантовой системы, и Δt — время жизни этого состояния. Тогда выполняется следующее неравенство,
ΔЕ*Δ>=ħ/2
Иными словами, состояние, живущее короткое время, не может иметь хорошо определённую энергию.
При этом, хотя вид этих двух соотношений неопределённости похож, но их природа (физика) совершенно различны.
Принцип суперпозиции — фундаментальный принцип квантовой механики, согласно которому, если для некоторой квантовой системы допустимы состояния ψ1 и ψ2, то допустима и любая их линейная комбинация ψ3=С1*ψ1+С2*ψ2; она называется суперпозицией состояний ψ1 и ψ2 (принцип суперпозиции состояний).
Если измерение какой-либо физической величины f в состоянии |ψ1| всегда приводит к определённому результату f1, а в состоянии |ψ2| — к результату f2, то измерение в состоянии |ψ3| приведёт к результату f1 или f2 с вероятностями {\displaystyle |C1|^2 и |C2|^2 соответственно.
Альтернативная формулировка гласит, что если возможны несколько путей перехода из начального состояния в конечное, то полная амплитуда перехода есть сумма амплитуд перехода по каждому из этих путей (принцип суперпозиции амплитуд):
A=∑Ai
При этом вероятность перехода, которая пропорциональна квадрату амплитуды, не равна, в отличие от классического случая, сумме вероятностей:
|A|^2=|∑Ai|^2!=∑|Ai|^2
Из принципа суперпозиции следует, что все уравнения, которым подчиняются волновые функции (например, уравнение Шрёдингера) в квантовой механике должны быть линейными.
Значение любой наблюдаемой (например, координаты, импульса или энергии частицы), полученное в результате измерения, является собственным значением оператора этой величины, соответствующим конкретному собственному состоянию этого оператора, то есть определённой волновой функции, действие оператора на которую сводится к умножению на число — собственное значение. Согласно принципу суперпозиции, линейная комбинация двух таких волновых функций также будет описывать реально существующее физическое состояние системы. Однако для такого состояния наблюдаемая величина уже не будет иметь определённого значения, и в результате измерения может быть получено одно из двух значений с вероятностями, определяемыми квадратами коэффициентов (амплитуд), с которыми обе функции входят в линейную комбинацию. Разумеется, волновая функция системы может быть линейной комбинацией и более чем двух состояний, вплоть до бесконечного их количества.
Важными следствиями принципа суперпозиции являются различные интерференционные эффекты (см. опыт Юнга, дифракционные методы), а для составных систем — зацепленные состояния.
Принцип суперпозиции, как и вообще квантовая механика, применим не только к микро-, но и к макрообъектам. Это может выглядеть парадоксально с точки зрения нашего повседневного жизненного опыта. Известный иллюстрацией явлается мысленный эксперимент с котом Шрёдингера, в котором возникает квантовая суперпозиция живого и мёртвого кота.
Task:
Представление физических величин операторами. Наблюдаемые величины.
# Квантовая Механика И Строение Вещества.
Decision:
Для получения информации о физических величинах, связанных с движущейся частицей, в квантовой механике разработан специальный математический аппарат, который использует представления об операторах физических величин и результатах их действия на волновые функции.
В работах М.Борна, П.Дирака и др. был сформулирован второй постулат квантовой механики, утверждающий, что каждой физической величине соответствует определенный оператор этой физической величины. При этом соотношения между операторами в квантовой механике имеют ту же структуру, что и соотношения между соответствующими им физическими величинами в классической механике.
Для расшифровки этого постулата дадим некоторые пояснения. Оператор - это математическое правило, следуя которому мы можем преобразовать одну функцию в другую. Задать оператор - это означает определить рецепт такого преобразования. Такое преобразование может быть простым умножением исходной функции на число или известную функцию, дифференцированием функции, перестановкой аргументов функции и др.
В квантовой механике в качестве символа соответствующего оператора используется классическое обозначение физической величины, ставя над буквой "шляпку" в виде значка "^". Например, x^ - это оператор координаты x, px^ - оператор проекции импульса на ось x, U^ - оператор потенциальной энергии и т.д. Оператор предполагается действующим на написанную вслед за ним функцию. В качестве таких функций в квантовой механике выступают волновые функции. При этом равенство двух функций a^*ψ=b^*ψ в операторной форме будет записываться как равенство операторов: a^=b^.
Определим операторы основных физических величин в квантовой механике.
1. Оператор координаты. Действие этого оператора на волновую функцию сводится к умножению ее на соответствующую координату, то есть.
x^*ψ=x*ψ, y^*ψ=y*ψ, z^*ψ=z*ψ. (3.27)
В символической операторной форме записи этих операций имеют вид
x^=x, y^=y z^=z (3.28)
Объединяя эти формулы, можно ввести векторный оператор r→^, соответствующий радиусу-вектору r→ в классической механике. Такой оператор формально рассматривается как некоторый вектор, имеющий в качестве компонент в декартовой системе координат операторы x^, y^, z^. Поэтому
r→^=i→*x^+j→*y^+k→*z^ (3.29)
2. Оператор импульса. С помощью операций дифференцирования по координатам определим операторы проекций импульса, записав эти определения в символической операторной форме как
Все три формулы в (3.30) можно объединить в одну, введя векторный оператор импульса p→^=i→*px^+j→*py^+k→*pz^, который с учетом (3.30) запишется как
p→^=-i*ħ*∇ (3.31)
Здесь
∇=i→(∂/∂x)+j→(∂/∂y)+k→(∂/∂z)
Используя соотношение классической механики:
p^2=px^2+py^2+pz^2=px*px+py*py+pz*pz
определим оператор квадрата импульса как
^p^2=(^px)^2+(^py)^2+(^pz)^2=-ħ(∂^2/∂x^2+∂^2/∂y^2+∂^2/∂z^2) (3.32)
Используя символ оператора Лапласа, запишем (3.32) в более компактном виде
^p^2=*ħ^2*Δ (3.33)
3. Оператор момента импульса. По формуле классической механики, определяющей момент импульса частицы как вектор →L=→rx→p, запишем выражения для его проекций на координатные оси:
Lx=y*pz-z*py, Ly=z*px-x*pz, Lz=x*py-y*px
Эти соотношения превратим в операторные, определяющие операторы проекций момента импульса
Оператор квадрата момента импульса можно построить по правилу
^L^2=^Lx*^Lx+^Ly*^Ly+^Lz*^Lz(3.35)
Отметим, что задачи квантовой механики, обладающие сферической симметрией, удобнее решать не в декартовой, а в сферической системе координат r, θ и φ. Переходя от декартовых координат к сферическим по обычным правилам замены переменных x=r*sin(θ)*cos(φ), y=r*sin(θ)*sin(φ), z=r*cos(θ), формулы (3.34) и (3.35) можно преобразовать к следующему виду - угловая часть оператора Лапласа в сферической системе координат.
4. Операторы энергий. Классическая формула связи кинетической энергии частицы с квадратом ее импульса Ek=p^2/(2*m0) позволяет записать аналогичное соотношение между соответствующими операторами. Поэтому
^Ek=^p^2/(2*m0)=-(ħ^2/(2*m0)*Δ (3.37)
Если частица движется в стационарном силовом поле, и ее потенциальная энергия U=U(x,y,z) определена в любой точке пространства, то оператор потенциальной энергии ^U определяется как оператор умножения на функцию U, то есть
^U*ψ=U*ψ или ^U=U (3.38)
Так как полная энергия частицы в классической механике есть сумма кинетической и потенциальной энергий, то в квантовой механике оператор полной энергии ^H определяется как сумма операторов кинетической и потенциальной энергий. Поэтому
^H=^Ek+^U=^p^2/(2*m0)+U
Раскрывая выражение для оператора квадрата импульса по формуле (3.33), запишем оператор полной энергии как
^Y=-(ħ^2/(2*m0)*Δ+ U(x,y,z) (3.39)
В классической механике полную энергию частицы, выраженную через ее координаты и импульс, называют функцией Гамильтона. Поэтому в квантовой механике оператор полной энергии ^H называют оператором функции Гамильтона или просто гамильтонианом.
Гамильтониан ^H является основным оператором квантовой механики, поскольку, выбирая конкретный вид гамильтониана, с учетом силового поля, действующего на частицу, мы формулируем на математическом языке все особенности квантовой системы. Поэтому и основное уравнение нерелятивистской квантовой механики - уравнение Шредингера (3.8) может быть записано в операторной форме
i*ħ*∂ψ/∂t=^H*ψ (3.40)
содержащей гамильтониан ^H.
Физическое содержание операторного метода в квантовой механике накладывает определенные ограничения на возможный вид квантовомеханических операторов. Пусть ^Ф- оператор физической величины f. Тогда для любых функций ψ1 и ψ2 и произвольных постоянных C1 и C2 должно выполняться равенство
^Ф*(C1*ψ1+C2*ψ2)=C1*^Ф*ψ1+C2*^Ф*ψ2 (3.41)
Операторы, обладающие таким свойством, называются линейными операторами. Свойство линейности операторов физических величин тесно связано с принципом суперпозиции квантовых состояний. Только использование в теории линейных операторов не нарушает этого принципа.
Оператором физической величины может быть только линейный самосопряженный (эрмитов) оператор. Только такому оператору соответствует действительная (не комплексная) физическая величина. Самосопряженным называют оператор, который совпадает со своим сопряженным оператором. В этом случае для произвольных функций ψ1 и ψ2 тождественно выполняется следующее интегральное равенство
Таким образом, каждой физической величине в квантовой механике приводится в соответствие определенный линейный самосопряженный оператор. Непосредственной проверкой можно убедиться, что все приведенные выше квантовомеханические операторы обладают такими свойствами.
Относящаяся к системе или телу динамическая переменная, которая в принципе может быть измерена. Так, координата, импульс и кинетическая энергия электрона — это наблюдаемые величины.
Квантовая наблюдаемая является линейным самосопряжённым оператором, действующим на сепарабельном (комплексном) гильбертовом пространстве чистых состояний квантовой системы. В интуитивном физическом понимании норма оператора наблюдаемой представляет собой наибольшую абсолютную величину измеряемого числового значения физической величины.
Иногда вместо термина «наблюдаемая» используют «динамическая величина», «физическая величина». Однако температура и время являются физическими величинами, но не являются наблюдаемыми в квантовой механике.
Тот факт, что квантовым наблюдаемым сопоставляются линейные операторы, ставит проблему связи этих математических объектов с экспериментальными данными, которые являются вещественными числами. На опыте измеряются вещественные числовые значения, соответствующие наблюдаемой в заданном состоянии. Важнейшими характеристиками распределения числовых значений на вещественной прямой являются среднее значение <A> наблюдаемой и дисперсия D(A) наблюдаемой.
Обычно постулируют, что возможные числовые значения квантовой наблюдаемой, которые могут быть измерены экспериментально, являются собственными значениями оператора этой наблюдаемой.
Говорят, что наблюдаемая A в состоянии ρ имеет точное значение, если дисперсия A равна нулю D(A)=0.
Другое определение квантовой наблюдаемой: наблюдаемыми квантовой системы являются самосопряжённые элементы C^*-алгебры.
Использование структуры C^*-алгебры позволяет сформулировать классическую механику аналогично квантовой. При этом для некоммутативных C^*-алгебр, описывающих квантовые наблюдаемые, имеет место теорема Гельфанда — Наймарка: любая C^*-алгебра может быть реализована алгеброй ограниченных операторов, действующих в некотором гильбертовом пространстве. Для коммутативных {\displaystyle C^{*}}C^{*}-алгебр, описывающих классические наблюдаемые, имеем следующую теорему: всякая коммутативная C^*-алгебра M изоморфна алгебре непрерывных функций, заданных на компактном множестве максимальных идеалов алгебры M.
В квантовой механике часто постулируется следующее утверждение. Каждой паре наблюдаемых A и B соответствует наблюдаемая C, устанавливающая нижнюю грань одновременной (для одного и того же состояния) измеримости A и B, в том смысле, что D(A)D(B)>=<C>^2, где D(A) — дисперсия наблюдаемой, равная <A^2>-<A>^2. Это утверждение, называемое принципом неопределённости, выполняется автоматически, если A и B являются самосопряжёнными элементами C^* -алгебры. При этом принцип неопределённости принимает свою обычную форму, где C=i[A,B].
Понятия квантовой наблюдаемой и квантового состояния являются дополнительными, дуальными. Эта дуальность связана с тем, что в опыте определяются лишь средние значения наблюдаемых, а в это понятие входит и понятие наблюдаемой, и понятие состояния.
Если эволюция квантовой системы во времени полностью характеризуется её гамильтонианом, то уравнением эволюции наблюдаемой является уравнение Гейзенберга. Уравнение Гейзенберга описывает изменение квантовой наблюдаемой гамильтоновой системы с течением времени.
В классической механике наблюдаемой называется вещественная гладкая функция, определённая на гладком вещественном многообразии, описывающем чистые состояния классической системы.
Между классическими и квантовыми наблюдаемыми существует взаимосвязь. Обычно полагают, что задать процедуру квантования означает установить правило, согласно которому каждой наблюдаемой классической системы, то есть функции на гладком многообразии, ставится в соответствие некоторая квантовая наблюдаемая. В квантовой механике наблюдаемыми считаются операторы в гильбертовом пространстве. В качестве гильбертова пространства обычно выбирают комплексное бесконечномерное сепарабельное гильбертово пространство. Сама функция, соответствующая данному оператору, при этом называется символом оператора.
Source:
# http://fn.bmstu.ru/data-physics/library/physbook/tom5/ch3/texthtml/ch3_4_text.htm
# http://nuclphys.sinp.msu.ru/misc/gloss.htm#:~:text=%D0%9D%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B0%D0%B5%D0%BC%D0%B0%D1%8F%20%D0%B2%D0%B5%D0%BB%D0%B8%D1%87%D0%B8%D0%BD%D0%B0.%20%D0%9E%D1%82%D0%BD%D0%BE%D1%81%D1%8F%D1%89%D0%B0%D1%8F%D1%81%D1%8F%20%D0%BA%20%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B5,%D1%8D%D1%82%D0%BE%20%D0%BD%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B0%D0%B5%D0%BC%D1%8B%D0%B5%20%D0%B2%D0%B5%D0%BB%D0%B8%D1%87%D0%B8%D0%BD%D1%8B.%20%D0%9D%D0%B0%D0%BD%D0%BE%D0%BC%D0%B5%D1%82%D1%80%20(%D0%BD%D0%BC)
# https://ru.wikipedia.org/wiki/%D0%9A%D0%B2%D0%B0%D0%BD%D1%82%D0%BE%D0%B2%D0%B0%D1%8F_%D0%BD%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B0%D0%B5%D0%BC%D0%B0%D1%8F
# http://eos.ibi.spb.ru/umk/1_7/5/5_R1_T4.html#5
# https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D0%BD%D0%B5%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8
# https://ru.wikipedia.org/wiki/%D0%9A%D0%B2%D0%B0%D0%BD%D1%82%D0%BE%D0%B2%D0%B0%D1%8F_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%BA%D0%B0#%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D0%BD%D0%B5%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8_%D0%93%D0%B5%D0%B9%D0%B7%D0%B5%D0%BD%D0%B1%D0%B5%D1%80%D0%B3%D0%B0
# https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D1%81%D1%83%D0%BF%D0%B5%D1%80%D0%BF%D0%BE%D0%B7%D0%B8%D1%86%D0%B8%D0%B8_(%D0%BA%D0%B2%D0%B0%D0%BD%D1%82%D0%BE%D0%B2%D0%B0%D1%8F_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%BA%D0%B0)
# https://ru.wikipedia.org/wiki/%D0%A3%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_%D0%A8%D1%80%D1%91%D0%B4%D0%B8%D0%BD%D0%B3%D0%B5%D1%80%D0%B0
# https://ru.wikipedia.org/wiki/%D0%A2%D1%83%D0%BD%D0%BD%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D1%8D%D1%84%D1%84%D0%B5%D0%BA%D1%82
# http://purple.iptm.ru/mfti/dis/VKR_Mantulnikov.pdf
# https://ru.wikipedia.org/wiki/%D0%9A%D0%B2%D0%B0%D0%B7%D0%B8%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D0%BF%D1%80%D0%B8%D0%B1%D0%BB%D0%B8%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5
# https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D0%B2%D0%BE%D0%B7%D0%BC%D1%83%D1%89%D0%B5%D0%BD%D0%B8%D0%B9#%D0%92_%D0%BA%D0%B2%D0%B0%D0%BD%D1%82%D0%BE%D0%B2%D0%BE%D0%B9_%D0%BC%D0%B5%D1%85%D0%B0%D0%BD%D0%B8%D0%BA%D0%B5
# https://studopedia.su/15_66947_spin-printsip-pauli.html
# https://docs.yandex.ru/docs/view?tm=1634691932&tld=ru&lang=ru&name=%D0%B0%D1%82%D0%BE%D0%BC%D0%BD%D0%B0%D1%8F%2C%20%D1%8F%D0%B4%D0%B5%D1%80%D0%BD%D0%BD%D0%B0%D1%8F%20%D1%84%D0%B8%D0%B7%D0%B8%D0%BA%D0%B0.pdf&text=%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F%20%D0%B0%D1%82%D0%BE%D0%BC%D0%B0%20%D0%B2%D0%BE%D0%B4%D0%BE%D1%80%D0%BE%D0%B4%D0%B0&url=https%3A%2F%2Fmoodle.herzen.spb.ru%2Fpluginfile.php%2F143527%2Fmod_resource%2Fcontent%2F1%2F%25D0%25B0%25D1%2582%25D0%25BE%25D0%25BC%25D0%25BD%25D0%25B0%25D1%258F%252C%2520%25D1%258F%25D0%25B4%25D0%25B5%25D1%2580%25D0%25BD%25D0%25BD%25D0%25B0%25D1%258F%2520%25D1%2584%25D0%25B8%25D0%25B7%25D0%25B8%25D0%25BA%25D0%25B0.pdf&lr=63&mime=pdf&l10n=ru&sign=713b1b30605ea528eae35f036442bb62&keyno=0&nosw=1
# http://aes.pp.ua/RSafety/P02-05.htm
# http://ens.tpu.ru/POSOBIE_FIS_KUSN/%D0%AD%D0%BB%D0%B5%D0%BA%D1%82%D1%80%D0%BE%D1%81%D1%82%D0%B0%D1%82%D0%B8%D0%BA%D0%B0.%20%D0%9F%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%BD%D1%8B%D0%B9%20%D0%A2%D0%BE%D0%BA/08-1.htm
# http://www.physbook.ru/index.php/SA._%D0%A2%D0%BE%D0%BA_%D0%B2_%D0%B3%D0%B0%D0%B7%D0%B0%D1%85
# http://hemi.nsu.ru/ucheb127b.htm
# https://kto.guru/biologia/994-jadernye-i-termojadernye-reakcii.html
# https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D1%84%D0%B5%D0%BA%D1%82_%D0%BC%D0%B0%D1%81%D1%81%D1%8B
Task:
Корреляционный анализ. Корреляционная и автокорреляционная функции.
# Методы Обработки Сигналов И Данных.
Decision:
Корреляционный анализ — метод обработки статистических данных, с помощью которого измеряется теснота связи между двумя или более переменными. Корреляционный анализ тесно связан с регрессионным анализом (также часто встречается термин «корреляционно-регрессионный анализ», который является более общим статистическим понятием), с его помощью определяют необходимость включения тех или иных факторов в уравнение множественной регрессии, а также оценивают полученное уравнение регрессии на соответствие выявленным связям (используя коэффициент детерминации).
Применение возможно при наличии достаточного количества наблюдений для изучения. На практике считается, что число наблюдений должно не менее чем в 5-6 раз превышать число факторов (также встречается рекомендация использовать пропорцию, не менее чем в 10 раз превышающую количество факторов). В случае если число наблюдений превышает количество факторов в десятки раз, в действие вступает закон больших чисел, который обеспечивает взаимопогашение случайных колебаний.
Необходимо, чтобы совокупность значений всех факторных и результативного признаков подчинялась многомерному нормальному распределению. В случае если объём совокупности недостаточен для проведения формального тестирования на нормальность распределения, то закон распределения определяется визуально на основе корреляционного поля. Если в расположении точек на этом поле наблюдается линейная тенденция, то можно предположить, что совокупность исходных данных подчиняется нормальному закону распределенияю
Исходная совокупность значений должна быть качественно однородной.
Сам по себе факт корреляционной зависимости не даёт основания утверждать, что одна из переменных предшествует или является причиной изменений, или то, что переменные вообще причинно связаны между собой, а не наблюдается действие третьего фактора.
Данный метод обработки статистических данных весьма популярен в экономике, астрофизике и социальных науках (в частности в психологии и социологии), хотя сфера применения коэффициентов корреляции обширна: контроль качества промышленной продукции, металловедение, агрохимия, гидробиология, биометрия и прочие. В различных прикладных отраслях приняты разные границы интервалов для оценки тесноты и значимости связи.
Популярность метода обусловлена двумя моментами: коэффициенты корреляции относительно просты в подсчете, их применение не требует специальной математической подготовки. В сочетании с простотой интерпретации, простота применения коэффициента привела к его широкому распространению в сфере анализа статистических данных.
Автокорреляционная функция — зависимость взаимосвязи между функцией (сигналом) и её сдвинутой копией от величины временного сдвига.
Для детерминированных сигналов автокорреляционная функция (АКФ) сигнала f(t) определяется интегралом:
Ψ(τ)=∫f(t)*(f∗)*(t−τ)dt
и показывает связь сигнала (функции f(t) с копией самого себя, смещённого на величину τ. Звёздочка означает комплексное сопряжение.
Для случайных процессов АКФ случайной функции X(t) имеет вид:
K(τ)=E{X(t)*(X∗)*(t−τ)},
где E {} — математическое ожидание, звёздочка означает комплексное сопряжение.
Если исходная функция строго периодическая, то на графике автокорреляционной функции тоже будет строго периодическая функция. Таким образом, из этого графика можно судить о периодичности исходной функции, а, следовательно, и о её частотных характеристиках. Автокорреляционная функция применяется для анализа сложных колебаний, например, электроэнцефалограммы человека.
Зависящая от времени корреляция двух случайных функций X(t) и Y(t)определяется как:
C(t, t′)=⟨X(t)*Y(t′)⟩
где угловые скобки обозначают процедуру усреднения.
Если корреляционная функция вычисляется для одного и того же процесса, она называется автокорреляционной:
Cauto(t,t′)=⟨X(t)*X(t′)⟩
Аналогично можно вычислить корреляционную функцию для процессов, происходящих в разных точках пространства в различные моменты времени:
C(t,r,t′,r′)=⟨X(t,r)*Y(t′,r′)⟩
Корреляционные функции широко используются в статистической физике и других дисциплинах, изучающих случайные (стохастические) процессы.
В статистической физике корреляционная функция описывает, как микроскопические переменные (например, скорости движения атомов) связаны в различных точках пространства в различные моменты времени. Наиболее общее определение имеет следующий вид:
G(r,R,t,τ)=⟨f1(R,t)*f2(R+r,t+τ)⟩
где f1,f2 - функции, корреляции которых мы хотим изучить, угловые скобки означают усреднение по статистическому ансамблю (например, по каноническому).
Если мы интересуемся тем, скореллировано ли меняются микроскопические переменные в один и тот же момент времени в различных точках пространства, мы можем рассматривать функции f1, f2 в один и тот же момент времени, тогда их корреляционная функция запишется в виде:
G(r,R,t)=⟨f1(R,t)f2(R+r,t)⟩
такая корреляционная функция называется одновременной.
Аналогично можно ввести одновременную корреляционную функцию для случая, когда функций f1, f2 не две, а s штук:
G^(s)(r1,...,rn)=⟨f1(r1,t) ... fs(rn,t)⟩
Иногда требуется рассмотреть временную эволюцию микроскопических переменных. Для этого используется пространственная корреляционная функция:
G(R,t,τ)=⟨f1(R,t)f2(R,t+τ)⟩
При этом важно понимать, что несмотря на то, что в равновесии некоторые макроскопические переменные не зависят от времени, микроскопические переменные (такие, как, например, вектор скорости частицы) могут зависеть от времени и поэтому подобные корреляционные функции, являющиеся по сути макроскопическими величинами, тоже могут зависеть от времени. 
Task:
Дискретизация сигналов. Ошибка квантования. Теорема Котельникова. Дискретизация и наложение спектров.
# Методы Обработки Сигналов И Данных.
Decision:
Дискретизацией называется замена непрерывного сигнала дискретными отсчетными значениями (отсчетами), взятыми через определенный интервал времени – интервал дискретизации TД.
Дискретный сигнал x (t) Д с математической точки зрения можно рассматривать как результат перемножения функций x(t) и u(t).
Операция квантования сводится к тому, что всем отсчетам входного сигнала x, попавшим в некоторый интервал, приписывается одно и то же значение x ,
выражаемое двоичной кодовой комбинацией. Если кодовая комбинация содержит r разрядов, то число дискретных уровней
выходного сигнала квантователяравно 2^r .
Для взаимно однозначного соответствия весь диапазон изменения входного сигнала
X=xmax–xmin
должен быть разбит на такое же количество уровней.
Величина интервала разбиения - шаг квантования - представляет собой значение аналоговой величины, на которую отличаются уровни входного сигнала,
представленные двумя соседними кодовыми комбинациями.
При наиболее распространенном равномерном квантовании шаг квантования равен
Δ=X/(2^r)
Характеристикой квантования называется зависимость квантованного значения xi от значения непрерывной величины x.
Типичная характеристика квантователяс постоянном шагом квантования:
Временная последовательность ошибок квантования случайного сигнала представляет собой случайный процесс с равномерным законом распределения.
Этот случайный процесс называют шумом квантования. Абсолютное значение ошибки квантования не превышает Δ/2.
Фундаментальной основой теории обработки сигналов служит теорема Котельникова (теорема Найквиста, теорема отсчетов), которая доказывает, что если fm – самая высокая частота в спектре функции x(t), то функция полностью определяется последовательностью своих значений, если выборка осуществляется с частотой не меньшей, чем 2*fm.
Эффекты частотной неоднозначности при неправильном выборе частоты дискретизации.
В восстановленном сигнале будут отсутствовать искажения, если:
АЧХ фильтра равномерна в интервале частот от F1 до Fmax,
ФЧХ линейна в том же диапазоне частот,
коэффициент передачи равен нулю на частотах F >= FД - Fmax
Реализовать такой фильтр можно только при условии FД - Fmax >= Fmax
Из приведенного неравенства вытекает известное соотношение Котельникова, позволяющее выбрать частоту дискретизации FД >= 2 Fmax
Если это условие не выполняется, то возникает наложениеспектров.
Эффект наложения спектров иллюстрируется рисунком выше. Из него видно, что в полосу пропускания фильтра неизбежно попадает спектральная составляющая, которой нет в спектре исходного аналогового сигнала. Это вызывает искажение восстановленного сигнала
Task:
Спектральное представление сигналов. Дискретное и непрерывное преобразование Фурье.
# Методы Обработки Сигналов И Данных.
Decision:
Любой сигнал можно разложить на составляющие. Такое разложение сигнала называется спектральным. При этом сигнал можно представить в виде графика зависимости параметров сигнала от частоты, такая диаграмма называется спектральной или спектром сигнала.
Спектр сигнала — это совокупность простых составляющих сигнала с определенными амплитудами, частотами и начальными фазами.
Между спектром сигнала и его формой существует жесткая взаимосвязь: изменение формы сигнала приводит к изменению его спектра и наоборот, любое изменение спектра сигнала приводит к изменению его формы. Это важно запомнить, поскольку при передаче сигналов в системе передачи, они подвергаются преобразованиям, а значит, происходит преобразование их спектров.
Различают два вида спектральных диаграмм:
спектральная диаграмма амплитуд;
спектральная диаграмма фаз.
В спектральной диаграмме амплитуд — отображаются все составляющие со своими амплитудами и частотами.
В спектральной диаграмме фаз — отображаются все составляющие со своими начальными фазами и частотами.
Любой сигнал имеет одну спектральную диаграмму амплитуд и одну спектральную диаграмму фаз, в составе которых может содержаться множество составляющих.
Не зависимо от того, какой спектр (амплитуд или фаз), он изображается в виде множества линий — составляющих. В спектре амплитуд высота спектральной линии равна амплитуде составляющей сигнала, а в спектре фаз — начальной фазе составляющей. Причем: в спектре амплитуд все составляющие имеют положительные значения, а в спектре фаз как положительные, так и отрицательные. Если амплитуда спектральной составляющей имеет отрицательный знак, то в спектре амплитуд она берется по модулю, а в спектре фаз знак составляющей изменяется на противоположный.
Непрерывное преобразование само фактически является обобщением более ранней идеи рядов Фурье, которые определены для 2 π {\displaystyle 2\pi } 2\pi -периодических функций и представляют собой разложение таких функций в (бесконечную) линейную комбинацию гармонических колебаний с целыми частотами:
f(x)= Σ(fn*e^(i*n*x)
Разложение в ряд Фурье применимо также к функциям, заданным на ограниченных промежутках, поскольку такие функции могут быть периодически продолжены на всю прямую.
Ряд Фурье является частным случаем преобразования Фурье, если последнее понимать в смысле обобщённых функций. Для любой 2*π-периодической функции имеем
f(ω)=sqrt(2*π)Σ(fn*δ*(ω−n))
Иными словами, преобразование Фурье периодической функции представляет собой сумму точечных нагрузок в целых точках и равно нулю вне их.
Дискретное преобразование Фурье - преобразование конечных последовательностей (комплексных) чисел, которое, как и в непрерывном случае, превращает свёртку в поточечное умножение. Используется в цифровой обработке сигналов и в других ситуациях, где необходимо быстро выполнять свёртку, например, при умножении больших чисел.
Пусть x0, x1, … , xn−1 - последовательность комплексных чисел. Рассмотрим многочлен f(t)=x0+x1*t+x2*t^2+...+(xn-1)*t^(n-1). Выберем какие-нибудь n точек на комплексной плоскости z0, z1, ... , zn-1. Теперь многочлену f(t) мы можем сопоставить новый набор из n чисел: f0:=f(z0), f1:=f(z1), ..., (fn-1):=f(zn-1). Заметим, что это преобразование обратимо: для любого набора чисел f0, f1, ...,fn−1 существует единственный многочлен f(t) степени не выше n-1 с такими значениями в z0, ..., zn-1 соответственно.
Набор {fk} и называется дискретным преобразованием Фурье исходного набора {xk}. В качестве точек zk обычно выбирают корни n-й степени из единицы:
zk=e^(2*πi*k/n).
Такой выбор продиктован тем, что в этом случае обратное преобразование принимает простую форму, а также тем, что вычисление преобразования Фурье может быть выполнено особенно быстро. Так, в то время как вычисление свёртки двух последовательностей длины n напрямую требует порядка n^2 операций, переход к их преобразованию Фурье и обратно по быстрому алгоритму может быть выполнен за O(n*logn) операций. Для преобразований Фурье свёртке соответствует покомпонентное умножение, которое требует лишь порядка n операций.
Task:
Среднее и среднеквадратическое отклонение. Распределение Гаусса. Проверка статистических гипотез.
# Методы Обработки Сигналов И Данных.
Decision:
Среднеквадратическое отклонение равно квадратному корню из дисперсии: σ=sqrt(D). При определении среднего квадратического отклонения при достаточно большом объеме изучаемой совокупности (n > 30) применяются формулы:
σ=sqrt(Σ((х1-x)^2)/n) - среднее квадратическое отклонение простое (или невзвешенное);
σ=sqrt(Σ((х1-x)^2*fi)/Σfi) - среднее квадратическое отклонение взвешенное, где: xi – значения изучаемого признака (варианты); n – объем статистической совокупности; x – средняя арифметическая величина.
Среднее квадратическое отклонение характеризует разброс значений относительно среднего (математического ожидания). Обозначается как σ(x) или s(x).
Свойства среднего квадратическоо отклонения:
σ(const)=0
σ(x)≥0
σ(k*x)=k*σ(x)
Среднее квадратическое отклонение суммы или разности двух независимых случайных величин равна квадратному корню от суммы квадратов квадратических отклонений этих величин.
σ(X1+X2+...+Xn)=sqrt((σ^2)*X1+(σ^2)*X2+...+(σ^2)*Xn)
Рассчитать среднеквадратическое отклонение можно разными калькуляторами, в зависимости от исходных данных. Ниже представлены наиболее распространенные из них.
Среднее квадратическое отклонение в рядах распределения:
Равномерное распределение. Дисперсия: D[X]=((b-a)^2)/12. Среднеквадратическое отклонение: σ=sqrt(D)
Нормальное распределение / Распределение Гаусса. Дисперсия: D[X] = σ^2. σ^2=Σ((х1-x)^2*ni)/Σni. Среднеквадратическое отклонение: σ=sqrt(D)
Показательное распределение. Дисперсия: D[X] = 1/(λ^2). Среднеквадратическое отклонение: σ=sqrt(D)
Распределение Пуассона. Дисперсия: D[X]=Σ((х1-λ)^2*ni)/Σni. Среднеквадратическое отклонение: σ=sqrt(D)
Биномиальное распределение. Дисперсия: D[X]=∑(xi^2)*Pi-M[x]^2. Среднеквадратическое отклонение: σ=sqrt(D)
В современном мире мы обладаем все большим и большим объемом данных о событиях, происходящих вокруг. Зачастую у нас появляются вопросы, на которые хотелось бы быстро ответить на основе имеющейся информации, для этого как нельзя лучше подходит процесс, связанный с проверкой статистических гипотез. Однако, многие считают, что это занятие подразумевает под собой большое число вычислений и в принципе довольно сложно для понимания. На самом деле, алгоритм проверки гипотез достаточно прост, а для осуществления расчетов с каждым годом появляется все больше и больше готовых инструментальных средств, не требующих от человека глубоких познаний в области. Далее я попытаюсь показать, что мало того, что процесс проверки гипотез может быть полезным, так и осуществляется достаточно быстро и без серьезных усилий.
Статистическая гипотеза - это предположение о каких-либо характеристиках случайной величины. Например: существенно ли изменение числа AI-стартапов в Европе в два разных года и т. д.
Проверка статистических гипотез является важнейшим классом задач математической статистики. С помощью данного инструмента можно подтвердить или отвергнуть предположение о свойствах случайной величины путем применения методов статистического анализа для элементов выборки. Если в предыдущем предложении какие-либо термины являются не совсем понятными, ниже можно найти пояснение на простом языке.
Случайная величина - это величина, которая в зависимости от той или иной ситуации принимает конкретные значения с определенными вероятностями. Примеры: отметка на экзамене; результат игры в кости; количество AI-стартапов по странам Европы. В общем, почти все что угодно!
Генеральная совокупность - совокупность всех объектов для анализа. Например: все AI-стартапы в Европе в 2019-м году.
Выборка - часть данных из генеральной совокупности. Например: официально зарегистрированные AI-стартапы в некоторых странах Европы в 2019-м году.
Статистический анализ - использование различных методов для того, чтобы определить свойства генеральной совокупности по выборке.
Для проверки статистических гипотез зачастую применяются статистические тесты, о которых будет рассказано далее.
В обобщенном виде алгоритм выглядит таким образом:
Формулировка основной (H0) и альтернативной (H1) гипотез
Выбор уровня значимости
Выбор статистического критерия
Определения правила принятия решения 
Итоговое принятие решения на основе исходной выборки данных
Данные шаги являются унифицированными и схему можно использовать почти во всех случаях. Далее подробнее рассмотрим пример работы данного алгоритма на конкретных данных.
Source:
# https://math.semestr.ru/group/standard-deviation.php
# https://habr.com/ru/post/558836/
# https://conture.by/post/592
# https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B5%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%A4%D1%83%D1%80%D1%8C%D0%B5#%D0%A0%D1%8F%D0%B4%D1%8B_%D0%A4%D1%83%D1%80%D1%8C%D0%B5
# https://fks.mirea.ru/wp-content/uploads/Items/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F_%D1%8D%D0%BA%D1%81%D0%BF%D0%B5%D1%80%D0%B8%D0%BC%D0%B5%D0%BD%D1%82%D0%B0/9_Auto_Phy_9-quantdiscr_18.pdf
# https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%80%D1%80%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D1%8F#%D0%9A%D0%BE%D1%80%D1%80%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D1%8B%D0%B9_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7
# https://ru.wikipedia.org/wiki/%D0%90%D0%B2%D1%82%D0%BE%D0%BA%D0%BE%D1%80%D1%80%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F
# https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%80%D1%80%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F
Task:
Кинетическая теория газов. Уравнение состояния идеального газа (с выводом с помощью распределения Максвелла). Уравнение Ван-де-Ваальса.
# Термодинамика И Статистическая Физика.
Decision:
Кинетическая теория газов изучает свойства газов статистич. методами на основе представлений об их молекулярном (атомном) строении и определённом законе взаимодействий частиц газа. Осн. объекты изучения К. т. г. – газы, их смеси, а также плазма. Основы К. т. г. заложены в трудах Дж. Максвелла и Л. Больцмана во 2-й пол. 19 в.
В газах ср. расстояние между молекулами много больше их размеров, что позволяет им двигаться почти свободно в промежутках между столновениями, при которых резко меняется величина и направление скорости. Время столкновения много меньше времени движения молекул между столкновениями – времени их свободного пробега.
В К. т. г. наблюдаемые макроскопич. явления – давление газа, диффузия, теплопроводность и т. п. – представляются как результат усреднённого движения всех его молекул. Для вычисления давления и соответствующих кинетических коэффициентов нужно знать функцию распределения f(v,r,t) молекул газа по скоростям и пространственным координатам. Произведение f(v,r,t)dvdr определяет вероятностное число молекул, находящихся в момент времени t в элементе объёма dr=dxdydz вблизи точки r и обладающих скоростями, близкими к значению v. Плотность частиц в точке r в момент времени t равна
n(r,t)=∫f(v,r,t)dv
Осн. задача К. т. г. – определение явного вида функции f(v,r,t), позволяющей вычислять ср. значения характеристик газа и процессов переноса в нём. Для газа, подчиняющегося законам классич. механики, в состоянии статистич. равновесия функция f представляет собой Максвелла распределение:
f(v)=n(m/2*π*k*T)^(2/3)*exp((−m*v^2)/(2*k*t)),
где m – масса молекулы, T – абсолютная темп-ра газа, k – постоянная Больцмана.
Процессы переноса энергии, импульса, массы и т. п. происходят гл. обр. при парных столкновениях молекул (атомов). Расчёт числа парных столкновений основан на гипотезе «молекулярного хаоса», предполагающей отсутствие корреляций между скоростями этих молекул, т. е. для газов малой плотности. Важную роль в этих процессах играет ср. длина свободного пробега молекул l, т. е. расстояние, которое проходит молекула за ср. время между столкновениями, двигаясь со ср. скоростью v1: l=v1/ν, где ν=n^(−1)∫dv.
Последовательная К. т. г. основана на решении кинетического уравнения Больцмана, с помощью которого можно получить уравнение переноса импульса (Навье – Стокса уравнение), уравнения теплопроводности, диффузии и вычислить их коэффициенты. Кинетич. уравнение Больцмана при отсутствии внешних сил описывает эволюцию системы к состоянию равновесия. При решении кинетич. уравнения Больцмана для определённых задач исходят из модельных представлений о взаимодействии молекул (модель жёстких упругих молекул, модель молекул как центров сил притяжения–отталкивания и т. д.). Наиболее часто используют метод Чепмена – Энскога, его равновесным стационарным решением является распределение Максвелла.
В плазме, где существенными становятся кулоновские взаимодействия частиц друг с другом, нельзя говорить о парных столкновениях, т. к. каждая частица одновременно взаимодействует с большим числом частиц. Однако и в этом случае можно получить кинетич. уравнение, если учесть, что, как правило, изменение импульса частицы при столкновении малo (см. Кинетические уравнения для плазмы).
Это уравнение, связывающее основные термодинамические величины в модели газа Ван-дер-Ваальса.
Хотя модель идеального газа хорошо описывает поведение реальных газов при низких давлениях и высоких температурах, в других условиях её соответствие с опытом гораздо хуже. В частности, это проявляется в том, что реальные газы могут быть переведены в жидкое и даже в твёрдое состояние, а идеальные — не могут.
Для более точного описания поведения реальных газов при низких температурах была создана модель газа Ван-дер-Ваальса, учитывающая силы межмолекулярного взаимодействия. В этой модели внутренняя энергия U становится функцией не только температуры, но и объёма.
Уравнение Ван-дер-Ваальса — это одно из широко известных приближённых уравнений состояния, описывающее свойства реального газа, имеющее компактную форму и учитывающее основные характеристики газа с межмолекулярным взаимодействием.
Термическим уравнением состояния (или, часто, просто уравнением состояния) называется связь между давлением, объёмом и температурой.
Для одного моля газа Ван-дер-Ваальса оно имеет вид:
(p+a/(Vm^2))*(Vm−b)=R*T,
где
p — давление,
Vm — молярный объём,
T — абсолютная температура,
R — универсальная газовая постоянная.
Видно, что это уравнение фактически является уравнением состояния идеального газа с двумя поправками. Поправка a учитывает силы притяжения между молекулами (давление на стенку уменьшается, так как есть силы, втягивающие молекулы приграничного слоя внутрь), поправка b — суммарный объём молекул газа.
Для ν молей газа Ван-дер-Ваальса уравнение состояния выглядит так:
(p + (a*ν^2)/V^2)(V−b*ν)=ν*R*T,
где
V — объём.
Изотермы газа ван дер Ваальса:
P — давление;
V — объём;
K — критическая точка;
abKcd — бинодаль (граница области двухфазного равновесия; область под колоколом бинодали — область двухфазного равновесия жидкость — пар);
eKf — спинодаль (граница между областями метастабильных и термодинамически неустойчивых состояний; область под колоколом спинодали — нереализуемые состояния);
bc — коннода (линия конденсации);
abKe — область перегретой жидкости;
dcKf — область переохлаждённого пара;
площади закрашенных фигур под изобарой bc и над ней равны (правило Максвелла, 1875)
Из рисунка, на котором изображены изотермы газа Ван-дер-Ваальса, видно, что ниже некоторой температуры зависимость p(V) перестаёт быть монотонной: образуется петля Ван-дер-Ваальса, в которой увеличению давления соответствует увеличение объёма, что противоречит законам термодинамики. Появление петли означает, что уравнение Ван-дер-Ваальса в данной области изменения p и V перестаёт описывать действительную ситуацию, когда имеет место фазовый переход газ — жидкость и реальная изотерма представляет собой отрезок прямой — конноду (ноду), соединяющую две фигуративные точки на бинодали.
Task:
Закон возрастания энтропии. Формула Больцмана для энтропии.
# Термодинамика И Статистическая Физика.
Decision:
В рамках равновесной термодинамики можно сделать ряд выводов об общих закономерностях, приводящих к равновесию неравновесную систему. Пусть неравновесная замкнутая система обладает энергией E. Разобьем эту систему на подсистемы – квазизамкнутые макроскопические подсистемы с энергиями Ei. При этом энергия замкнутой системы равна:
Е=Е1+Е2+...+Ei+...=const (1)
Маленькие подсистемы достигают равновесия быстрее, чем большие. Поэтому возможна ситуация, когда каждая из малых подсистем достигла своего равновесия, но между подсистемами равновесия еще нет. Большая замкнутая система при этом еще не равновесна.
Макроскопическое состояние каждой квазизамкнутой равновесной подсистемы описывается вероятностью ΔPEi и выражается через энтропию подсистемы Si(<Ek>). Данное состояние неравновесной замкнутой системы по теореме об умножении вероятностей определяется вероятностью 
ΔPE(E1,E2,...)=ΔPE(Ek).
где Еk определяет некоторый набор энергий подсистем. Тогда вероятность неравновесной замкнутой системы иметь некоторый набор энергий подсистем равна произведению всех ΔPEi:
ΔPE(Ek)~ΔPE1*ΔPE2*...*ΔPEi*... (2)
ΔPE(Ek)~exp[S1(<E1>)+S2(<E2>)+...Si(<Ei>)+...] (3)
Здесь exp[Si(<Ei>)] – быстро меняющаяся функция энергии <Ei> , а все остальные опущенные множители меняются слабо с энергией и на фоне резкой экспоненциальной зависимости их можно считать постоянными.
Нас интересует процесс установления равновесия между подсистемами, приводящий замкнутую систему в равновесие. Здесь средние энергии подсистем <Ei> рассматриваем как переменные энергии, по которым устанавливается равновесие между подсистемами. Наиболее вероятное равновесное состояние системы достигается при максимальном значении суммы энтропии подсистем, стоящих в экспоненте. Если сумма энтропии растет, то соответствующая вероятность ΔPE растет очень быстро.
В рамках классической термодинамики нельзя получить информацию о скорости достижения равновесия, т.е. нельзя найти время релаксации. Однако можно установить общее направление процессов, которое приводит к росту вероятности. Процессы, связанные с уменьшением энтропии, маловероятны, т.к. ΔPE резко убывает (по экспоненциальному закону).
Итак, вывод: если замкнутая макроскопическая система находится в неравновесном состоянии, то наиболее вероятным следствием для нее будет монотонное возрастание энтропии. 
Закон возрастания энтропии для замкнутых систем – это второе начало термодинамики:
dS/dt>=0 (4)
Второе начало было введено сначала Клаузиусом, а затем вероятностное толкование закона возрастания энтропии было дано Больцманом (1870). Больцман писал: “...всегда имеются флуктуационные состояния, соответствующие уменьшению энтропии, и поэтому чрезвычайно маловероятные. Вероятность их настолько
мала, что для макроскопических тел эти флуктуации не наблюдаются”.
Во всех имеющихся в природе замкнутых системах энтропия никогда самопроизвольно не убывает, она увеличивается или остается постоянной dS/dt>=0. Закон возрастания энтропии (4) устанавливает определенное направление течения процессов в природе.
Определение энтропии
Энтропия термодинамической системы определяется как величина, пропорциональная натуральному логарифму от числа различных микросостояний P, соответствующих данному макроскопическому состоянию (например, состоянию с заданной полной энергией).
S=k*ln(P), k = R/N = 1,38*10-23 Дж/К,(1)
Коэффициент пропорциональности k и есть постоянная Больцмана. Это выражение, определяющее связь между микроскопическими (P) и макроскопическими состояниями (S), выражает центральную идею статистической механики. R = 8,31 Дж/(моль*К) - молярная газовая постоянная; N = 6,06*10^23 моль^(-1) - число Авогадро;
Р - статистический вес: число способов осуществления данного состояния.
Параметр S - энтропия - служит мерой рассеяния энергии Вселенной, а Р - характеризует любые самопроизвольные изменения, эта величина относится к миру атомов, определяющих скрытый механизм изменения. Итак, формула (1), вывод которой дан отдельно, связывает энтропию с хаосом.
В условиях равновесия энтропия - функция состояния системы, которую можно измерить или вычислить теоретически. Но стоит изолированной системе отклониться от равновесия - возникает свойство энтропии - она только возрастает.
Представим формулу (1) в виде
P = e^(S/K)
и обратим внимание на то, что статистический вес состояния системы P экспоненциально растет с ростом S. Иными словами, менее упорядоченное состояние (больший хаос) имеет больший статистический вес*, т. к. оно может быть реализовано большим числом способов. Следовательно, энтропия - мера неупорядоченности системы.
Из-за случайных перекладываний растет беспорядок на столе, в комнате. Порядок создается искусственно, беспорядок - самопроизвольно, т. к. ему отвечает большая вероятность, большая энтропия. Разумная деятельность человека направлена на преодоление разупорядоченности.
Обратим внимание на то, что первое начало термодинамики (закон сохранения энергии) - закон абсолютно строгий, это детерминированный закон. Второе начало термодинамики - закон возрастания энтропии - закон статистический (вероятностный).
Существует даже вероятность того, что молекулы, находящиеся в кубике размером 1 см^3 могут все собраться в одной половине этого кубика. Вероятность для одной молекулы находиться в правой части кубика: q1=1/2. При нормальных условиях в 1 см^3 содержится число молекул 2,7*10^19 (число Лошмидта), тогда вероятность того, что все молекулы соберутся в правую половину кубика равна (1/2)^(2,7*10)^19. Это исчезающе малая величина.
Работа Больцмана - прорыв в совершенно новую область: в физику вошла вероятность, статистические законы. Это значит, что хотя и редко, но энтропия может и убывать.
Task:
Распределение Максвелла и его свойства. Распределение Больцмана. Барометрическая формула.
# Термодинамика И Статистическая Физика.
Decision:
Распределение Максвелла — общее наименование нескольких распределений вероятности, которые описывают статистическое поведение параметров частиц идеального газа. Вид соответствующей функции плотности вероятности диктуется тем, какая величина: скорость частицы, проекция скорости, модуль скорости, энергия, импульс и т. д. — выступает в качестве непрерывной случайной величины. В ряде случаев распределение Максвелла может быть выражено как дискретное распределение по множеству уровней энергии.
Наиболее значимое распределение Максвелла записывается для модуля скорости частицы v в непрерывном случае и имеет плотность:
fv(x) = B*x^2*exp[−β*x^2](x ≥ 0) и fv(x) = 0 ( x < 0 ) ,
где x — формальная переменная, фактор β > 0 определяется типом частиц и температурой, а множитель B подбирается в зависимости от β для обеспечения нормировки. Именно это выражение считается максвелловским распределением в математике, хотя для других параметров частиц аналитический вид распределения Максвелла будет иным.
Распределение Максвелла лежит в основе кинетической теории газов, объясняющей многие фундаментальные свойства газов, включая давление и диффузию. С его помощью вычисляются средние и наиболее вероятные скорости и энергии молекул газа. Оно также применимо для описания электронных процессов переноса и других явлений в физике и химии. Распределение Максвелла может быть получено при помощи статистической механики (см. происхождение статсуммы). Данное распределение является реализующимся с наивысшей вероятностью распределением изучаемого параметра.
1). При v = 0 множитель v^2 функции F(v) обращает ее в ноль. Это означает, что нет молекул, которые не двигались бы.
2). При v > 0 функция F(v) растет за счет множителя v^2. Кривая имеет максимум. Это означает, что существует определенная скорость движения молекул, такая, что вблизи нее на данный интервал dV приходится наибольшая часть молекул. Эта скорость называется наиболее вероятной Vвер.:
Vвер=sqrt(2*k*T/m0) (1.27)
Из распределения Максвелла вытекает, что средняя квадратичная скорость выражается
V=sqrt(3*k*T/m0)(1.28)
Если учесть, что p*V = RT, R = k*NA, μ = m0NA, а ρ = μ/Vμ, то из получим другую формулу для средней квадратичной скорости – через макроскопические величины – давление p и плотность ρ:
V=sqrt((3*p)/ρ) (1.29)
Средняя кинетическая энергия поступательного движения молекул определяется средней квадратичной скоростью.
Средняя арифметическая скорость движения молекул, исходя из распределения Максвелла:
<v>=sqrt(8*k*T/m0*π) (1.31)
3.) При v → ∞ кривая быстро стремится к нулю за счет экспоненциального множителя. То есть кривая не симметрична: спад кривой в одну сторону больше, чем в другую.
Как видно из формулы (1.26) и рис. 1.5 вероятность dWv равна площади заштрихованной полоски. Ясно, что вероятность того, что молекула имеет любую скорость, равна сумме площадей всех тонких полосок и, таким образом, площади, ограниченной графиком F(v) и осью скоростей. А площадь этой фигуры не что иное, как интеграл, который, согласно условию нормировки (1.19) и соотношению(1.26), равен единице:
∫F(v)dv=∫dWv=1 (1.32)
Распределение Максвелла сильно зависит от температуры (рис. 1.6): при увеличении температуры максимум функции F(v) смещается вправо Vвер~sqrt(T) и становится ниже F(Vвер)~1/sqrt(T).
Распределение Больцмана определяет распределение частиц в силовом поле в условиях теплового равновесия.
Пусть идеальный газ находится в поле консервативных сил в условиях теплового равновесия. При этом концентрация газа будет различной в точках с различной потенциальной энергией, что необходимо для соблюдения условий механического равновесия. Так, число молекул в единичном объеме n убывает с удалением от поверхности Земли, и давление, в силу соотношения P = n*k*T, падает.
Если известно число молекул в единичном объеме, то известно и давление, и наоборот. Давление и плотность пропорциональны друг другу, поскольку температура в нашем случае постоянна. Давление с уменьшением высоты должно возрастать, потому что нижнему слою приходится выдерживать вес всех расположенных сверху атомов.
Исходя из основного уравнения молекулярно-кинетической теории: P = n*k*T, заменим P и P0 в барометрической формуле на n и n0 и получим распределение Больцмана для молярной массы газа:
n=n0*e^(-μ*g*h/R*T), (2.5.1)
где n0 и n - число молекул в единичном объёме на высоте h = 0 и h.
Так как μ=m*Na, а R=Na*k, то (2.5.1) можно представить в виде
n=n0*e^(-m*g*h/K*T). (2.5.2)
С уменьшением температуры число молекул на высотах, отличных от нуля, убывает. При T = 0 тепловое движение прекращается, все молекулы расположились бы на земной поверхности. При высоких температурах, наоборот, молекулы оказываются распределёнными по высоте почти равномерно, а плотность молекул медленно убывает с высотой. Так как m*g*h – это потенциальная энергия U, то на разных высотах U = m*g*h – различна. Следовательно, (2.5.2) характеризует распределение частиц по значениям потенциальной энергии:
n=n0*e^(U/(k*T)), (2.5.3)
– это закон распределения частиц по потенциальным энергиям – распределение Больцмана. Здесь n0 – число молекул в единице объёма там, где U = 0.
На рисунке 2.11 показана зависимость концентрации различных газов от высоты. Видно, что число более тяжелых молекул с высотой убывает быстрее, чем легких.
Из (2.5.3) можно получить, что отношение концентраций молекул в точках с U1 и i>U2 равно:
n1/n2=e^(-(U1-U2)/(k*T)). (2.5.4)
Больцман доказал, что соотношение (2.5.3) справедливо не только в потенциальном поле сил гравитации, но и в любом потенциальном поле, для совокупности любых одинаковых частиц, находящихся в состоянии хаотического теплового движения.
Рассмотрим ещё один очень важный закон.
Атмосферное давление на какой-либо высоте h обусловлено весом слоёв газа, лежащих выше. Пусть P – давление на высоте h , а P+dP – на высоте h+dh(рис. 2.9).
Причём, dh >0, а dР < 0, так как на большей высоте давление меньше. Разность давления P-(P+dP) равна весу газа, заключённого в объёме цилиндра с площадью основания равного единице и высотой dh.
Т.к. P=ρ*g*h где ρ=(P*μ)/(R*T) - плотность газа на высоте h, медленно убывающая с высотой, то можно записать:
P-(P+Dp)=ρ*gdh. 
Отсюда можно получить барометрическую формулу:
P=P0*e^((μ*g*h)/(R*T))(2.4.1)
где P0 – давление на высоте h = 0.
Из формулы (2.4.1) следует, что P убывает с высотой тем быстрее, чем тяжелее газ (чем больше μ) и чем ниже температура (например, на больших высотах концентрация легких газов Не и Н2 гораздо больше, чем у поверхности Земли).
На рисунке 2.10 изображены две кривые, которые можно трактовать, либо как соответствующие разным μ (при одинаковой Т), либо как отвечающие разным Т, при одинаковых μ.
Таким образом, чем тяжелее газ (больше μ) и чем ниже температура, тем быстрее убывает давление.
Task:
Фазовое пространство. Теорема Лиувилля.
Task:
Элементы теории вероятностей в применении к молекулярной физике. Плотность вероятности. Эргодическая гипотеза. Распределения Пуассона и Гаусса.
Task:
Термодинамические величины. Основные законы термодинамики. Термодинамические потенциалы. Адиабатические процессы.
Source:
# https://wiki/%D0%A2%D0%B5%D1%80%D0%BC%D0%BE%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5_%D0%B2%D0%B5%D0%BB%D0%B8%D1%87%D0%B8%D0%BD%D1%8B
# https://reshit.ru/zakony-termodinamiki
# https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%80%D0%BC%D0%BE%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5_%D0%BF%D0%BE%D1%82%D0%B5%D0%BD%D1%86%D0%B8%D0%B0%D0%BB%D1%8B
# https://ru.wikipedia.org/wiki/%D0%90%D0%B4%D0%B8%D0%B0%D0%B1%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81
# http://moodle32.lms.tpu.ru/pluginfile.php/4620/mod_resource/content/1/%D0%BC%D0%BE%D0%B4.2%20%D0%AD%D0%9B%D0%95%D0%9C%D0%95%D0%9D%D0%A2%D0%AB%20%D0%A1%D0%A2%D0%90%D0%A2%D0%98%D0%A1%D0%A2%D0%98%D0%A7%D0%95%D0%A1%D0%9A%D0%9E%D0%99%20%D0%A4%D0%98%D0%97%D0%98%D0%9A%D0%98.pdf
# https://ru.wikipedia.org/wiki/%D0%9F%D0%BB%D0%BE%D1%82%D0%BD%D0%BE%D1%81%D1%82%D1%8C_%D0%B2%D0%B5%D1%80%D0%BE%D1%8F%D1%82%D0%BD%D0%BE%D1%81%D1%82%D0%B8
# https://deru.abcdef.wiki/wiki/Ergodenhypothese
# https://ru.wikipedia.org/wiki/%D0%AD%D1%80%D0%B3%D0%BE%D0%B4%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%B3%D0%B8%D0%BF%D0%BE%D1%82%D0%B5%D0%B7%D0%B0
# https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%9F%D1%83%D0%B0%D1%81%D1%81%D0%BE%D0%BD%D0%B0
# https://ru.wikipedia.org/wiki/%D0%9D%D0%BE%D1%80%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D1%80%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5
# https://docviewer.yandex.ru/view/895416477/?page=3&*=XgudmN86Xx4uU4qqXh3DwninXG97InVybCI6Imh0dHA6Ly93d3cubGliLnVubi5ydS9zdHVkZW50cy9zcmMvR2F2cmlsZW5rbyZHcmFjaC5wZGYiLCJ0aXRsZSI6IkdhdnJpbGVua28iLCJub2lmcmFtZSI6dHJ1ZSwidWlkIjoiODk1NDE2NDc3IiwidHMiOjE2MzE2NzUwMTgzMDgsInl1IjoiNjQ3NzgwMDg3MTYyMTU1ODcyMSIsInNlcnBQYXJhbXMiOiJ0bT0xNjMxNjc1MDExJnRsZD1ydSZsYW5nPXJ1Jm5hbWU9R2F2cmlsZW5rbyZHcmFjaC5wZGYmdGV4dD0lRDElODQlRDAlQjAlRDAlQjclRDAlQkUlRDAlQjIlRDAlQkUlRDAlQjUrJUQwJUJGJUQxJTgwJUQwJUJFJUQxJTgxJUQxJTgyJUQxJTgwJUQwJUIwJUQwJUJEJUQxJTgxJUQxJTgyJUQwJUIyJUQwJUJFKyVEMSU4MiVEMCVCNSVEMSU4MCVEMCVCQyVEMCVCRSVEMCVCNCVEMCVCOCVEMCVCRCVEMCVCMCVEMCVCQyVEMCVCOCVEMCVCQSVEMCVCMCZ1cmw9aHR0cCUzQS8vd3d3LmxpYi51bm4ucnUvc3R1ZGVudHMvc3JjL0dhdnJpbGVua28lMjZHcmFjaC5wZGYmbHI9NjMmbWltZT1wZGYmbDEwbj1ydSZzaWduPTZmZGQyNjU4MWFkMTcyN2IwZDgzYjFmZTU4MDAzYTliJmtleW5vPTAifQ%3D%3D&lang=ru
# https://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%9C%D0%B0%D0%BA%D1%81%D0%B2%D0%B5%D0%BB%D0%BB%D0%B0
# https://studopedia.ru/7_42235_svoystva-raspredeleniya-maksvella.html
# http://ens.tpu.ru/POSOBIE_FIS_KUSN/%D0%9C%D0%BE%D0%BB%D0%B5%D0%BA%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D0%B0%D1%8F%20%D1%84%D0%B8%D0%B7%D0%B8%D0%BA%D0%B0.%20%D0%A2%D0%B5%D1%80%D0%BC%D0%BE%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D0%BA%D0%B0/02-5.htm
# http://ens.tpu.ru/POSOBIE_FIS_KUSN/%D0%9C%D0%BE%D0%BB%D0%B5%D0%BA%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D0%B0%D1%8F%20%D1%84%D0%B8%D0%B7%D0%B8%D0%BA%D0%B0.%20%D0%A2%D0%B5%D1%80%D0%BC%D0%BE%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D0%BA%D0%B0/02-4.htm
# https://physics.spbstu.ru/userfiles/files/molec1-09.pdf
# http://fn.bmstu.ru/data-physics/library/physbook/evg/ch3/texthtml/ch3_9.htm
# https://ru.wikipedia.org/wiki/%D0%92%D1%82%D0%BE%D1%80%D0%BE%D0%B5_%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE_%D1%82%D0%B5%D1%80%D0%BC%D0%BE%D0%B4%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D0%BA%D0%B8
# https://docviewer.yandex.ru/view/895416477/?page=8&*=h10fMS5iw%2FmndUiwXY1too2TYIV7InVybCI6Imh0dHA6Ly9wcm9mYmVja21hbi5uYXJvZC5ydS9JbmZvcm1MZWtjLmZpbGVzL0luZjA1LnBkZiIsInRpdGxlIjoiSW5mMDUucGRmIiwibm9pZnJhbWUiOnRydWUsInVpZCI6Ijg5NTQxNjQ3NyIsInRzIjoxNjMyMjczODI4Njg3LCJ5dSI6IjY0Nzc4MDA4NzE2MjE1NTg3MjEiLCJzZXJwUGFyYW1zIjoidG09MTYzMjI3MzgyMCZ0bGQ9cnUmbGFuZz1ydSZuYW1lPUluZjA1LnBkZiZ0ZXh0PSVEMSU4NCVEMCVCRSVEMSU4MCVEMCVCQyVEMSU4MyVEMCVCQiVEMCVCMCslRDAlQjElRDAlQkUlRDAlQkIlRDElOEMlRDElODYlRDAlQkMlRDAlQjAlRDAlQkQlRDAlQjArJUQwJUI0JUQwJUJCJUQxJThGKyVEMSU4RCVEMCVCRCVEMSU4MiVEMSU4MCVEMCVCRSVEMCVCRiVEMCVCOCVEMCVCOCslRDAlQjIlRDElOEIlRDAlQjIlRDAlQkUlRDAlQjQmdXJsPWh0dHAlM0EvL3Byb2ZiZWNrbWFuLm5hcm9kLnJ1L0luZm9ybUxla2MuZmlsZXMvSW5mMDUucGRmJmxyPTYzJm1pbWU9cGRmJmwxMG49cnUmc2lnbj1hNDJmZDU4NmRlODdlN2JjODJmZDU4OTc3NzM0MzhkNCZrZXlubz0wIn0%3D&lang=ru
# https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%BD%D0%B0%D1%8F_%D0%91%D0%BE%D0%BB%D1%8C%D1%86%D0%BC%D0%B0%D0%BD%D0%B0
# https://de.ifmo.ru/bk_netra/page.php?tutindex=13&index=7
# https://bigenc.ru/physics/text/2064619
# https://www.omgtu.ru/general_information/faculties/radio_engineering_department/department_of_quot_physics_quot/File/mechanics/molekul_lex.pdf
# https://ru.wikipedia.org/wiki/%D0%A3%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_%D0%92%D0%B0%D0%BD-%D0%B4%D0%B5%D1%80-%D0%92%D0%B0%D0%B0%D0%BB%D1%8C%D1%81%D0%B0
# https://studizba.com/lectures/73-fizika/1064-osnovy-statisticheskoy-fiziki/19454-33-termodinamicheskie-velichiny-klassicheskoy-plazmy.html
# https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%B1%D0%B0%D0%B5%D0%B2%D1%81%D0%BA%D0%B0%D1%8F_%D0%B4%D0%BB%D0%B8%D0%BD%D0%B0
# https://ru.wikipedia.org/wiki/%D0%9F%D0%BB%D0%B0%D0%B7%D0%BC%D0%B5%D0%BD%D0%BD%D0%B0%D1%8F_%D1%87%D0%B0%D1%81%D1%82%D0%BE%D1%82%D0%B0
# http://www.astronet.ru/db/msg/1188300
# http://heritage.sai.msu.ru/ucheb/Zemcov/Part_3_Hydrogen/Chapter_17/Chapter_17.htm
# https://studref.com/620265/matematika_himiya_fizik/raspredeleniya_fermi_boze
# https://docviewer.yandex.ru/view/895416477/?*=KSPbIyVowK2B9Gz7H9%2Bn2r%2F%2Fjxt7InVybCI6Imh0dHA6Ly9mbi5ibXN0dS5ydS9maWxlcy9GTjQvbGVjXzRzZW0vNHNlbV9sZWNfMTRfMTUucGRmIiwidGl0bGUiOiI0c2VtX2xlY18xNF8xNS5wZGYiLCJub2lmcmFtZSI6dHJ1ZSwidWlkIjoiODk1NDE2NDc3IiwidHMiOjE2MzIyNzk5NzYxMDcsInl1IjoiNjQ3NzgwMDg3MTYyMTU1ODcyMSIsInNlcnBQYXJhbXMiOiJ0bT0xNjMyMjc5OTQ5JnRsZD1ydSZsYW5nPXJ1Jm5hbWU9NHNlbV9sZWNfMTRfMTUucGRmJnRleHQ9JUQxJTgyJUQwJUI1JUQwJUJDJUQwJUJGJUQwJUI1JUQxJTgwJUQwJUIwJUQxJTgyJUQxJTgzJUQxJTgwJUQwJUIwKyVEMCVCMiVEMSU4QiVEMSU4MCVEMCVCRSVEMCVCNiVEMCVCNCVEMCVCNSVEMCVCRCVEMCVCOCVEMSU4RiZ1cmw9aHR0cCUzQS8vZm4uYm1zdHUucnUvZmlsZXMvRk40L2xlY180c2VtLzRzZW1fbGVjXzE0XzE1LnBkZiZscj02MyZtaW1lPXBkZiZsMTBuPXJ1JnNpZ249ZTU0Y2Q4OGE2YTM1ZDJkNmRkOTdlNTZmMzQ1NDk5OGQma2V5bm89MCJ9&lang=ru
# https://elementy.ru/trefil/25/Izluchenie_chernogo_tela
# https://docviewer.yandex.ru/view/895416477/?page=9&*=F35zvhI4ipMytKSryrY%2FeoIb4sp7InVybCI6Imh0dHBzOi8va2FwaXR6YS5yYXMucnUvfmdsYXprb3YvaHNlL21pbm9yLzAzLnBkZiIsInRpdGxlIjoiMDMucGRmIiwibm9pZnJhbWUiOnRydWUsInVpZCI6Ijg5NTQxNjQ3NyIsInRzIjoxNjMyMjgxMDM0NzY4LCJ5dSI6IjY0Nzc4MDA4NzE2MjE1NTg3MjEiLCJzZXJwUGFyYW1zIjoidG09MTYzMjI4MDkzNyZ0bGQ9cnUmbGFuZz1ydSZuYW1lPTAzLnBkZiZ0ZXh0PSVEMCVCOCVEMCVCNyVEMCVCQiVEMSU4MyVEMSU4NyVEMCVCNSVEMCVCRCVEMCVCOCVEMCVCNSslRDElODclRDAlQjUlRDElODAlRDAlQkQlRDAlQkUlRDAlQjMlRDAlQkUrJUQxJTgyJUQwJUI1JUQwJUJCJUQwJUIwJnVybD1odHRwcyUzQS8va2FwaXR6YS5yYXMucnUvfmdsYXprb3YvaHNlL21pbm9yLzAzLnBkZiZscj02MyZtaW1lPXBkZiZsMTBuPXJ1JnNpZ249ZTcxOWYxNDc1N2RiMmEwNGU1ZTc2ZTBkZDE3MTMxY2Ema2V5bm89MCJ9&lang=ru
# https://ru.wikipedia.org/wiki/%D0%90%D0%B1%D1%81%D0%BE%D0%BB%D1%8E%D1%82%D0%BD%D0%BE_%D1%87%D1%91%D1%80%D0%BD%D0%BE%D0%B5_%D1%82%D0%B5%D0%BB%D0%BE#%D0%92%D1%82%D0%BE%D1%80%D0%BE%D0%B9_%D0%B7%D0%B0%D0%BA%D0%BE%D0%BD_%D0%B8%D0%B7%D0%BB%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D1%8F_%D0%92%D0%B8%D0%BD%D0%B0
