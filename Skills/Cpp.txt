Task:
Первый запуск Qt Creator на языке Си
Decision:
Начало (Welcome) - проекты - создаем проект - проект без Qt - приложение на языке Си - qmake - ok - проекты - запуск - запуск в терминале - ок - запуск (зеленый треугольник внизу или ctrl+r)
Task:
Настроим утилиту для OpenGl в ubuntu 20.04
Decision:
$ sudo apt-get update
$ sudo apt-get install libglu1-mesa-dev freeglut3-dev mesa-common-dev
Task:
Первый запуск OpenGl
Decision:$ vim main.cpp
$ cat main.cpp
 #include <GL/glut.h>
 void displayMe(void)
 {
 glClear(GL_COLOR_BUFFER_BIT);
 glBegin(GL_POLYGON);
     glVertex3f(0.5, 0.0, 0.5);
     glVertex3f(0.5, 0.0, 0.0);
     glVertex3f(0.0, 0.5, 0.0);
     glVertex3f(0.0, 0.0, 0.5);
 glEnd();
 glFlush();
 }
 int main(int argc, char** argv)
 {
 glutInit(&argc, argv);
 glutInitDisplayMode(GLUT_SINGLE);
 glutInitWindowSize(400, 300);
 glutInitWindowPosition(100, 100);
 glutCreateWindow("Hello world!");
 glutDisplayFunc(displayMe);
 glutMainLoop();
 return 0;
 }
$ g++ main.cpp -o firstOpenGlApp -lglut -lGLU -lGL
$ ./firstOpenGlApp
Task:
Установка Qt Creator под Windows
Decision:
   https://visualstudio.microsoft.com/ru/downloads/ -> Инструменты для Visual Studio 2022 -> Инструменты сборки для Visual Studio 2022 -> aka.ms
C:\Users\...\Downloads\qt C++ installer> vs_buildtools.exe --layout offline --lang en-us --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended
   ...\offline\vs_setup.exe
   https://developer.microsoft.com/en-US/windows/downloads/windows-sdk/-> Getting started -> https://go.microsoft.com/fwlink/?linkid=2173746-> ...\22000.194.210911-1543.co_release_svc_prod1_WindowsSDK.iso -> Извлечь в текущую папку -> ...\22000.194.210911-1543.co_release_svc_prod1_WindowsSDK\Installers\X64 Debuggers And Tools-x64_en-us.exe -> ...\22000.194.210911-1543.co_release_svc_prod1_WindowsSDK\Installers\X86 Debuggers And Tools-x86_en-us.exe
   https://cmake.org/download/-> Binary distributions: -> Windows x64 Installer: Installer tool has changed. Uninstall CMake 3.4 or lower first! -> https://github.com/Kitware/CMake/releases/download/v3.22.0/cmake-3.22.0-windows-x86_64.msi
   ...\cmake-3.22.0-windows-x86_64.msi -> Add CMake to the system PATH for all users
   https://www.qt.io/offline-installers -> Windows Host -> \qt-opensource-windows-x86-5.12.11.exe -> Select Components -> Qt 5.12 -> MSVC 2017 32-bit -> MSVC 2017 64-bit -> Launch QT Creator -> Компьютер -> Свойства -> Дополнительные параметры системы -> Переменные среды ->  Системные переменные -> Path -> Изменить -> Создать -> C:\Qt\Qt5.12.11\Tools\QtCreator\bin -> Пуск -> QT Creator Community -> Инструменты -> Параметры
Task:
Установка Qt Creator под Ubuntu 20.04
Decision:
https://www.qt.io/download-qt-installer - Download:
$ chmod u+x qt-unified-linux-x64-4.1.1-online.run
$ ./qt-unified-linux-x64-4.1.1-online.run
нужно выбрать компоненты
Task:
Установка g++
Decision:
$ sudo apt install build-essential
$ g++ --version
Task:
Первый запуск
Decision:
$ vim hello.cc
$ cat hello.cc
   #include <iostream>
   using namespace std;
   int main()
   {
   cout << "Hello, World!";
   return 0;
   }
$ ls -l
   итого 28
   -rw-rw-r-- 1     100 Jul 20 20:13 hello.cc
$ g++ -o hello hello.cc
$ ls -l
   итого 48
   -rwxrwxr-x 1   17160 Jul 20 20:13 hello
   -rw-rw-r-- 1     100 Jul 20 20:13 hello.cc
$ ./hello
   Hello, World!
Decision:
$ vim test.cpp
$ cat test.cpp
   fint main(){
   }
$ g++ test.cpp -o test
   test.cpp:1:1: error: ‘fint’ does not name a type; did you mean ‘int’?
   1 | fint main(){
     | ^~~~
     | int
$ vim test.cpp
$ cat test.cpp
   int main(){
   }
$ g++ test.cpp -o test
$ ls
   test  test.cpp
$ gdb --annotate=3 test
   GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
   Copyright (C) 2020 Free Software Foundation, Inc.
   License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
   This is free software: you are free to change and redistribute it.
   There is NO WARRANTY, to the extent permitted by law.
   Type "show copying" and "show warranty" for details.
   This GDB was configured as "x86_64-linux-gnu".
   Type "show configuration" for configuration details.
   For bug reporting instructions, please see:
   <http://www.gnu.org/software/gdb/bugs/>.
   Find the GDB manual and other documentation resources online at:
   <http://www.gnu.org/software/gdb/documentation/>.
   For help, type "help".
   Type "apropos word" to search for commands related to "word"...
   Reading symbols from test...
   (No debugging symbols found in test)
   ��pre-prompt
   (gdb)
   ��prompt
run
   ��post-prompt
   Starting program: /home/as/Документы/C++/C++ Open GL/test/test
   ��starting
   ��exited 0
   [Inferior 1 (process 8426) exited normally]
   ��thread-exited,id="1",group-id="i1"
   ��stopped
   ��pre-prompt
   (gdb)
   ��prompt
quit
   ��post-prompt
Task:
Теперь попробуем добавить что-нибудь в программе. Чтобы добавить какой-нибудь текст, нужно подключить библиотеку iostream
Decision:
$ vim test.cpp
$ cat test.cpp
   #include <iostream>
   int main(){
   std::cout<<"Hello"<<std::endl;
   }
$ g++ test.cpp -o test
$ gdb --annotate=3 test
   Copyright (C) 2020 Free Software Foundation, Inc.
   License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
   This is free software: you are free to change and redistribute it.
   There is NO WARRANTY, to the extent permitted by law.
   Type "show copying" and "show warranty" for details.
   This GDB was configured as "x86_64-linux-gnu".
   Type "show configuration" for configuration details.
   For bug reporting instructions, please see:
   <http://www.gnu.org/software/gdb/bugs/>.
   Find the GDB manual and other documentation resources online at:
   <http://www.gnu.org/software/gdb/documentation/>.
   For help, type "help".
   Type "apropos word" to search for commands related to "word"...
   Reading symbols from test...
   (No debugging symbols found in test)
   ��pre-prompt
   (gdb)
   ��prompt
run
   ��post-prompt
   Starting program: /home/as/Документы/C++/C++ Open GL/test/test
   ��starting
   Hello
   ��exited 0
   [Inferior 1 (process 8581) exited normally]
   ��thread-exited,id="1",group-id="i1"
   ��stopped
   ��pre-prompt
   (gdb)
   ��prompt
q
   ��post-prompt
Decision:
$ vim test.cpp
$ cat test.cpp
   #include <iostream>
   using namespace std;
   int main(){
   int i=1;
   float f=1.1123;
   char c='f';
   cin>>i;
   cin>>f;
   cin>>c;
   cout<<i<<endl;
   cout<<f<<endl;
   cout<<c<<endl;
   }
$ g++ test.cpp -o test
$ gdb --annotate=3 test
   GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
   Copyright (C) 2020 Free Software Foundation, Inc.
   License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
   This is free software: you are free to change and redistribute it.
   There is NO WARRANTY, to the extent permitted by law.
   Type "show copying" and "show warranty" for details.
   This GDB was configured as "x86_64-linux-gnu".
   Type "show configuration" for configuration details.
   For bug reporting instructions, please see:
   <http://www.gnu.org/software/gdb/bugs/>.
   Find the GDB manual and other documentation resources online at:
   <http://www.gnu.org/software/gdb/documentation/>.
   For help, type "help".
   Type "apropos word" to search for commands related to "word"...
   Reading symbols from test...
   (No debugging symbols found in test)
   ��pre-prompt
   (gdb)
   ��prompt
run
   ��post-prompt
   Starting program: /home/as/Документы/C++/C++ Open GL/test/test
   ��starting
   32
   15.04
   g
   32
   15.04
   g
   ��exited 0
   [Inferior 1 (process 9164) exited normally]
   ��thread-exited,id="1",group-id="i1"
   ��stopped
   ��pre-prompt
   (gdb)
   ��prompt
q
   ��post-prompt        
Source:
https://linuxconfig.org/how-to-install-g-the-c-compiler-on-ubuntu-20-04-lts-focal-fossa-linux
http://www.codebind.com/linux-tutorials/install-opengl-ubuntu-linux/
https://prognote.ru/articles/how-to-install-qt-5-on-linux-ubuntu
https://www.youtube.com/watch?v=2Scwa8KuNQU&t=79s
Task:
Часы
Decision:
$ cat Clock.cpp
#include<GL/glut.h>
#include<cmath>
#include<ctime>
void display(){
        glClear(GL_COLOR_BUFFER_BIT);
        glBegin(GL_LINES);
    for(int i=0; i<12; ++i){
        float x=sin(2*M_PI/12*i);
        float y=cos(2*M_PI/12*i);
        glVertex2f(400*x, 400*y);
        glVertex2f(380*x, 380*y);
    }
    time_t t=time(0);
    tm *lt=localtime(&t);//kosiyak
    int h=lt -> tm_hour;
    int m=lt -> tm_min;
    int s=lt -> tm_sec;
    float x=sin(2*M_PI*(h*60+m)/12/60);
        float y=cos(2*M_PI*(h*60+m)/12/60);
        glVertex2f(0, 0);
        glVertex2f(250*x, 250*y);
    x=sin(2*M_PI*m/60);
        y=cos(2*M_PI*m/60);
        glVertex2f(0, 0);
        glVertex2f(350*x, 350*y);
    x=sin(2*M_PI*s/60);
        y=cos(2*M_PI*s/60);
        glVertex2f(0, 0);
        glVertex2f(370*x, 370*y);
    glEnd();
        glutSwapBuffers();
}
void timer(int=0){
        display();
        glutTimerFunc(10,timer,0);
}
int main(int argc, char **argv){
    glutInit(&argc, argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
        glutInitWindowSize(400,400);
        glutInitWindowPosition(20,1050-400-20);
        glutCreateWindow("Clock");
        glClearColor(0,0,0,1.0);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(-400,400,-400,400,-400,400);
        glutDisplayFunc(display);
        timer();
        glutMainLoop();
}
$ g++ Clock.cpp -o main -lglut -lGLU -lGL
$ ./main
Task:
Лабиринт с помощью двумерных массивов
Decision:
#include <iostream>
#include <math.h>
#include <clocale>
using namespace std;
int main()
{
    setlocale(LC_CTYPE, "rus");
    int mas[33][20] = {
                        {1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,}, 
                        {1,2,1,0,0,1,0,1,2,2,2,1,1,1,1,0,0,0,0,1,},
                        {1,2,1,1,0,1,0,1,2,1,2,2,2,2,1,0,1,1,0,1,},
                        {1,2,2,2,2,2,2,1,2,1,1,1,1,2,1,0,0,1,0,1,},
                        {1,1,1,1,1,1,2,1,2,1,0,0,1,2,1,1,0,1,0,1,},
                        {1,0,0,1,0,0,2,2,2,1,1,0,0,2,0,0,0,1,0,1,},
                        {1,0,1,1,0,1,1,1,1,1,0,0,1,2,1,1,1,1,0,1,},
                        {1,0,0,0,0,0,0,0,0,1,1,1,1,2,1,0,0,0,0,1,},
                        {1,1,1,1,1,1,0,1,1,1,2,2,2,2,1,0,1,1,1,1,},
                        {1,1,0,0,0,1,0,0,1,1,2,1,1,1,1,0,0,0,0,1,},
                        {1,0,0,1,0,0,0,0,0,1,2,2,2,2,1,1,1,1,0,1,},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,0,0,0,0,1,},
                        {1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,1,1,1,1,},
                        {1,2,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,},
                        {1,2,1,0,0,0,1,2,2,2,1,0,0,0,0,0,1,1,0,1,},
                        {1,2,1,1,1,1,1,2,1,2,1,1,1,0,1,0,0,0,0,1,},
                        {1,2,1,2,2,2,1,2,1,2,2,2,1,1,1,1,1,1,1,1,},
                        {1,2,1,2,1,2,1,2,1,0,1,2,2,2,2,2,2,2,2,1,},
                        {1,2,1,2,1,2,1,2,1,0,1,1,1,1,1,1,1,1,2,1,},
                        {1,2,1,2,1,2,1,2,1,0,0,0,0,0,0,0,0,0,2,1,},
                        {1,2,1,2,1,2,2,2,1,0,1,1,1,1,1,1,0,1,2,1,},
                        {1,2,1,2,1,1,1,1,1,0,0,0,1,0,1,0,0,1,2,1,},
                        {1,2,1,2,2,1,0,0,1,1,1,0,0,0,1,0,1,1,2,1,},
                        {1,2,1,1,2,1,1,0,0,0,0,0,1,0,1,0,0,1,2,1,},
                        {1,2,1,1,2,1,0,0,1,1,1,1,1,1,1,1,1,1,2,1,},
                        {1,2,1,1,2,1,1,0,1,2,2,2,2,2,2,2,2,2,2,1,},
                        {1,2,1,1,2,1,0,0,1,2,1,1,1,1,1,1,1,1,1,1,},
                        {1,2,1,1,2,1,0,1,1,2,1,1,1,1,1,1,1,1,2,2,},
                        {1,2,1,1,2,1,0,0,1,2,1,1,2,2,2,2,2,2,2,1,},
                        {1,2,1,1,2,1,0,1,1,2,1,1,2,1,1,1,1,1,1,1,},
                        {1,2,1,1,2,1,0,0,1,2,1,1,2,1,0,0,0,1,0,1,},
                        {1,2,2,2,2,1,0,1,1,2,2,2,2,0,0,1,0,0,0,1,},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,}
    };
    for (int i = 0; i < 33; i++)
    {
        for (int j = 0; j < 20; j++)
        {
            if (mas[i][j] == 1)
            {
                cout <<"j";
                cout <<"j";
            } else{
                 cout << "  ";
            }
        }
        cout << endl;
    }
    return 0;
}    
Task:
The matrix
Decision:
#include <GL/glut.h>
#include <iostream>
using namespace std;
struct Ch{
    Ch(char ach=' ', int alive=0):
        ch(ach),
        live(alive)
    {}
    char ch;
    int live;
};
const int W=852/9;
const int H=480/15;
Ch screen[W][H];
void display(){
    glClear(GL_COLOR_BUFFER_BIT);
    for(int y=0; y<H; ++y){
        for(int x=0; x<W; ++x){
            glRasterPos2f(x*9, (y+1)*15);
            glColor3f(0, screen[x][y].live/10000.0, 0);
            glutBitmapCharacter(GLUT_BITMAP_9_BY_15, screen[x][y].ch);
        }
    }
    glutSwapBuffers();
}
void timer(int=0){
        for(int y=0; y<H; ++y){
            for(int x=0; x<W; ++x){
            if(screen[x][y].live>0){
                --screen[x][y].live;
            }
        }
    }
    int x=rand()%W;
    for(int y=0; y<H; ++y){
        if(screen[x][y].live<=0){
            screen[x][y].ch=rand()%256;
            screen[x][y].live=10000;
            break;
        }
    }
    glutPostRedisplay();
    glutTimerFunc(0, timer, 0);
}
int main(int argc, char **argv){
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(852, 480);
    glutInitWindowPosition(0, 86);
    glutCreateWindow("Metrix Code");
    glClearColor(0, 0, 0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0, 852, 480, 0, -1, 1);
    glutDisplayFunc(display);
    timer();
    glutMainLoop();
    /*for(unsigned wchar i=' '; i<500; ++i){
        wcout<<(wchar)i;
    }*/
}
Task:
Анимация с мышью
Decision:
#include <GL/glut.h>
#include <cstdlib>
#include <cmath>
using namespace std;
int x=0, y=0;
bool down=false;
const int N=100;
struct P{
    float x, y, vx, vy, r, g, b;
}p[N];
void display(){
    glClear(GL_COLOR_BUFFER_BIT);
    glPointSize(5);
    glBegin(GL_POINTS);
    for(int i=0; i<N; ++i){
        glColor3f(p[i].r, p[i].g, p[i].b);
        glVertex2f(p[i].x, p[i].y);
    }
    glEnd();
    glutSwapBuffers();
}
void timer(int=0){
    display();
    for(int i=0; i<N; ++i){
        p[i].x+=p[i].vx;
        p[i].y+=p[i].vy;
        if (down){
            float d=sqrt((p[i].x-x)*(p[i].x-x)+(p[i].y-y)*(p[i].y-y));
            p[i].x+=5*(x-p[i].x)/d;
            p[i].y+=5*(y-p[i].y)/d;
        }
    }
    glutTimerFunc(10, timer, 0);
}
void mouse(int button, int state, int ax, int ay){
    x=ax;
    y=ay;
    down=state==GLUT_DOWN;
}
void motion(int ax, int ay){
    x=ax;
    y=ay;
}
int main(int argc, char **argv){
    for(int i=0; i<N; ++i){
        p[i].x=rand()%480;
        p[i].y=rand()%480;
        p[i].vx=rand()%480/100.0-2.4;
        p[i].vy=rand()%480/100.0-2.4;
        p[i].r=rand()%200/200.0;
        p[i].g=rand()%200/200.0;
        p[i].b=rand()%200/200.0;
    }
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(480, 480);
    glutInitWindowPosition(20, 1050-480-20);
    glutCreateWindow("Knight tour");
    glClearColor(0, 0, 0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0, 480, 480, 0, -1, 1);
    glutDisplayFunc(display);
    timer();
    glutMouseFunc(mouse);
    glutMotionFunc(motion);
    glutMainLoop();
}
Task:
Моделирование гравитации
Decision:
#include<GL/glut.h>
#include<cmath>
struct Particle{
    float x, y, vx, vy, m;
};
const int N=4;
Particle particles[N];
void display(){
        glClear(GL_COLOR_BUFFER_BIT);
        glBegin(GL_POINTS);
    for(int i=0; i<N; ++i){
        glVertex2f(particles[i].x, particles[i].y);
    }
        glEnd();
        glutSwapBuffers();
}
void timer(int=0){
    for(int i=0; i<N; ++i){
        Particle &p0=particles[i];
        for(int j=0; j<N; ++j){
            if(j==i){
                continue;
            }
            const Particle &p=particles[j];
            float d=sqrt((p0.x-p.x)*(p0.x-p.x)+
                    (p0.y-p.y)*(p0.y-p.y));
            if(d>3){
                p0.vx+=0.0007*p.m/d/d*(p.x-p0.x)/d;
                                p0.vy+=0.0007*p.m/d/d*(p.y-p0.y)/d;
            }
        }
        p0.x+=p0.vx;
        p0.y+=p0.vy;

    }
        display();
        glutTimerFunc(1,timer,0);
}
int main(int argc, char **argv){
    particles[0].x=100;
    particles[0].y=100;
    particles[0].vx=0;
    particles[0].vy=0;
    particles[0].m=1000;
        particles[1].x=130;
        particles[1].y=100;
        particles[1].vx=0;
        particles[1].vy=-0.1;
        particles[1].m=7;
        particles[2].x=30;
        particles[2].y=100;
        particles[2].vx=0;
        particles[2].vy=0.1;
        particles[2].m=10;
        particles[3].x=25;
        particles[3].y=100;
        particles[3].vx=0;
        particles[3].vy=0.11;
        particles[3].m=0.1;
    glutInit(&argc, argv);
        glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
        glutInitWindowSize(200,200);
        glutInitWindowPosition(20,810);
        glutCreateWindow("Gravitation");
        glClearColor(0,0,0,1.0);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        glOrtho(0,200,200,0,-1,1);
        glutDisplayFunc(display);
        timer();
        glutMainLoop();
}
Task:
Вращающийся куб
Decision:
#include <GL/glut.h>
//#include <GL/freeglut.h>
void display(){
    glClear(GL_COLOR_BUFFER_BIT);
    glRotatef(1,1,1,0);
    glBegin(GL_LINE_STRIP);
    glVertex3f(-50, -50, -50);
    glVertex3f(50, -50, -50);
    glVertex3f(50, 50, -50);
    glVertex3f(-50, 50, -50);   
    glVertex3f(-50, -50, -50);
    glEnd();
        glBegin(GL_LINE_STRIP);
        glVertex3f(-50, -50, 50);
        glVertex3f(50, -50, 50);
        glVertex3f(50, 50, 50);
        glVertex3f(-50, 50, 50); 
        glVertex3f(-50, -50, 50);
        glEnd();
        glBegin(GL_LINES);
        glVertex3f(-50, -50, 50);
        glVertex3f(-50, -50, -50);
        glVertex3f(50, -50, 50);
        glVertex3f(50, -50, -50); 
        glVertex3f(50, 50, 50);
    glVertex3f(50, 50, -50);
    glVertex3f(-50, 50, 50);
    glVertex3f(-50, 50, -50);
        glEnd();

    glutSwapBuffers();
}
void timer(int=0){
    display();
glutTimerFunc(10, timer, 0);
}
int main(int argc, char **argv){
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(200, 200);
    glutInitWindowPosition(20, 810);
    glutCreateWindow("Cube");
    glClearColor(0,0,0,1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-100, 100, -100, 100, -100, 100);
    glutDisplayFunc(display);
    timer();
    glutMainLoop();
}
Source:
https://www.youtube.com/playlist?list=PL30625C8F5ADD5BB4
Task:
Функция ввода пароля.
Decision:
#include <iostream>
#include <string>
using namespace std;
void check_pass (string password){
    string valid_pass="qwerty123";
    if (password==valid_pass){
        cout<<"Доступ разрешен." << endl;
    } else {
        cout << "Неверный пароль!" << endl;
    }
}
int main()
{
    setlocale(LC_CTYPE, "rus");
    string user_pass;
    cout<< "Введите пароль: ";
    getline(cin, user_pass);
    check_pass(user_pass);
    return 0;
}
Task:
Шифрование ключевых фраз с помощью функции crypt    
Decision:
$ ./project hunter2 '$1$42'
$1$42$7l6Y3xT5282XmZrtDOF9f0
$ ./project hunter2 '$6$42' $6$42$OqFFAVnI3gTSYG0yI9TZWX9cpyQzwIop7HwpG1LLEsNBiMr4w6OvLX1KDa./UpwXfrFk1i...
$ ./project hunter2 '$1$hunter2'
$1$hunter2$YVxrxDmidq7Xf8Gdt6qM2.
$ gcc C-EncryptionOfKeyPhrasesUsingCrypt.c -o project -lcrypt
$ ./project
$ cat C-EncryptionOfKeyPhrasesUsingCrypt.c
#include <stdio.h>
#define __USE_XOPEN
#include <unistd.h>
int main(int argc, char** argv)
{
 if(argc==3)
   {
       printf("%s\n", crypt(argv[1],argv[2]));
   }
   else
   {
       printf("Использование: MyCrypt $пароль $salt\n" );
   }
  return 0;
}
Task:
Address Book. Я заранее создал список имен c телефонными номерами в файле file.txt.
Нужно создать такую программу, что бы при вводе имени на консоле выдавался номер нужного человека. Сделаю я это с помощью вектора.
Decision:
#include<iostream>
#include<fstream>
#include<vector>
#include<string>
using namespace std;
class Number{
public:
    string name;
    string number;
    Number (const Number &v):
        name(v.name),
        number(v.number){}
    Number(){}
    const Number &operator=(const Number &v){
        name=v.name;
        number=v.number;
        return v;
    }      
};
int main(){
    fstream f("file.txt");
    vector<Number> telBook;
    while(true){
        Number t;
        f>>t.name;
        if(f.eof()){
            break;
        }
        f>>t.number;
        if(f.eof()){
            break;
        }
        telBook.push_back(t);
    }
    while(true){
        cout<<"Введите имя (или стоп)";
        string name;
        cin>>name;
        if(name=="стоп"){
            break;
        }
        for(int i=0;i<telBook.size(); ++i){
            if(telBook[i].name==name){
                cout<<name<<" "<<telBook[i].number<<endl;
            }
        }
    }
}
Source:
https://www.youtube.com/playlist?list=PLvItDmb0sZw_l5qKMLTjePXX485CWKVNe
Task:
Keyboard. For this letter of the English alphabet, you need to print the letter on the right on a standard keyboard. At the same time, the keyboard is closed, i.e. to the right of the letter «p» is the letter «a», from the letter «l» is the letter «z», and from the letter «m» — the letter
Input: Первая строка входного файла INPUT.TXT содержит один символ — маленькую букву английского алфавита.
Output: В выходной файл OUTPUT.TXT следует вывести букву стоящую справа от заданной буквы, с учетом замкнутости клавиатуры.
Decision:
#include<iostream>
#include<fstream>
#include<cmath>
using namespace std;
ifstream in("input.txt");
ofstream out("output.txt");
int main()
{
    const char massive=26;
    char a[massive]={
        'q','w','e','r','t','y','u','i','o','p','a',
        's','d','f','g','h','j','k','l','z','x','c',
        'v','b','n','m'
    };
    char symbol;
    in>>symbol;
    if(symbol=='m'){
        out<<a[0];
    }
    else{
        for(int i=0; i<massive; i++){
            if(symbol==a[i]){
                out<<a[i+1];
            }
        }
    }
    return 0;
}    
Task:
Склонение слов
Decision:
#include <iostream>
using namespace std;
int main(){
    cout<<"Введите кoличество пирожков: ";
    int n;
    cin>>n;
    cout<<"Я собираюсь съесть "<<n;
        int o=n%100;
    if((o>10)&&(o<20)){
        cout<<" .";
    }
    else{
        switch(o%10){
            case 0:
                cout<<" пирожков.";
                break;
            case 1:
                cout<<" пирожок.";
                break;
            case 2:
            case 3:
            case 4:
                cout<<" пирожка.";
                break;
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                cout<<" пирожков.";
                break;
        }
    }
    cout<<endl; 
}
Source:
https://acmp.ru/index.asp?main=tasks
Task:
Генерация. пытаемся отгадать число у компа
Decision:
#include<iostream>
#include<cstdlib>
#include<ctime>
using namespace std;
int main (){
        srand(time(0));
        bool done;
        do{
                int j, i=rand()%100;
                while (true){
                        cout<<"Какое число вы загадали?";
                        cin>>j;
                        if(i>j){
                                cout<<"Мое число больше"<<endl;
                        }
                        else{
                                if(i<j){
                                        cout<<"Мое число меньше"<<endl;
                                }
                                else{
                                        cout<<"Ты угадал"<<endl;
                                        break;
                                }
                        }
                }
                cout<<"Продолжить? (y/n) ";
                char c;
                done=(c!='y');
                cin>>c;
        }while(!done);
}
Task:
Теперь наоборот комп пытаеmся угадать у нас число
Decision:
#include<iostream>
#include<cmath>
using namespace std;
float f(float x){
        cout<<(int)x<<endl;
        while (true){
                cout<<"Правильно? (+/-/=) ";
                char c;
                cin>>c;
                switch (c){
                        case '+': return +1;
                        case '-': return -1;
                        case '=': return 0;
                }
                cout<<"Вы ввели не правильный символ, повторите"<<endl;
        }
}
float n(float x1, float x2){
        float x=(x1+x2)/2;
        float y=f(x);
        while(abs(y)>0.001){
                if(y>0){
                        x1=x;
                }else{
                        x2=x;
                }
                x=(x1+x2)/2;
                y=f(x);
        }
        return x;
}
int main(){
        cout<<"Вы загадали "<< (int)n(0,100);
}
Task:
Крестики-нолики
Decision:
#include <iostream>
using namespace std;
int main() {
    char xo[3][3] = {
        {'.', '.','.'},
        {'.', '.','.'},
        {'.', '.','.'}
    };
    while(true) {
        int x, y;
        cin >> x >> y;
        xo[x][y] = 'x';
        for(int i=0;i<3; i++) {
            for(int j=0;j<3; j++) {
                cout << xo[i][j] << " ";
            }
            cout << endl;
        }
    }
    return 0;
}
Decision:
#include<iostream>
using namespace std;
//char d[9]={ '-', '-', '-', '-', '-', '-', '-', '-', '-'};
char d[9]={};
void clear(){
    for(int i=0; i<50; i++){
        cout<<endl;
    }
}
void clear_doska(){
    for(int i=0; i<9; i++){
        d[i]='-';
    }
}
void doska_player(){
    cout<<"ход игроков"<<endl;
    cout<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
    cout<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
    cout<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
}
int doska(){
    cout<<"подсказка хода"<<endl;
    cout<<"-7-|-8-|-9-"<<endl;
    cout<<"-4-|-5-|-6-"<<endl;
    cout<<"-1-|-2-|-3-"<<endl;
    doska_player("");
    //cout<<"ход игроков"<<endl;
    //cout<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
    //cout<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
    //cout<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
    int hod;
    cout<<"ваш ход: ";
    cin>>hod;
    while(hod>9 || hod<1 || d[hod-1]!='-'){
        cout<<"введите правильный ход: ";
        cin>>hod;
    }
    return hod;
}
int main(){
    clear_doska();
    int turn=0;
    for(int i=0; i<9; i++){
        clear();
        int hod=doska();
        cout<<"Вы ввели: "<<hod<<endl;
        if(i%2==0){
            d[hod-1]='x';
        }else{
            d[hod-1]='o';
        }
        turn++;
    }
    doska_player();
    return 0;
}
Decision:
#include<iostream>
#include<string>
using namespace std;
char d[9]={};
void clear(){
    for(int i=0; i<50; i++){
        cout<<endl;
    }
}
void clear_doska(){
    for(int i=0; i<9; i++){
        d[i]='-';
    }
}
void doska_player(string indent){
    cout<<indent<<"-"<<d[6]<<"-|-"<<d[7]<<"-|-"<<d[8]<<"-"<<endl;
    cout<<indent<<"-"<<d[3]<<"-|-"<<d[4]<<"-|-"<<d[5]<<"-"<<endl;
    cout<<indent<<"-"<<d[0]<<"-|-"<<d[1]<<"-|-"<<d[2]<<"-"<<endl;
}
int doska(){
    cout<<"подсказка хода"<<endl;
    cout<<"-7-|-8-|-9-"<<endl;
    cout<<"-4-|-5-|-6-"<<endl;
    cout<<"-1-|-2-|-3-"<<endl;
    doska_player("");
    int hod;    
    cout<<"ваш ход: ";
    cin>>hod;
    while(hod>9 || hod<1 || d[hod-1]!='-'){
        cout<<"введите правильный ход: ";
        cin>>hod;
    }
    return hod;
}
bool finish_win(char player){
    int win[][3]={{0,1,2},{3,4,5},{6,7,8},{0,3,6},{1,4,7},{2,5,8},{6,4,2},{0,4,8}};
    for(int i=0; i<8; i++){
        int count=0;
        for(int j=0; j<3; j++){
            if(d[win[i][j]]==player){
                count++;
            }
        }
        if(count==3){
            return true;
        }
    }
    return false;
}
char play_and_get_winner(){
    int turn=1;
    while(!finish_win('x') && !finish_win('o')){
        clear();
        int hod=doska();
        cout<<"Вы ввели: "<<hod<<endl;
        if(turn%2==1){
            d[hod-1]='x';
            if(finish_win('x')){
                cout<<"player X: поздравляю, вы выйграли"<<endl;
                return 'x';
            }
        }else{
            d[hod-1]='o';
            if(finish_win('o')){
                cout<<"player O: поздравляю, вы выйграли"<<endl;
                return 'o';
            }
        }
        turn++;
        if(turn==10){
            cout<<"Ничья"<<endl;
        }
    }
    return 'D';
}
int main(){
    cout<<"Welcome"<<endl;
    string reply="y";
    int x_wins=0, o_wins=0, ties=0;
    while(reply=="y"){
        clear_doska();
        char winner=play_and_get_winner();
        doska_player("\t");
        switch(winner){
            case 'x':
                x_wins++;
                break;
            case 'o':
                o_wins++;
                break;
            case 'D':
                ties++;
                break;
        }
        cout<<" Статистика Игрока Х: " <<x_wins<<", Игрока О: "<<o_wins<<" И нeчьи "<<ties<<endl;
        cout<<"Хотите продолжить?(y/n) ";
        cin>>reply;
        while(reply!="y" && reply!="n"){
            cout<<"Пожалуйста, введите правильный ответ(y/n) ";
            cin>>reply;
        }
    }
    return 0;
}
Task:
Сапер
Мальчику Васе очень нравится знаменитая игра "Сапер" ("Minesweeper").
Один человек играет в "Сапера". Игра ведется на клетчатом поле (далее мы будем называть это картой) N×M (N строк, M столбцов). В K ячейках поля находятся мины, в остальных ячейках либо записывается число от 1 до 8 — количество мин в соседних ячейках, либо ничего не записывается, если в соседних ячейках нет мин. Ячейки являются смежными, если у них есть хотя бы одна общая точка, в одной ячейке не может быть более одной мины. Изначально все ячейки поля закрыты. Игрок может открыть ячейку за один ход. Если в открытой им ячейке есть мина, он проигрывает, в противном случае игроку показывается число, которое стоит в этой ячейке, и игра продолжается. Цель игры состоит в том, чтобы открыть все ячейки, в которых нет мин.
У Васи есть эта игра на компьютере, но ему кажется, что все карточки, которые в ней есть, некрасивые и неинтересные. Поэтому он решил нарисовать свой собственный. Однако у него богатое воображение, а времени мало, и он хочет успеть нарисовать как можно больше карточек. Поэтому он просто выбирает N, M и K и расставляет мины на поле, после чего все остальные ячейки могут быть однозначно идентифицированы. Однако он не хочет тратить свое драгоценное время на определение оставшихся ячеек. Помогите ему!
Decision:
#include<iostream>
#include<fstream>
#include<ctime>
#include<cstdlib>
using namespace std;
ifstream in("input.txt");
ofstream out("output.txt");
int main()
{
    char massive[10][10]={
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'},
            {'.','.','.','.','.','.','.','.','.','.'}
            };
    time_t now = time(NULL);
    srand(now);
    int x, y;
    for (int i=0; i<10; ){
        x = rand()%10;
        y = rand()%10;
        if (massive[x][y]=='*'){
            continue;
        }
        else {
            massive[x][y] ='*';
        }
       i++;
    }
    for (int i=0; i<10; i++){
        for (int j=0;j<10;j++)
        cout << massive[i][j] << " ";
        cout << endl;
    }
    return 0;
}
Task:
Мне нужно написать программу, которая считывает возраст человека. Программа сначала запрашивает год рождения.
Decision:
$ cat Cpp-AgeDetermination.cpp
#include <iostream>
using namespace std;
int age(int current_date, int current_month, int current_year, int birth_date, int birth_month, int birth_year)
{
  //если дата рождения больше текущей даты рождения тогда не считайте в этом месяце и добавьте 30 к дате так как вычесть дату и получить оставшиеся дни
  int month[]={31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  if (birth_date > current_date)
  {
    current_month = current_month - 1;
    current_date = current_date + month[birth_month-1];
  }
  //если месяц рождения превышает текущий месяц, то  Не считайте в этом году и добавьте 12 к месяц, чтобы мы могли вычесть и выяснить различия
  if (birth_month > current_month)
  {
    current_year = current_year - 1;
        current_month = current_month + 12;
  }
    // вычислить дату, месяц, год
    int calculated_date = current_date - birth_date;
    int calculated_month = current_month - birth_month;
    int calculated_year = current_year - birth_year;
  // печать нынешнего возраста
    cout<<"Present Age:"<<endl;
    cout<<"Years: "<<calculated_year<<" Months: "<<calculated_month<<" Days: "<<calculated_date<<endl;
  return 0;
}
int main()
{
  int current_date, current_month, current_year, birth_date, birth_month, birth_year;
  //код пользователя
  cout<<"Today:"<<endl;
  cout<<"DD: ";
  cin>>current_date;
  cout<<"MM: ";
  cin>>current_month;
  cout<<"YYYY: ";
  cin>>current_year;
  //рождение дд // мм // гггг
  cout<<"You'r Birthday:"<<endl;
  cout<<"DD: ";
  cin>>birth_date;
    cout<<"MM: ";
  cin>>birth_month;
    cout<<"YYYY:";
  cin>>birth_year;
  age(current_date, current_month, current_year, birth_date, birth_month, birth_year);
  system("pause");
  return 0;
}
$ cat Py-AgeDetermination.py
def age(current_date, current_month, current_year, birth_date, birth_month, birth_year):
    #если дата рождения больше текущей даты рождения тогда не считайте в этом месяце и добавьте 30 к дате так как вычесть дату и получить оставшиеся дни
    month =[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if (birth_date > current_date):
        current_month = current_month - 1
        current_date = current_date + month[birth_month-1]
    #если месяц рождения превышает текущий месяц, то Не считайте в этом году и добавьте 12 к месяц, чтобы мы могли вычесть и выяснить различия
    if (birth_month > current_month):
        current_year = current_year - 1;
        current_month = current_month + 12;
    # вычислить дату, месяц, год
    calculated_date = current_date - birth_date;
    calculated_month = current_month - birth_month;
    calculated_year = current_year - birth_year;
    # печать нынешнего возраста
    print("Present Age:")
    print("Years:", calculated_year, "Months:", calculated_month, "Days:", calculated_date)
print("Today:")
# код пользователя
current_date = int(input("DD: "))
current_month = int(input("MM: "))
current_year = int(input("YYYY: "))
# рождение дд // мм // гггг
print("You'r Birthday:")
birth_date = int(input("DD: "))
birth_month = int(input("MM: "))
birth_year = int(input("YYYY: "))
age(current_date, current_month, current_year, birth_date, birth_month, birth_year)
$ python3 Py-AgeDetermination.py
Today:
DD: 18
MM: 07
YYYY: 2022
You'r Birthday:
DD: 23
MM: 09
YYYY: 1992
Present Age:
Years: 29 Months: 9 Days: 25
$ g++ Cpp-AgeDetermination.cpp -o output
$ ./output
Today:
DD: 18
MM: 07
YYYY: 2022
You'r Birthday:
DD: 23
MM: 09
YYYY:1992
Present Age:
Years: 29 Months: 9 Days: 25
Task:
Создайте конвертер валют, который получает данные из национального банка с помощью json и выводит данные о стоимости рубля к доллару, евро и юаню. Запустите программу через терминал.
Decision:
$ cat Cpp-CurrencyConverter.cpp
#include <iostream>
using namespace std;
int main()
{
  float dollar, euro, yuan;
  cout<<"current dollar data: ";
  cin>>dollar;
        cout<<"current euro data: ";
  cin>>euro;
        cout<<"current yuan data: ";
  cin>>yuan;
  //cout<<dollar<<" "<<euro<<" "<<yuan<<" "<<endl;
  cout<<"1) Convert to dollars, Euros, yuan"<<endl<<"2) Transfer from dollars, Euros, yuan"<<endl<<"Choose your actions: ";
  int choise;
  cin>>choise;
  //cout<<choise; 
  if (choise==1){
    float ruble, resultDollar, resultEuro, resultYuan;
    cout<<"Enter the number of rubles: ";
    cin>>ruble;
    resultDollar=ruble/dollar;
    resultEuro=ruble/euro;
    resultYuan=ruble/yuan;
    cout<<"The result of your transfer = "<<resultDollar<<endl<<"The result of your transfer = "<<resultEuro<<endl<<"The result of your transfer = "<<resultYuan<<endl;
  } else if (choise==2) {
    float d, e, y, resultDollar, resultEuro, resultYuan;
    cout<<"Enter the number of dollars: ";
    cin>>d;
    cout<<"Enter the number of euroes: ";
    cin>>e;
    cout<<"Enter the number of yuans: ";
    cin>>y;
    resultDollar=d*dollar;
    resultEuro=e*euro;
    resultYuan=y*yuan;
    cout<<"The result of your transfer = "<<resultDollar<<endl<<"The result of your transfer = "<<resultEuro<<endl<<"The result of your transfer = "<<resultYuan<<endl;
  } else {
    cout<<"Error! Enter only 1 or 2: "<<endl;
    exit(0);
  }
  //system("pause");
  return 0;
}
$ cat Py-CurrencyConverter.py 
from pprint import pprint
import requests
data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
dictionaryU=data['Valute']['USD']
dictionaryE=data['Valute']['EUR']
dictionaryC=data['Valute']['CNY']
'''
lists=[dictionaryU, dictionaryE, dictionaryC]
for index in lists:
  print(index)
'''
'''
print(dictionaryU['Value'],dictionaryU['Name'])
print(dictionaryE['Value'],dictionaryE['Name'])
print(dictionaryC['Value'],dictionaryC['Name'])
'''
'''
dollar=float(input("Enter the dollar rate: "))
euro=float(input("Enter the euro exchange rate: "))
yuan=float(input("Enter the yuan exchange rate: "))
'''
dollar=dictionaryU['Value']
euro=dictionaryE['Value']
yuan=dictionaryC['Value']
print("Dollar exchange rate: ",dollar)
print("Euro exchange rate: ",euro)
print("Yuan exchange rate: ",yuan)
print("1) Convert to dollars, Euros, yuan\n2) Transfer from dollars, Euros, yuan\n")
choise=int(input("Choose your actions:\n"))
if choise==1:
  ruble=float(input("Enter the number of rubles: "))
  resultDollar=ruble/dollar
  resultEuro=ruble/euro
  resultYuan=ruble/yuan
  print("The result of your transfer = ", '{:.2f}'.format(resultDollar))
  print("The result of your transfer = ", '{:.2f}'.format(resultEuro))
  print("The result of your transfer = ", '{:.2f}'.format(resultYuan))
elif choise==2:
  d=float(input("Enter the number of dollars: "))
  e=float(input("Enter the number of euroes: "))  
  y=float(input("Enter the number of yuans: "))
  resultDollar=d*dollar
  resultEuro=e*euro
  resultYuan=y*yuan
  print("The result of your transfer = ", '{:.2f}'.format(resultDollar))
  print("The result of your transfer = ", '{:.2f}'.format(resultEuro))
  print("The result of your transfer = ", '{:.2f}'.format(resultYuan))
else:
  print("Error! Enter only 1 or 2")
  exit(0)
$ python3 Py-CurrencyConverter.py
Dollar exchange rate:  61.3101
Euro exchange rate:  62.5695
Yuan exchange rate:  92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions:
1
Enter the number of rubles: 500
The result of your transfer =  8.16
The result of your transfer =  7.99
The result of your transfer =  5.43
$ python3 Py-CurrencyConverter.py
Dollar exchange rate:  61.3101
Euro exchange rate:  62.5695
Yuan exchange rate:  92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions:
2
Enter the number of dollars: 1000
Enter the number of euroes: 900
Enter the number of yuans: 100
The result of your transfer =  61310.10
The result of your transfer =  56312.55
The result of your transfer =  9216.36
$ python3 Py-CurrencyConverter.py
Dollar exchange rate:  61.3101
Euro exchange rate:  62.5695
Yuan exchange rate:  92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions:
3
Error! Enter only 1 or 2
$ g++ Cpp-CurrencyConverter.cpp -o output
$ ./output
current dollar data: 61.3101
current euro data: 62.5695
current yuan data: 92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions: 1
Enter the number of rubles: 500
The result of your transfer = 8.15526
The result of your transfer = 7.99111
The result of your transfer = 5.42514
$ ./output
current dollar data: 61.3101
current euro data: 62.5695
current yuan data: 92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions: 2
Enter the number of dollars: 1000
Enter the number of euroes: 900
Enter the number of yuans: 100
The result of your transfer = 61310.1
The result of your transfer = 56312.6
The result of your transfer = 9216.36
$ ./output
current dollar data: 61.3101
current euro data: 62.5695
current yuan data: 92.1636
1) Convert to dollars, Euros, yuan
2) Transfer from dollars, Euros, yuan
Choose your actions: 3
Error! Enter only 1 or 2:
Task:
Создайте простой калькулятор, который запускается через терминал.
Decision:
$ cat Cpp-Calculator.cpp
#include <iostream>
using namespace std;
int main()
{
  string repeat="y";
  while (repeat == "y"){
      int numb1, numb2;
      cout<<("Enter number1: ");
      cin>>numb1;
      cout<<("Enter number2: ");
      cin>>numb2;
      char operation;
      cout<<("Enter the operation: ");
      cin>>operation;
      if (operation == '+')
          cout<<(numb1 + numb2)<<endl;
      else if (operation == '-')
          cout<<(numb1 - numb2)<<endl;
      else if (operation == '*')
          cout<<(numb1 * numb2)<<endl;
      else if (operation == '/'){
          if (numb2 == 0)
              cout<<("You cant divide by zero!")<<endl;
          else
              cout<<(numb1 / numb2)<<endl;
      }else{
          cout<<("Invalid operation")<<endl;
      }
      cout<<("Do you want to continue? (y/n): ");
      cin>>repeat;
      if (repeat == "n"){
          break;
      }
      while (repeat!="y" && repeat!="n"){
          cout<<("Please enter the correct answer (y/n): ");
          cin>>repeat;
      }
  }
  return 0;
}
$ cat Py-Calculator.py
repeat="y"
while repeat == "y":
    numb1, numb2 = int(input("Enter number1: ")), int(input("Enter number2: "))
    operation = input("Enter the operation: ")
    if operation == '+':
        print(numb1 + numb2)
    elif operation == '-':
        print(numb1 - numb2)
    elif operation == '*':
        print(numb1 * numb2)
    elif operation == '/':
        if numb2 == 0:
            print('You cant divide by zero!')
        else:
            print(numb1 / numb2)
    else:
        print('Invalid operation')
    repeat = input("Do you want to continue? (y/n): ")
    if repeat == "n":
        break
    while (repeat!="y" and repeat!="n"):
        repeat = input("Please enter the correct answer (y/n): ")
$ python3 Py-Calculator.py
Enter number1: 16
Enter number2: 0
Enter the operation: /
You cant divide by zero!
Do you want to continue? (y/n): t
Please enter the correct answer (y/n): t
Please enter the correct answer (y/n): y
Enter number1: 16
Enter number2: 1
Enter the operation: t
Invalid operation
Do you want to continue? (y/n): y
Enter number1: 16
Enter number2: 1
Enter the operation: -
15
Do you want to continue? (y/n): n
$ g++ Cpp-Calculator.cpp -o output
$ ./output
Enter number1: 16
Enter number2: 0
Enter the operation: /
You cant divide by zero!
Do you want to continue? (y/n): t
Please enter the correct answer (y/n): t
Please enter the correct answer (y/n): y
Enter number1: 16
Enter number2: 1
Enter the operation: t
Invalid operation
Do you want to continue? (y/n): y
Enter number1: 16
Enter number2: 1
Enter the operation: -
15
Do you want to continue? (y/n): n