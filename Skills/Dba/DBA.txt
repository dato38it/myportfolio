Task:
Установить dbeaver
Decision:
$ wget https://dbeaver.io/files/dbeaver-ce_latest_amd64.deb
$ sudo apt install ./dbeaver-ce_latest_amd64.deb
Task:
Добавить нового пользователя в posgresql, добавить ему пароль и создать новую базу с таблицей
Decision:
# CREATE USER tuser2 WITH PASSWORD 'tpassword2';
# CREATE DATABASE tdb2;
# \c tdb2
# CREATE TABLE ttable3 (
name varchar(80),
location point
);
# \d
    List of relations
Schema | Name | Type | Owner 
--------+--------+-------+-------
public | cities | table | tuser
(1 row)
Source:
Создание таблицы - https://postgrespro.ru/docs/postgrespro/9.5/tutorial-table
Task:
Изменить пароль в базе
Decision:
$ mysql -u root -p
mysql> SELECT user,authentication_string,plugin,host FROM mysql.user;
mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'tP@ssw0rd';
mysql> \q
Task:
Создайте таблицу de13ma.XXXX_SALARY_HIST, где XXXX - ваш идентификатор. В таблице должна быть SCD2 версия таблицы de.HISTGROUP (поля PERSON, CLASS, SALARY, EFFECTIVE_FROM, EFFECTIVE_TO). Возьмите в работу таблицы
de13ma.XXXX_SALARY_HIST и de.SALARY_PAYMENTS. Напишите SQL скрипт, выводящий таблицу платежей сотрудникам. В таблице должны быть поля PAYMENT_DT, PERSON, PAYMENT, MONTH_PAID, MONTH_REST. Результат выполнения сохраните в таблицу de13ma.XXXX_SALARY_LOG.
1. MONTH_PAID - суммарно выплачено в месяце,
2. MONTH_REST - осталось выплатить за месяц.
Проверяется в первую очередь понимание как соединять фактовую таблицу с SCD2 таблицей (нельзя все расчеты сделать над DE.SALARY_PAYMENTS, ведь работнику могут недоплатить или переплатить).
В ответе приложите SQL-скрипт, таблица de13ma.XXXX_SALARY_LOG должна быть заполнена.
Decision:
$ cat Sql-Gabn_SALARY_LOG6.sql
create table de13ma.gabn_SALARY_HIST as (
	select 
		PERSON,
		CLASS,
		SALARY,
		dt as effective_from,
		coalesce((
			lead(dt) 
			over (
				partition by person 
				order by dt) - interval '1 day')::date,  
			to_date('9999-12-31', 'YYYY-MM-DD')) as effective_to
	from de.HISTGROUP);
--select * from de13ma.gabn_SALARY_HIST;
--select * from de.SALARY_PAYMENTS;
create table de13ma.gabn_SALARY_LOG as (
	select --*--,
		dgsh.person as PERSON,
		dsp.dt as PAYMENT_DT,
		dsp.payment as PAYMENT,
		--sum(dsp2.payment) as MONTH_PAID,
		--sum(dsp.payment) over (order by dsp.dt between dgsh.effective_from and dgsh.effective_to) as MONTH_PAID,
		sum(dsp.payment) over (partition by dsp.payment order by dsp.dt) as MONTH_PAID,
		dgsh.salary-sum(dsp.payment) as MONTH_REST--,
		--dgsh.salary
	from de13ma.GABN_SALARY_HIST as dgsh
	inner join de.SALARY_PAYMENTS as dsp 
		on dgsh.person=dsp.person 
	--inner join de.SALARY_PAYMENTS as dsp2 
	--	on dsp.dt >= dsp2.dt
	where dsp.dt between dgsh.effective_from and dgsh.effective_to
	group by dgsh.person,
		dsp.dt,
		dsp.payment,
		dgsh.salary--,
		--dgsh.effective_from,
		--dgsh.effective_to
	order by dgsh.person,
		dsp.dt);
select * from de13ma.gabn_SALARY_LOG;
Task:
На основании таблиц DE.LOG и DE.IP постройте структурированную таблицу посещений DE13MA.XXXX_LOG ( DT DATE, LINK VARCHAR( 50 ), USER_AGENT VARCHAR( 200 ), REGION VARCHAR( 30 ) ). Также постройте отчет DE13MA.XXXX_LOG_REPORT ( REGION VARCHAR( 30 ), BROWSER VARCHAR( 10 ) ) – в каких областях какой браузер является наиболее используемым.
Под USER_AGENT подразумевается вся строка описания клиента, под BROWSER – только название браузера (Opera, Safari…). XXXX означает ваши 4 уникальные буквы.
Важные замечания (вплоть до причины незачета задания):
1. Не используйте регулярные выражения там, где можно обойтись без них.
2. То, что вы видите в выводе клиента – это не всегда именно то, что содержится в базе данных.
Decision:
$ cat Sql-Gabn_LOG3.sql
create table DE13MA.GABN_LOG as (
	select 
		to_date (substring (dl.data from '\d{8}'), 'YYYYMMDD') as DT,
		cast (split_part (substring (replace (substring (dl.data, strpos (dl.data, 'http://')), chr(9), '+'), 1, strpos (replace (substring (dl.data, strpos(dl.data, 'http://')), chr(9), '|'), '/5.0') -1), '+', 1) as VARCHAR(50)) LINK,
		cast (split_part (replace (substring (dl.data from 1), chr(9), '+'), '+', 8 ) as VARCHAR(200)) USER_AGENT,
		cast (split_part (di.data, chr(9), 2) as VARCHAR(30)) REGION
	from de.log as dl
	left join de.ip as di
	on
		substring (dl.data, 1, strpos (dl.data, chr(9))) = 
			substring (di.data, 1, strpos (di.data, chr(9))));
select * from DE13MA.GABN_LOG;
$ cat Sql-Gabn_LOG_REPORTS3.sql
create table DE13MA.GABN_LOG_REPORT as (SELECT
		region, 
		browser--, 
		--cnt
	FROM (select
		t1.* , 
		ROW_NUMBER() OVER (PARTITION BY region ORDER BY cnt DESC) as numb
	FROM (select 
			cast (split_part (di.data, chr(9), 2) as VARCHAR(30)) REGION, 
			cast (split_part (substring (replace (substring (dl.data, strpos(dl.data, 'http://')), chr(9), '+'), 1, strpos (replace (substring (dl.data, strpos (dl.data, 'http://')), chr(9), '|'), '/5.0') -1), '+', 4) as VARCHAR(10)) BROWSER,
			count(1) as cnt
		from de.log as dl
		--order by dl.data
		left join de.ip as di
		--on dl.data=di.data;
		on 
			substring (dl.data, 1, strpos (dl.data, chr(9))) =
				substring (di.data, 1, strpos (di.data, chr(9)))	
		--order by region
		group by region, browser) 
		as t1)
	as t2
	WHERE numb = 1);
select * from DE13MA.GABN_LOG_REPORT;
Task:
Создайте структуру базы данных по одной из предложенных тематик.
К базе данных предъявляются следующие требования:
1. должно быть не менее 4 сущностей (включая технические объекты);
2. должна быть хотя бы одна связь один-ко-многим
3. должна быть хотя бы одна связь многие-ко-многим;
4. все отношения приведены к 3НФ.
Предметная область:
1. Продажа автомобилей.
2. Приют для животных.
3. Железнодорожные перевозки.
4. Служба доставки.
5. Организация марафона.
Требования к оформлению:
ER-диаграмму необходимо составлять на app.dbdesigner.net, на проверку нужно присылать ссылку на диаграмму. Также необходимо сделать таблицу в Google Sheets с примерами данных в таблицах.
Возьмите в работу ER-диаграмму, разработанную вами. Разработайте DDL для нее. Создайте файл Sql-Ddl2.sql, в котором должно быть:
1. DDL создания всех таблиц, с правильным указанием имен, типов и ограничений целостности.
2. Для каждой таблицы приведите 2-3 команды INSERT для наполнения данных. Обращайте внимание на типизацию вставляемых данны
Decision:
$ cat Sql-Ddl2.sql
CREATE TABLE de13ma.gabn_dz2_brands (
id_brand SERIAL PRIMARY KEY,
title VARCHAR (255)
);
INSERT INTO de13ma.gabn_dz2_brands (title) VALUES 
('Nissan'),
('Chevrolet'),
('Datsun'),
('Hyundai'),
('Lada');
CREATE TABLE de13ma.gabn_dz2_transmittion_box (
id_box SERIAL PRIMARY KEY,
title VARCHAR (255)
);
INSERT INTO de13ma.gabn_dz2_transmittion_box (title) VALUES 
('Автомат'),
('Механика'),
('Вариатор');
CREATE TABLE de13ma.gabn_dz2_country_partner (
id_country SERIAL PRIMARY KEY,
title VARCHAR (255)
);
INSERT INTO de13ma.gabn_dz2_country_partner (title) VALUES 
('Russia'),
('Japane'),
('USA'),
('South Korea');
CREATE TABLE de13ma.gabn_dz2_clients (
id_client SERIAL PRIMARY KEY,
fio VARCHAR (255),
phone VARCHAR (255),
city VARCHAR (255)
);
INSERT INTO de13ma.gabn_dz2_clients 
(fio, phone, city) 
VALUES 
('David', '88886666000', 'Kutaisi'),
('Angelina', '88880000665', 'Irkutsk'),
('Leonid', '88886666111', 'Irkutsk');
CREATE TABLE de13ma.gabn_dz2_cars (
id_car SERIAL PRIMARY KEY,
id_brand INT REFERENCES de13ma.gabn_dz2_brands(id_brand),
model VARCHAR (255),
price NUMERIC,
releases TIMESTAMP,
id_box INT REFERENCES de13ma.gabn_dz2_transmittion_box(id_box),
id_country INT REFERENCES de13ma.gabn_dz2_country_partner(id_country)
);
INSERT INTO de13ma.gabn_dz2_cars (id_brand, model, price, releases, id_box, id_country) VALUES 
(1, 'Windgroad', 250000, '2006-09-12 12:12:12', 1, 2),
(2, 'Aveo', 450000, '2013-09-12 12:12:12', 3, 3),
(3, 'On-do', 300000, '2015-09-12 12:12:12', 2, 2),
(4, 'Solaris1', 750000, '2017-09-12 12:12:12', 1, 4),
(4, 'Solaris2', 900000, '2020-09-12 12:12:12', 1, 4),
(5, 'Vesta', 850000, '2021-09-12 12:12:12', 3, 1);
CREATE TABLE de13ma.gabn_dz2_sale (
id_sale SERIAL PRIMARY KEY,
id_car INT REFERENCES de13ma.gabn_dz2_cars(id_car),
id_client INT REFERENCES de13ma.gabn_dz2_clients(id_client),
dates TIMESTAMP
);
INSERT INTO de13ma.gabn_dz2_sale (id_car, id_client, dates) VALUES 
(1, 1, '2006-09-12 12:12:12'),
(2, 2, '2014-09-12 12:12:12'),
(3, 1, '2015-09-12 12:12:12'),
(4, 2, '2017-09-12 12:12:12'),
(5, 3, '2020-09-12 12:12:12'),
(6, 1, '2021-09-12 12:12:12');
SELECT * from de13ma.gabn_dz2_sale;
Task:
нагрузка с БД
Decision:
Все запросы, которые можно прочитать select будут отправлять в read replica. А запросы update - отправлять в мастер
Task:
лимит БД
Decision:
Сделать нагрузочный тест со средним sql запросом
Task:
Типы репликаций
Decision:
репликация моментального снимка, репликация транзакций, репликация слиянием
Task:
реляционные базы данных
Decision:
MySQL, SQLite, PostgreSQL
Task:
нереляционные базы данных
Decision:
ElasticSearch, MongoDB, Amazon DynamoDB, Cassandra, HBase
Task:
Чем Реляционная бд отличается от Нереляционной бд?
Decision:
Реляционные предназначены для хранения структурированных данных, способных представлять объекты из окружающего физического мира. К примеру, в такую БД можно включить сведения о конкретном человеке или о товарах, добавленных потенциальным покупателем в корзину. Такие данные можно группировать в специальных таблицах.
Нереляционные базы хранящаяся информация напрямую зависит от особенностей самой базы данных. К примеру, в случае с документоориентированной БД информация может быть представлена в виде иерархии и описывать различные объекты с разными параметрами.
В этом заключается главное отличие NoSQL от SQL и ее же преимущество. Такие базы дают возможность хранить почти неограниченные по объему данные в виде одной сущности. В SQL для хранения большого объема данных необходимо создание множества отдельных, но связанных между собой таблиц.
Task:
Создание и подключение к БД
Decision:
postgres-# \! chcp 1251
postgres-# \l
postgres-# CREATE DATABASE starter;
postgres-# DROP DATABASE starter;
postgres-# CREATE DATABASE starter;
postgres-# \c starter
Task:
Создание и удаление таблиц
Decision:
starter-# CREATE TABLE student_auto (
id INT,
name VARCHAR(50),
surname VARCHAR(50),
gender VARCHAR(50),
mobile VARCHAR(50),
birthday DATE
);
starter-# DROP TABLE student_auto;
starter-# CREATE TABLE student_auto (
id INT,
name VARCHAR(50),
surname VARCHAR(50),
gender VARCHAR(50),
mobile VARCHAR(50),
birthday DATE
);
starter-# \d student_auto;
Task:
Наполнение данными
Decision:
starter=# SELECT * FROM student;
starter=# INSERT INTO student(name, surname) VALUES ('Michael', 'Scott');
starter=# SELECT * FROM student;
Task:
Выборка данных
Decision:
starter=# SELECT * FROM travelers LIMIT 25;
starter=# SELECT surname FROM travelers OFFSET 15;
starter=# SELECT name, email FROM travelers FETCH FIRST 20 ROW ONLY;
starter=# SELECT name, surname FROM travelers ORDER BY name ASC;
starter=# SELECT name, email FROM travelers WHERE gender = 'Female';
starter=# SELECT * FROM travelers WHERE name IN ('Mark', 'Trisha', 'Raymond');
starter=# SELECT country, email FROM travelers WHERE name BETWEEN 'A' AND 'S';
starter=# SELECT email, surname FROM travelers WHERE email LIKE '%.net';
Task:
Базовая арифметика
Decision:
starter=# SELECT min(price) FROM booking_n WHERE name LIKE '%sia';
starter=# SELECT max(price) FROM booking_n WHERE surname BETWEEN 'S' AND 'X';
starter=# SELECT avg(price) from booking_n;
starter=# SELECT sum(price) FROM booking_n;
Task:
Дата и время
Decision:
starter=# SELECT * FROM NOW();
starter=# SELECT EXTRACT (SECOND FROM NOW());
Task:
Первичный ключ
Decision:
starter=# ALTER TABLE travelers ADD login VARCHAR(25);
starter=# ALTER TABLE travelers DROP login;
Task:
Ограничения
Decision:
starter=# ALTER TABLE travelers ADD CONSTRAINT id_unique UNIQUE(id);
starter=# ALTER TABLE travelers ADD CONSTRAINT gender_check CHECK(gender = 'Female' OR gender = 'Male');
Task:
UPSERT и обновление таблиц
Decision:
starter=# UPDATE booking_n SET name  = 'Max' WHERE id = 1;
starter=# UPDATE booking_n SET departure_from  = 'Russia', arriving_to = 'Kazakhstan' WHERE id = 1;
starter=# INSERT INTO booking_n (id,name,surname,departure_from,arriving_to,price) VALUES (1,'John','Doe','USA','UK','$200') ON CONFLICT (id) DO NOTHING;
starter=# INSERT INTO booking_n (id,name,surname,departure_from,arriving_to,price) VALUES (1,'John','Doe','USA','UK','$200') ON CONFLICT (id) DO UPDATE SET departure_from = 'EXCLUDED.departure_from;
Task:
Внешние ключи
Decision:
starter=# ALTER TABLE booking_n ADD new_booking_id BIGSERIAL REFERENCES booking(id);
Task:
соединение таблиц
Таблица "Прайс-лист":
Товар |	Цена
Стол красный | 5000
Стол синий | 6000
Стул черный | 1500
Кресло зеленое | 4500
Кресло оранжевое | 6500
Остатки номенклатуры:
Товар | Количество
Кресло оранжевое | 15
Стул черный | 20
Стул коричневый | 1
Итоговая таблица:	
Товар	Количество | Цена
Decision:
starter=# SELECT * FROM travelers LEFT JOIN booking_n ON travelers.id = booking_n.id;
Товар | Количество | Цена	
Стол красный |  | 5000	
Стол синий |  | 6000	
Стул черный | 20 | 1500	
Кресло зеленое | 4500	
Кресло оранжевое | 15 | 6500	
starter=# SELECT * FROM travelers RIGHT JOIN booking_n ON travelers.id = booking_n.id;
Товар | Количество | Цена	
Кресло оранжевое | 15 | 6500	
Стул черный | 20 | 1500	
Стул коричневый | 1 | 	
Внутреннее:
Товар | Количество | Цена	
Стул черный | 20 | 1500	
Кресло оранжевое | 15 | 6500	
starter=# SELECT * FROM travelers FULL JOIN booking_n ON travelers.id = booking_n.id;		
Стул черный | 20 | 1500	
Кресло оранжевое | 15 | 6500	
Стол красный |  | 5000	
Стол синий |  | 6000	
Кресло зеленое |  | 4500	
Стул коричневый | 1 | 	
starter=# SELECT * FROM travelers CROSS JOIN booking_n ON travelers.id = booking_n.id;
Товар Л | Цена | Товар П | Количество
Стол красный | 5000 | Кресло оранжевое | 15
Стол красный | 5000 | Стул черный | 20
Стол красный | 5000 | Стул коричневый | 1
Стол синий | 6000 | Кресло оранжевое | 15
Стол синий | 6000 | Стул черный | 20
Стол синий | 6000 | Стул коричневый | 1
Стул черный | 1500 | Кресло оранжевое | 15
Стул черный | 1500 | Стул черный | 20
Стул черный | 1500 | Стул коричневый | 1
Кресло зеленое | 4500 | Кресло оранжевое | 15
Кресло зеленое | 4500 | Стул черный | 20
Кресло зеленое | 4500 | Стул коричневый | 1
Кресло оранжевое | 6500 | Кресло оранжевое | 15
Кресло оранжевое | 6500 | Стул черный | 20
Кресло оранжевое | 6500 |	Стул коричневый | 1
Task:
Экспорт в CSV
Decision:
starter=# SELECT * FROM travelers WHERE id < 50;
starter=# \copy (SELECT * FROM travelers WHERE id < 50) TO 'C:\Users\david\Documents\EngineerOfThe2ndCategory\Sberbank\Basics of the PostgreSQL language'  DELIMITER ','  CSV HEADER;
starter=# \copy (SELECT * FROM travelers WHERE id < 50) TO 'C:/Users/david/Documents/EngineerOfThe2ndCategory/Sberbank/Basics of the PostgreSQL language/sample.csv'  DELIMITER ','  CSV HEADER;
Task:
Строковые функции
Decision:
select UPPER('Vasya') up_name, LOWER('Vasya') lo_name,
      '!'||'    Vasya     '||'!' no_trim,
      '!'||TRIM('    Vasya     ')||'!' tr_name, 
      '!'||LTRIM('    Vasya     ')||'!' ltr, 
      '!'||RTRIM('    Vasya     ')||'!' rtr,
      'Vasya'||' '||'Petrov' name
Decision:    
select substr('123456',2) sub_1,
      substr('123456',2,3) sub_2,
      substr('123456',-2) sub_3,
      substr('123456',4,-2) sub_4
Decision:     
select replace('HeLLo worlld','ll','!!') rep, length('123456') len
Task:
функции СУБД
Decision:
-Обновление ПО
-Мониторинг хостов и БД
-Резервное копирование БД
-Репликация данных
Task:
Синхронная репликация
Decision:
-медленнее асинхронной
-надёжнее для сохранения данных
Task:
особенности ClickHouse, которые ускоряют работу с аналитическими запросами
Decision:
-Поддержка приближенных вычислений
-Шардирование БД
-Распараллеливание выполнения запросов
Task:
Технологии работы с большими данными основаны на необходимости
Decision:
-горизонтальной масштабируемости используемых вычислительных ресурсов
-обеспечения отказоустойчивости систем
-распределенного хранения и обработки данных