Task:
напиши terraform модуль, который создаст простой EC2 instance в каждом полученном subnet ID и выдаст output в таком формате
{instance_id : instance_private_ip}
например
{
    i-2565432 : 10.10.10.1
    i-4635656 : 20.20.20.2
}  
Source:
https://www.youtube.com/playlist?list=PLg5SS_4L6LYuu1RAT4l1tCkZrJzkIaNgL
Task:   
Сделай CI/CD Pipeline который созадет и деплоит dicker image в cloud
Task:   
Сделай CI/CD Pipeline который деплоит java приложение в кибернетес
Source:
https://www.youtube.com/playlist?list=PLg5SS_4L6LYuu1RAT4l1tCkZrJzkIaNgL
Task:
Написать программный код (наСервере) изменения всех элементов справочника "Номенклатура", добавить к наименованию слово " проверено". 
Выборку элементов произвести через запрос.
Задание выполнить в демонстрационной базе 1С:Управление торговлей, версии 11.4.
В результате решения предоставить внешнюю печатную форму.    
Task:
Сделать печатную форму для документа «Реализация товаров и услуг» со следующими данными:
Шапка:
  Организация
  Покупатель
  Телефон покупателя
Таблица
Номер по порядку
  Наименование товара
  Количество
  Цена
  Сумма
  Вес
  Объем
В итогах вывести поля
  Сумма
  Вес
  Объем
Task:
ОС не загружается. Предложите на ваш взгляд способы решения проблемы, которые могут вернуть работоспособное состояние.
Task:
При перезагрузке ОС сбиваются настройки ориентации экрана. Предложите на ваш взгляд способы решения проблемы.
Task:
дан файл log.txt
80.149.9.216 - 10:30:20 - 300 - htttp://www.google.com
70.149.9.216 - 10:30:21 - 300 - htttp://www.google.com
83.149.9.216 - 10:30:22 - 325 - htttp://www.google.com
напиши скрипт который выведет статистику:
ip addgres: sum(KB)
ip addgres: sum(KB)
Source:
https://www.youtube.com/playlist?list=PLg5SS_4L6LYuu1RAT4l1tCkZrJzkIaNgL
Task:
Напишите программу на любом скриптовом языке, которая позволит мониторить состояние http сервера (параметры мониторинга придумайте сами).
Вход: ./http_check www.mail.ru
Коды выхода:
0 – Ок
1 – Warning
2 – Critical
Task:
Необходимо отключить автоматическое обновления ОС. Предложите на ваш взгляд способы решения задачи. Решение необходимо сделать с использованием cmd | powershell. 
Task:
Напишите регулярку, которая завхватывает имена pdf файлов из этих урлов?
http://server.com/downloads/life_changing_plans.pdf
http://server.com/downl/life_changing_plans.doc
https://server-dot.com/root.pdf
Task:
База данных "хранение данных сервиса выдачи VPN-ключей пользователям".
Необходимо разработать БД:
1. У пользователя может быть несколько устройств. Для каждого устройства создается свой VPN-ключ, использование одного ключа на 2 и более устройствах не допускается.
2. Ресурсы организации, к которым даётся доступ, объединяются в VPN-группы. Одному VPN-ключу может назначаться несколько VPN-групп.
3. Разные устройства пользователя могут обладать разными правами доступа к инфраструктуре организации.
4. Права доступа на ключ пользователя назначает VPN-администратор.
5. Организация разделена на департаменты. В каждом департаменте имеются свои VPN-администраторы, которые могут давать доступ любому ключу, но только на ресурсы своего департамента. VPN-администратор может числиться в нескольких департаментах.
6. Все действия VPN-администраторов должны записываться.
Результат следует представить в виде SQL-запросов для создания таблиц и реляционной модели данной БД (схема или рисунок).
Task:
Модель базы данных:
1. Пользователь – репрезентация пользователей в приложении. Должны быть обычные и админ пользователи (админ назначается руками в базе или создаётся на старте приложения)
2. Товар – Состоит из заголовка, описания и цены
3. Счёт – Имеет идентификатор счёта и баланс. Привязан к пользователю. У пользователя может быть несколько счетов
4. Транзакция – история зачисления на счёт, хранит сумму зачисления и идентификатор счёта
Функциональные критерии:
Весь описываемый ниже функционал должен быть осуществлён в формате REST API. Работа с шаблонами, HTML или фронтендом в любой форме не предусматривается.
Пользователь может:
1. Регистрация (по паролю и логину, возвращает ссылку активации)
2. Логин
3. Просмотр списка товаров
4. Покупка товара, просто списывает с баланса стоимость товара, при условии наличия на балансе счёта достаточного количества средств
5. Просмотр баланса всех счетов и историю транзакций
6. Зачисление средств на счёт, выполняется с помощью эндпоинта [POST] /payment/webhook симулирует начисление со стороннего сервиса.
Пример тела вебхука, с транзакцией (формат json):
{
	“signature”: “f4eae5b2881d8b6a1455f62502d08b2258d80084”,
	“transaction_id”: 1234567,
	“user_id”: 123456,
	“bill_id”: 123456,
	“amount”: 100
}
Сигнатура формируются по правилу:
from Crypto.Hash import SHA1 
signature = SHA1.new()\
.update(f'{private_key}:{transaction_id}:{user_id}:{bill_id}:{amount}'.encode())\
.hexdigest()
Где private_key – приватный ключ, задаётся в свойствах приложения, transaction_id – уникальный идентификатор транзакции, user_id – пользователь на чеё счёт произойдёт зачисление, bill_id – идентификатор счёта (если счёта с таким айди не существует, то но должен быть создан), amount – сумма транзакции.
Возможности админа:
1. Видеть все товары
2. Видеть всех пользователей и их счета
3. Включать/отключать пользователей
4. Создавать/редактировать/удалять товары
Не функциональные критерии
1. Логины пользователей уникальны
2. После регистрации пользователь создаётся в не активном состоянии. Становится активным переходя по ссылке полученной с регистрации
3. Авторизация должна быть сделана через JWT. Защищённые эндпоинты должны получать токен в заголовке Authorization в Bearer формате
Время выполнения задачи желательно не более 7 дней.
Выполнить задачу с учётом особенностей асинхронной обработки данных. В особенности это касается обработки транзакций, приложение должно быть способно обработать сравнительно большой объём параллельных запросов (с поправкой на технические характеристики сервера).
Task:
Реализовать простой http-прокси-сервер, запускаемый локально (порт на ваше усмотрение), который показывает содержимое страниц Хабра. Прокси должен модицифировать текст на страницах следующим образом: после каждого слова из шести букв должен стоять значок «». Пример:
Исходный текст: http://habrahabr.ru/company/yandex/blog/258673/
Сейчас на фоне уязвимости Logjam все в индустрии в очередной раз обсуждают проблемы и особенности TLS. Я хочу воспользоваться этой возможностью, чтобы  поговорить об одной из них, а именно — о настройке ciphersiutes.
Через ваш прокси: http://127.0.0.1:8232/company/yandex/blog/258673/
Сейчас на фоне уязвимости Logjam все в индустрии в очередной раз обсуждают проблемы и особенности TLS. Я хочу воспользоваться этой возможностью, чтобы поговорить об одной из них, а именно — о настройке ciphersiutes. 
Условия:
1. Python 3.5+ страницы должны отображаться и работать полностью корректно, в точности так, как и оригинальные (за исключением модифицированного текста);
2. при навигации по ссылкам, которые ведут на другие страницы хабра, браузер должен оставаться на адресе вашего прокси;
3. можно использовать любые общедоступные библиотеки, которые сочтёте нужным;
4. чем меньше кода, тем лучше. PEP8 — обязательно;
5. если в условиях вам не хватает каких-то данных, опирайтесь на здравый смысл.
Если задачу удалось сделать быстро, и у вас еще остался энтузиазм - как насчет написания тестов?
Присылайте ваше решение в виде ссылки на gist или на публичный репозиторий на Github.
Task:
Поднять на VDS или локально виртуальный сервер с linux (желательно самостоятельно на virtualbox). 
Поставить LEMP (Linux Nginx Mysql PHP)
Настроить wordpress:
1. Создать директорию в /var/www/wp
2. Скачать wordpress с оф. сайта https://ru.wordpress.org/download/
3. Разархивировать в нужную директорию
4. Настроить отдачу по url-у. Если на VDS (по бесплатному техническому поддомену). Если настраивали на локальной машине, то по localhost.
Task:
Настроить nginx проксирование на php-fpm на сервере, который настроили по заданию 3.
Учесть, чтобы по url-ам либо по домену, отдавался phpinfo с указанной версией php:
1. IP/php5
2. IP/php7.1
3. IP/php7.3
Task:
Нужно разработать таблицу в формате Single Page Application.
Требования к таблице.
1. Таблица должна содержать 4 колонки: Дата, Название, Количество, Расстояние
2. База данных может быть mySQL/PostgreSQL
3. Таблица должна иметь сортировку по всем полям кроме даты. Фильтрация должна быть в виде двух выпадающих списков и текстового поля: Выбор колонки, по которой будет фильтрация, Выбор условия (равно, содержить, больше, меньше), Поле для ввода значения для фильтрации
4. Таблица должна содержать пагинацию
Вся таблица должна работать без перезагрузки страницы.
Можно использовать:
1. возможности нативного JS и PHP
2. jQuery/Vue/React/Axios
3. CSS библиотеки
4. модули Symfony/Zend для работы с БД
Нельзя использовать:
1. Библиотеки с готовыми компонентами или плагины для jQuery/Vue/React, которые предоставляют готовый функционал, требуемый в задании
2. Библиотеки и плагины для валидации
3. CMS системы
Критерии оценки:
1. Названия переменных
2. Адекватность архитектуры приложения
3. Оптимизация работы приложения и его масштабируемость
4. Безопасность
Task:
Верстка окна лицензий
1. Сверстать приведенный ниже дизайн
2. Тип лицензии выводить шрифтом Bebas - выводить через font-face
3. Отображать тип выбранной лицензии и итоговую сумму
4. Формат ссылки в кнопке Buy Now сформируйте по вашему усмотрению
P.S. Все исходники залить на GitHub. Ссылку отправить через HH.ru/SJ.
Task:
Суть задания заключается в проверке знаний построения связей в БД и умение правильно строить запросы без ошибок N+1.
Построение архитектуры:
В этом задании у нас есть три бизнес-задачи на хранение:
1. Создать сущность продукта. У продукта должен быть владелец. Необходимо добавить сущность для сохранения доступов к продукту для пользователя.
2. Создать сущность урока. Урок может находиться в нескольких продуктах одновременно. В уроке должна быть базовая информация: название, ссылка на видео, длительность просмотра (в секундах).
3. Урок могут просматривать множество пользователей. Необходимо для каждого фиксировать время просмотра и фиксировать статус “Просмотрено”/”Не просмотрено”. Статус “Просмотрено” проставляется, если пользователь просмотрел 80% ролика.
Написание запросов:
В этом пункте потребуется использовать выполненную вами в прошлом задании архитектуру:
1. Реализовать API для выведения списка всех уроков по всем продуктам к которым пользователь имеет доступ, с выведением информации о статусе и времени просмотра.
2. Реализовать API с выведением списка уроков по конкретному продукту к которому пользователь имеет доступ, с выведением информации о статусе и времени просмотра, а также датой последнего просмотра ролика.
3. Реализовать API для отображения статистики по продуктам. Необходимо отобразить список всех продуктов на платформе, к каждому продукту приложить информацию:
1. Количество просмотренных уроков от всех учеников.
2. Сколько в сумме все ученики потратили времени на просмотр роликов.
3. Количество учеников занимающихся на продукте.
4. Процент приобретения продукта (рассчитывается исходя из количества полученных доступов к продукту деленное на общее количество пользователей на платформе).
Результат выполнения:
1. Выполненная архитектура на базе данных SQLite с использованием Django.
2. Реализованные API на базе готовой архитектуры.
Мы ожидаем: 
1. Ссылка на публичный репозиторий в GitHub с выполненным проектом.
Task:
Cоздать с использованием Django и bootstrap веб-приложение для работы с информацией о неких персонах.
Реализовать следующие кейсы: 
1. Автогенерация данных персон. 
2. Поиск в списке персон. 
3. Просмотр данных выбранной персоны. 
4. Добавление новой персоны вручную 
5. Редактирование данных выбранной персоны. 
6. Экспорт данных из списка персон
Продумать механизм запуска автогенерации данных.
При автогенерации, должны создаваться персоны, например 10000, с рандомными данными по следующим полям: 
1. ФИО (строка) 
2. Дата рождения (дата) 
3. Пол (справочник) 
4. Номер мобильного телефона (строка) 
5. Срок обучения с (дата) 
6. Срок обучения по (дата) 
7. Группа обучения (строка) 
8. Наименование учебного заведения (строка)
У персоны также должны быть один или несколько документов, со следующими полями: 
1. номер (строка) 
2. дата выдачи (дата) 
3. тип (справочник) (паспорт, студенческий, св. о рождении и т.п.) 
4. скан документа (файл) 
5. необходимо обеспечить уникальность номера документа в системе
В списке персон выводить следующие колонки: 
1. ФИО 
2. Дата рождения 
3. Пол 
4. Номер мобильного телефона 
5. Срок обучения с 
6. Срок обучения по 
7. Группа обучения 
8. Наименование учебного заведения 
9. Номер паспорта (если есть)
Должен быть поиск по всем перечисленым полям 
1. поля с датой должны иметь фильтры от и до 
2. поля с справочниками должны иметь в фильтре мультивыбор
Экспорт данных из списка персон должен быть с учётом указанных в интерфейсе фильтров и сортировки.
1. На странице просмотра детальной информации о персоне должна быть представлена инфомация по всем связанным с ней документам, включая сканы.
2. Напиши функцию, которая будет возвращать список от N до M не используя range
Task:
Необходимо собрать с помощью bootstrap 5 и запустить новую страницу по макету 
https://www.figma.com/file/csU67B0SQVZO1AkwvMZa3D/Тестовое-задание-N2?type=design&node-id=1-1012&mode=design&t=wz2qpqpXo6RochwT-0
- сборку проекта осуществить с помощью python 3.9, Django 4.1 и MySQL
- проект разместить в git репозитории
- для сборки клиентской части страницы необходимо использовать bootstrap 5
- для запуска слайдера необходимо использовать slick slider http://kenwheeler.github.io/slick/ (см. Slider Syncing)
- по клику на большую фотографию на слайдере фотки должны открываться на весь экран и листаться галереей
- необходимо чтобы slider заполнялся через админку django. Необходимо настроить визуально понятный admin.py, чтобы выводилась картинка и название в списке записей элементов слайдера.
- для картинок модели слайдера необходимо использовать пакет django-filer и через него грузить картинки в слайдер
- записи слайдера в админке должны сортироваться при помощи drag&drop, для этого необходимо использовать пакет django-admin-sortable2
- все зависимости для запуска проекта расположить в файле req.pip в корне проекта.
Тестовое задание проверяет поверхностно основные навыки кандидата необходимые для текущей вакансии:
- умение работать с bootstrap 5;
- базовые знания HTML, CSS, JavaScript;
- умение запустить и собрать новый проект на Django, с подключением дополнительных пакетов;
- базовые навыки работы с GIT;
- базовые навыки работы с Figma.
Task:
Распознавание с помощью компьютерного зрения (использовать OpenCV)
Необходимо обнаружить печати, определить их координаты и выделить их (печати) контуром. Также определить присутствуют ли на листе печати исполнителя и заказчика, либо только одной организации. Если обнаружена только одна печать, определить, кому она принадлежит. Ответ может выглядеть в виде подобного списка:
1) Лист1: исполнитель – Да, заказчик – Да
2) Лист2: исполнитель – Нет, заказчик – Да
3) ...
Использовать любой язык программирования, который предполагает возможность работы с OpenCV: C++, C#, Python...
* Примеры файлов во вложении.
Task:	
Взять произвольный лог следующего формата(можно скачать какой-нибудь из интернета):
Получить DataFrame всех возможных ребер в таком логе (state1-ststate2, state1-state3 и т д)
Необходимо написать алгоритм сбора статистики по логу:
1. количество проходов по ребру(всего)
2. количество уникальных trace, которые прошли по этому ребру
3. min,max, avg по времени для каждого ребра
В итоге получится примерно такой DataFrame
*Использовать pandas для загрузки датафрейма из csv.
Комментарий к первому заданию.
Это задания из области Process Mining – исследуется лог процесса, например, процесс выдачи кредита. Процесс может состоять из различных этапов – создание заявки, запрос проверки клиента, проверка клиента, согласование и т.д. В разрезе задания, эти этапы соответствуют колонке state. Каждый процесс имеет свой уникальный id, то есть пришёл Иванов И.И. оформлять кредит – это процесс с одним id, пришёл Петров П.П. – это процесс с другим id и т.д. Это соответствует колонке trace. Так же у каждого этапа есть временная метка, в примере – date. Например, когда стоит задача, найти количество проходов по ребру, необходимо найти, сколько раз осуществлялся переход от одного этапа к другому, составляющим это ребро. И это в целом по всем id. Хотя может стоять и задача найти то же самое, но для конкретного id. Скажем, в идеальном процессе, переход от запроса на проверку клиента к проверке клиента должен осуществляться один раз, но в силу каких-то обстоятельств, после проверки клиента снова создаётся запрос на проверку и далее проверка клиента, как бы зацикливание.
Task:
У нас на иркру есть баннеры. Когда баннер показывается пользователю, на сервер статистики отправляется запрос. Этот запрос попадает в лог-файл сервера Nginx.
Строка в логе выглядит примерно так:
185.37.57.206 - static.irk.ru [23/Jan/2021:06:25:17 +0800] "GET /static2/img/adv/audit/?stat=12872&banner=11199&t=1611354316972 HTTP/1.1" 200 43 "https://www.irk.ru/" "Mozilla/5.0 (iPhone; CPU iPhone OS 14_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1" 0.000 185.37.57.206
Тут видно, что 23 января в 6:25 был показ баннера (banner=11199).
Также в лог отправлются события доскролла. Доскролл - это когда баннер где-то внизу страницы, пользователь его сначала не видит. А потом, когда он до него скроллом доходит, на сервер отправлятся событие "доскролл" и логируется. Строка лога выглядит точно так же, только у нее адрес не /audit/, а /scrollaudit/
Каждый запрос на лету дописывается в файл access-irk.log
В процессе своей работы, сервер Nginx (а точнее демон logrotate) ротирует логи. Каждый день, в 6:25 утра, создается новый файл access-irk.log, а старый файл закрывается и переименовывается в access-irk.log.1. А лог-файлы, начиная со второго, еще и сжимаются.
В любой момент времени папка логов выглядит примерно так:
-rw-r----- 1 dima dima  12932420 Jan 23 09:53 access-irk.log
-rw-r----- 1 dima dima 176615549 Jan 23 06:25 access-irk.log.1
-rw-r----- 1 dima dima  10522468 Jan 22 06:25 access-irk.log.2.gz
-rw-r----- 1 dima dima   6764534 Jan 21 06:25 access-irk.log.3.gz
-rw-r----- 1 dima dima   7718910 Jan 20 06:25 access-irk.log.4.gz
-rw-r----- 1 dima dima   6178164 Jan 19 06:25 access-irk.log.5.gz
-rw-r----- 1 dima dima   3842092 Jan 23 09:51 access-irk.log.6.gz
Задача. Вам надо написать функцию, которая проанализирует логи в папке и покажет количество просмотров и доскроллов для заданного баннера в заданный день.
Моменты:
1. функция запускается по крону, поэтому от нее не требуется супер быстродействие
2. но при прочих равных, чем быстрее она даст ответ, тем лучше
3. читабельность кода важна, ведь код читают и поддерживают люди
4. я приложил тест для pytest - вы сможете проверить свой алгоритм на корректность
5. в папке логов в реальности может быть 50-90 файлов и файлы с другими названиями
6. робастность скрипта приветствуется, недавно у нас проскакивал поврежденный лог-файл
Что делать
Скачайте файлы логов и заготовку вот тут: https://yadi.sk/d/QEwIrkyoBAEP2g?w=1
Task:
Написать структуру классов, методов и свойств, описывающих работу сети кинотеатров (нескольких кинотеатров; в каждом кинотеатре несколько кинозалов; кинозалы в разных кинотеатрах могут повторяться; существует набор фильмов, которые сейчас показывают; фильмы в кинозалах демонстрируют по расписанию; стоимость билета на сеанс может отличаться в зависимости от места в кинозале; и т.д.).
Task:
Чем отличается Ansible ot Puppet? другие Системы управления конфигурациями
Task:
Чем DNS отличается от AD?
Task:
Чем IpV4 отличается от IpV6?
Task:
Для чего нужны systemd и target?
Task:
Для чего нужны относительные и абсолютные ссылки?
Task:
Какие MPM Apache вы знаете? В двух словах опишите их преимущества.
Task:
Какие возможны режимы работы PHP в связке с web-сервером?
Task:
Чем Nginx отличается от Apache?
Task:
Среди способов обработки запросов API-шлюзом есть следующие
Decision:
-Статический ответ
-Динамический ответ
-Вызов Cloud Function
-Обращение в Object Storage
-Перенаправление запроса на другой URL
Task:
Какими способами Yandex API Gateway может обработать запрос?
Decision:
-Обратиться к Yandex Object Storage
-Вызвать функцию из Yandex Cloud Functions
-Автоматически сформулировать статический ответ
-Отправить запрос на другой URL
Task:
Что означает совместимость с AWS DynamoDB API
Decision:
-Доступность документных таблиц
-Доступность совместимого API для работы с документными таблицами
-Возможность использовать AWS CLI и AWS SDK для создания приложений
Task:
Прорешать первый том CCNA R&S
Task:
Сохраните листинг самых ресурсоемких процессов и прокомментируйте его.
Task:
Как посмотреть список открытых файлов запущенного процесса?
Task:
10тый raid
Task:
Есть команда Data Science, которые занимаются анализом данных, обучают модели. В своей работе они используют источников данных, несколько БД, s3.
Необходимо предоставить для команды рабочие инструменты (из стека Amazon или иные) для такого перечня задач:
1. Управление доступом к данным (базам и s3) - разным членам доступны разные БД или s3
2. Анонимизация данных - подготовка дампов, где сделана замена настоящих user_id/email/etc на анонимизированные
3. Отслеживание утечек данных - выявление ситуаций, когда начали выкачивать пол базы
4. Расчет математических моделей - использование CPU/GPU для запуска вычислительных модулей
5. Хранение промежуточных и финальных результатов работы (моделей) - хранение "бинарников"
6. Версионирование кода и моделей
Попробуйте предложить решение для как можно большего числа пунктов (опишите словами).
А для любого одного пункта, попробуйте предложить черновик манифеста/кода/etc для демонстрации решения.
Ожидаемый результат
В результате тестового задания, ожидается:
Ссылка на Gitlab/Github/etc
1. С текстом, который показывает как подойти к решению одного или более пунктов
2. С кодом, который иллюстрирует ваш подход к решению.
Ссылку на открытый репозиторий приложи в опросник
Task:
На https://github.com надо создать репозиторий, где положить описание для создания Docker контейнера в котором надо сделать установку с нуля Redmine http://www.redmine.org, потом можно усложнить и разбить установку на три контейнера - БД, сервер приложений (Redmine+puma), фронтенд (nginx) и запускать это все при помощи docker-compose, все результаты работы также положить на гитхаб, Напиши, как закончишь, наши инженеры посмотрят. Также, вместо редмайна можно взять любое веб-приложение или написать свое, тут есть простор для творчества.
Необязательное задание со звездочкой: подключить Travis CI для сборки docker образа Redmine, его тестирования и публикации на docker hub.
Task:
У Вас есть MySQL-сервер, который обслуживает запросы большого числа пользователей. В какой-то момент Вы обнаруживаете, что на сервере периодически увеличивается значение переменной 'Aborted_connects', при этом в логах MySQL-сервера не появляются новые сообщения. Что может вызывать подобное поведение? Каковы будут Ваши шаги по устранению данной проблемы?
Task:
У Вас есть 2 датацентра, соединенные сетью. Опишите, как Вы бы организовали инфраструктуру БД для нового сервиса, в том числе репликацию, мониторинг и резервное копирование. Каковы будут Ваши действия в случае отказа одного из дата-центров?
Task:
СУБД - настройка репликации в Postgress или Mysql
Task:
индексы в СУБД, что такое, какие бывают их плюсы и минусы